====================================
cd to out
"/home/vf/om/models/omni/test/out"
====================================
Setting ModelicaPath
true
====================================
Loading Modelica
true
====================================
Loading MbsLite
true
====================================
Loading MbsLite.Test.Omni.OmniWheelAtRestTest
true
====================================
Instantiating MbsLite.Test.Omni.OmniWheelAtRestTest
"function MbsLite.Util.Assert.AssertInitialized
  input String modelName;
  input Real[:] value;
  input String parameterName;
algorithm
  assert(max(value) < 9.999999999999999e+59, modelName + \": \" + parameterName + \" is not initialized\");
end MbsLite.Util.Assert.AssertInitialized;

function MbsLite.Util.Assert.AssertInitializedI
  input String modelName;
  input Integer value;
  input String parameterName;
algorithm
  assert(value > -4611686018427387903, modelName + \": \" + parameterName + \" is not initialized\");
end MbsLite.Util.Assert.AssertInitializedI;

function MbsLite.Util.Assert.AssertInitializedS
  input String modelName;
  input String value;
  input String parameterName;
algorithm
  assert(value <> \"NOT INITIALIZED\", modelName + \": \" + parameterName + \" is not initialized\");
end MbsLite.Util.Assert.AssertInitializedS;

function MbsLite.Util.CompareReal
  input Real a;
  input Real b;
  input Real absTol = 1e-10 \"Absolute tolerance.\";
  input Real relTol = 1e-05 \"Relative tolerance.\";
  output Boolean equal;
  protected Real diff;
algorithm
  diff := abs(a - b);
  equal := diff < absTol or diff <= max(abs(b), abs(a)) * relTol;
end MbsLite.Util.CompareReal;

function MbsLite.Util.Euler
  input Real[3] origin;
  input Real[3] point;
  input Real[3] velocityOfOrigin;
  input Real[3] omega;
  output Real[3] velocityOfPoint;
algorithm
  velocityOfPoint := {velocityOfOrigin[1] + omega[2] * (point[3] - origin[3]) - omega[3] * (point[2] - origin[2]), velocityOfOrigin[2] + omega[3] * (point[1] - origin[1]) - omega[1] * (point[3] - origin[3]), velocityOfOrigin[3] + omega[1] * (point[2] - origin[2]) - omega[2] * (point[1] - origin[1])};
end MbsLite.Util.Euler;

function MbsLite.Util.Quaternions.QMult
  input Real[4] q1;
  input Real[4] q2;
  output Real[4] q3;
  protected Real a1;
  protected Real a2;
  protected Real[3] A1;
  protected Real[3] A2;
  protected Real[3] A3;
algorithm
  a1 := q1[1];
  a2 := q2[1];
  A1 := {q1[2], q1[3], q1[4]};
  A2 := {q2[2], q2[3], q2[4]};
  A3 := {A2[1] * a1 + A1[1] * a2 + A1[2] * A2[3] - A1[3] * A2[2], A2[2] * a1 + A1[2] * a2 + A1[3] * A2[1] - A1[1] * A2[3], A2[3] * a1 + A1[3] * a2 + A1[1] * A2[2] - A1[2] * A2[1]};
  q3 := {a1 * a2 + (-A1[2]) * A2[2] - A1[3] * A2[3] - A1[1] * A2[1], A3[1], A3[2], A3[3]};
end MbsLite.Util.Quaternions.QMult;

function MbsLite.Util.Quaternions.QRot
  input Real angle;
  input Real[3] axis;
  output Real[4] q;
  protected Real s;
algorithm
  s := sin(0.5 * angle);
  q := {cos(0.5 * angle), s * axis[1], s * axis[2], s * axis[3]};
end MbsLite.Util.Quaternions.QRot;

function MbsLite.Util.Quaternions.QToT \"Inline before index reduction\" \"Converts quaternion to Rotation matrix.\"
  input Real[4] q;
  output Real[3, 3] T;
algorithm
  T := {{(q[1] ^ 2.0 + q[2] ^ 2.0 + (-q[3] ^ 2.0) - q[4] ^ 2.0) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), 2.0 * (q[2] * q[3] - q[1] * q[4]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), 2.0 * (q[2] * q[4] + q[1] * q[3]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0)}, {2.0 * (q[1] * q[4] + q[2] * q[3]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), (q[1] ^ 2.0 + q[3] ^ 2.0 + (-q[2] ^ 2.0) - q[4] ^ 2.0) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), 2.0 * (q[3] * q[4] - q[1] * q[2]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0)}, {2.0 * (q[2] * q[4] - q[1] * q[3]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), 2.0 * (q[1] * q[2] + q[3] * q[4]) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0), (q[1] ^ 2.0 + q[4] ^ 2.0 - q[3] ^ 2.0 - q[2] ^ 2.0) / (q[1] ^ 2.0 + q[2] ^ 2.0 + q[3] ^ 2.0 + q[4] ^ 2.0)}};
end MbsLite.Util.Quaternions.QToT;

function MbsLite.Util.StringA
  input Real[:] array;
  input String delim = \", \";
  output String render;
  protected String accumulator = \"\";
  protected Integer counter = 0;
algorithm
  for item in array loop
    accumulator := accumulator + String(item, 0, true, 6);
    counter := 1 + counter;
    if counter < size(array, 1) then
      accumulator := accumulator + delim;
    end if;
  end for;
  render := \"{ \" + accumulator + \" }\";
end MbsLite.Util.StringA;

function Modelica.Math.Vectors.norm \"Return the p-norm of a vector\"
  input Real[:] v \"Real vector\";
  input Real p(min = 1.0) = 2.0 \"Type of p-norm (often used: 1, 2, or Modelica.Constants.inf)\";
  output Real result = 0.0 \"p-norm of vector v\";
  protected Real eps = 1e-14;
algorithm
  if size(v, 1) > 0 then
    if p >= 2.0 - eps and p <= 2.0 + eps then
      result := sqrt(v * v);
    elseif p >= 9.999999999999999e+59 then
      result := max(array(abs($tmpVar2) for $tmpVar2 in v));
    elseif p >= 1.0 - eps and p <= 1.0 + eps then
      result := sum(array(abs($tmpVar5) for $tmpVar5 in v));
    elseif p >= 1.0 then
      result := sum(abs(v[i]) ^ p for i in 1:size(v, 1)) ^ (1.0 / p);
    else
      assert(false, \"Optional argument \\\"p\\\" (= \" + String(p, 0, true, 6) + \") of function \\\"norm\\\" >= 1 required\");
    end if;
  end if;
end Modelica.Math.Vectors.norm;

class MbsLite.Test.Omni.OmniWheelAtRestTest
  constant Real m.vertical[1] = 0.0;
  constant Real m.vertical[2] = 1.0;
  constant Real m.vertical[3] = 0.0;
  constant Real m.Gravity[1] = 0.0;
  constant Real m.Gravity[2] = 0.0;
  constant Real m.Gravity[3] = 0.0;
  parameter Boolean m.strict = false;
  parameter Real m.R = 0.05 \"'wheel radius' := distance from wheel axis to the floor\";
  parameter Integer m.n = 5;
  parameter Real m.wheelHubMass = 0.15;
  parameter Real m.rollerMass = 0.05;
  parameter Real m.halfRollerAngle = 3.141592653589793 / /*Real*/(m.n);
  parameter Real m.wheelHubRadius = m.R * cos(m.halfRollerAngle);
  parameter Real m.rollerLength = 2.0 * m.R * sin(m.halfRollerAngle);
  parameter Real m.rollerRadiusForMoi = 0.5 * (m.R - m.wheelHubRadius);
  parameter Real m.v0 = 0.0;
  parameter Real m.v0dirAngle = 0.0;
  parameter Real m.q0[1] = MbsLite.Util.Quaternions.QRot(m.v0dirAngle, {0.0, 1.0, 0.0})[1];
  parameter Real m.q0[2] = MbsLite.Util.Quaternions.QRot(m.v0dirAngle, {0.0, 1.0, 0.0})[2];
  parameter Real m.q0[3] = MbsLite.Util.Quaternions.QRot(m.v0dirAngle, {0.0, 1.0, 0.0})[3];
  parameter Real m.q0[4] = MbsLite.Util.Quaternions.QRot(m.v0dirAngle, {0.0, 1.0, 0.0})[4];
  parameter Real m.v0vec[1] = (MbsLite.Util.Quaternions.QToT({m.q0[1], m.q0[2], m.q0[3], m.q0[4]}) * m.v0 * {1.0, 0.0, 0.0})[1];
  parameter Real m.v0vec[2] = (MbsLite.Util.Quaternions.QToT({m.q0[1], m.q0[2], m.q0[3], m.q0[4]}) * m.v0 * {1.0, 0.0, 0.0})[2];
  parameter Real m.v0vec[3] = (MbsLite.Util.Quaternions.QToT({m.q0[1], m.q0[2], m.q0[3], m.q0[4]}) * m.v0 * {1.0, 0.0, 0.0})[3];
  Real m.base.OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.base.OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.base.OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.base.OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.base.OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.base.OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.base.OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.base.OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.base.OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.base.OutPort.T[1,1] \"Matrix of rotation\";
  Real m.base.OutPort.T[1,2] \"Matrix of rotation\";
  Real m.base.OutPort.T[1,3] \"Matrix of rotation\";
  Real m.base.OutPort.T[2,1] \"Matrix of rotation\";
  Real m.base.OutPort.T[2,2] \"Matrix of rotation\";
  Real m.base.OutPort.T[2,3] \"Matrix of rotation\";
  Real m.base.OutPort.T[3,1] \"Matrix of rotation\";
  Real m.base.OutPort.T[3,2] \"Matrix of rotation\";
  Real m.base.OutPort.T[3,3] \"Matrix of rotation\";
  Real m.base.OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.base.OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.base.OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.base.OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.base.OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.base.OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter Real m.wheel.Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 9.999999999999999e+59) = 0.0;
  parameter Real m.wheel.Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 9.999999999999999e+59) = 0.0;
  parameter Real m.wheel.Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 9.999999999999999e+59) = 0.0;
  constant Real m.wheel.rollerAxisLocal[1] = 1.0;
  constant Real m.wheel.rollerAxisLocal[2] = 0.0;
  constant Real m.wheel.rollerAxisLocal[3] = 0.0;
  constant Real m.wheel.vertical[1] = 0.0;
  constant Real m.wheel.vertical[2] = 1.0;
  constant Real m.wheel.vertical[3] = 0.0;
  constant Real m.wheel.wheelAxis[1] = 0.0;
  constant Real m.wheel.wheelAxis[2] = 0.0;
  constant Real m.wheel.wheelAxis[3] = 1.0;
  parameter String m.wheel.name = \"wheel\";
  parameter Integer m.wheel.nOne = 5;
  parameter Integer m.wheel.n = m.n \"Number of rollers\";
  parameter Real m.wheel.psi = 0.0 \"Roller mecanum angle\";
  parameter Real m.wheel.rollerMass = m.rollerMass;
  parameter Real m.wheel.rollerAxialMoi = 0.5 * m.rollerMass * m.rollerRadiusForMoi ^ 2.0 \"Roller moment of inertia wrt its axis\";
  parameter Real m.wheel.rollerOrthogonalMoi = 0.08333333333333333 * m.rollerMass * (3.0 * m.rollerRadiusForMoi ^ 2.0 + m.rollerLength ^ 2.0) \"Roller moment of inertia wrt any axis orthogonal to the main roller axis\";
  parameter Real m.wheel.wheelHubMass = m.wheelHubMass;
  parameter Real m.wheel.wheelHubAxialMoi = 0.5 * m.wheelHubMass * m.wheelHubRadius ^ 2.0 \"Wheel hub moment of inertia wrt its axis\";
  parameter Real m.wheel.wheelHubOrthogonalMoi = 0.08333333333333333 * m.wheelHubMass * (0.0001 + 3.0 * m.wheelHubRadius ^ 2.0) \"Wheel hub moment of inertia wrt any axis orthogonal to the main wheelHub axis\";
  parameter Real m.wheel.alpha = 3.141592653589793 / /*Real*/(m.wheel.n) \"Max angle of the half-sector\";
  parameter Real m.wheel.R = m.R \"Omni wheel outer radius\";
  parameter Real m.wheel.R1 = m.wheel.R * cos(m.wheel.alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.r0[1](start = 9.999999999999999e+59) = 0.0;
  parameter Real m.wheel.r0[2](start = 9.999999999999999e+59) = m.R;
  parameter Real m.wheel.r0[3](start = 9.999999999999999e+59) = 0.0;
  parameter Real m.wheel.q0[1](start = 9.999999999999999e+59) = m.q0[1];
  parameter Real m.wheel.q0[2](start = 9.999999999999999e+59) = m.q0[2];
  parameter Real m.wheel.q0[3](start = 9.999999999999999e+59) = m.q0[3];
  parameter Real m.wheel.q0[4](start = 9.999999999999999e+59) = m.q0[4];
  parameter Real m.wheel.v0[1](start = 9.999999999999999e+59) = m.v0vec[1];
  parameter Real m.wheel.v0[2](start = 9.999999999999999e+59) = m.v0vec[2];
  parameter Real m.wheel.v0[3](start = 9.999999999999999e+59) = m.v0vec[3];
  parameter Real m.wheel.omega0[1](start = 9.999999999999999e+59) = m.v0vec[3] / m.R;
  parameter Real m.wheel.omega0[2](start = 9.999999999999999e+59) = 0.0;
  parameter Real m.wheel.omega0[3](start = 9.999999999999999e+59) = (-m.v0vec[1]) / m.R;
  parameter Real m.wheel.T0[1,1] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[1, 1];
  parameter Real m.wheel.T0[1,2] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[1, 2];
  parameter Real m.wheel.T0[1,3] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[1, 3];
  parameter Real m.wheel.T0[2,1] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[2, 1];
  parameter Real m.wheel.T0[2,2] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[2, 2];
  parameter Real m.wheel.T0[2,3] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[2, 3];
  parameter Real m.wheel.T0[3,1] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[3, 1];
  parameter Real m.wheel.T0[3,2] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[3, 2];
  parameter Real m.wheel.T0[3,3] = MbsLite.Util.Quaternions.QToT({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]})[3, 3];
  parameter Real m.wheel.RollerAngles[1] = 0.0 \"Angles between downward vertical { 0, -1, 0 } and roller center radius vectors\";
  parameter Real m.wheel.RollerAngles[2] = 2.0 * m.wheel.alpha \"Angles between downward vertical { 0, -1, 0 } and roller center radius vectors\";
  parameter Real m.wheel.RollerAngles[3] = m.wheel.alpha * 4.0 \"Angles between downward vertical { 0, -1, 0 } and roller center radius vectors\";
  parameter Real m.wheel.RollerAngles[4] = 6.0 * m.wheel.alpha \"Angles between downward vertical { 0, -1, 0 } and roller center radius vectors\";
  parameter Real m.wheel.RollerAngles[5] = 8.0 * m.wheel.alpha \"Angles between downward vertical { 0, -1, 0 } and roller center radius vectors\";
  parameter Real m.wheel.RollerQs[1,1] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[1], {0.0, 0.0, 1.0}))[1];
  parameter Real m.wheel.RollerQs[1,2] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[1], {0.0, 0.0, 1.0}))[2];
  parameter Real m.wheel.RollerQs[1,3] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[1], {0.0, 0.0, 1.0}))[3];
  parameter Real m.wheel.RollerQs[1,4] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[1], {0.0, 0.0, 1.0}))[4];
  parameter Real m.wheel.RollerQs[2,1] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[2], {0.0, 0.0, 1.0}))[1];
  parameter Real m.wheel.RollerQs[2,2] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[2], {0.0, 0.0, 1.0}))[2];
  parameter Real m.wheel.RollerQs[2,3] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[2], {0.0, 0.0, 1.0}))[3];
  parameter Real m.wheel.RollerQs[2,4] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[2], {0.0, 0.0, 1.0}))[4];
  parameter Real m.wheel.RollerQs[3,1] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[3], {0.0, 0.0, 1.0}))[1];
  parameter Real m.wheel.RollerQs[3,2] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[3], {0.0, 0.0, 1.0}))[2];
  parameter Real m.wheel.RollerQs[3,3] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[3], {0.0, 0.0, 1.0}))[3];
  parameter Real m.wheel.RollerQs[3,4] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[3], {0.0, 0.0, 1.0}))[4];
  parameter Real m.wheel.RollerQs[4,1] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[4], {0.0, 0.0, 1.0}))[1];
  parameter Real m.wheel.RollerQs[4,2] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[4], {0.0, 0.0, 1.0}))[2];
  parameter Real m.wheel.RollerQs[4,3] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[4], {0.0, 0.0, 1.0}))[3];
  parameter Real m.wheel.RollerQs[4,4] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[4], {0.0, 0.0, 1.0}))[4];
  parameter Real m.wheel.RollerQs[5,1] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[5], {0.0, 0.0, 1.0}))[1];
  parameter Real m.wheel.RollerQs[5,2] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[5], {0.0, 0.0, 1.0}))[2];
  parameter Real m.wheel.RollerQs[5,3] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[5], {0.0, 0.0, 1.0}))[3];
  parameter Real m.wheel.RollerQs[5,4] = MbsLite.Util.Quaternions.QMult({m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, MbsLite.Util.Quaternions.QRot(m.wheel.RollerAngles[5], {0.0, 0.0, 1.0}))[4];
  parameter Real m.wheel.VerticalInRollersAxes[1,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {0.0, 1.0, 0.0})[1];
  parameter Real m.wheel.VerticalInRollersAxes[1,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {0.0, 1.0, 0.0})[2];
  parameter Real m.wheel.VerticalInRollersAxes[1,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {0.0, 1.0, 0.0})[3];
  parameter Real m.wheel.VerticalInRollersAxes[2,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {0.0, 1.0, 0.0})[1];
  parameter Real m.wheel.VerticalInRollersAxes[2,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {0.0, 1.0, 0.0})[2];
  parameter Real m.wheel.VerticalInRollersAxes[2,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {0.0, 1.0, 0.0})[3];
  parameter Real m.wheel.VerticalInRollersAxes[3,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {0.0, 1.0, 0.0})[1];
  parameter Real m.wheel.VerticalInRollersAxes[3,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {0.0, 1.0, 0.0})[2];
  parameter Real m.wheel.VerticalInRollersAxes[3,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {0.0, 1.0, 0.0})[3];
  parameter Real m.wheel.VerticalInRollersAxes[4,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {0.0, 1.0, 0.0})[1];
  parameter Real m.wheel.VerticalInRollersAxes[4,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {0.0, 1.0, 0.0})[2];
  parameter Real m.wheel.VerticalInRollersAxes[4,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {0.0, 1.0, 0.0})[3];
  parameter Real m.wheel.VerticalInRollersAxes[5,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {0.0, 1.0, 0.0})[1];
  parameter Real m.wheel.VerticalInRollersAxes[5,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {0.0, 1.0, 0.0})[2];
  parameter Real m.wheel.VerticalInRollersAxes[5,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {0.0, 1.0, 0.0})[3];
  parameter Real m.wheel.RollerCenterDirections[1,1] = -m.wheel.VerticalInRollersAxes[1,1];
  parameter Real m.wheel.RollerCenterDirections[1,2] = -m.wheel.VerticalInRollersAxes[1,2];
  parameter Real m.wheel.RollerCenterDirections[1,3] = -m.wheel.VerticalInRollersAxes[1,3];
  parameter Real m.wheel.RollerCenterDirections[2,1] = -m.wheel.VerticalInRollersAxes[2,1];
  parameter Real m.wheel.RollerCenterDirections[2,2] = -m.wheel.VerticalInRollersAxes[2,2];
  parameter Real m.wheel.RollerCenterDirections[2,3] = -m.wheel.VerticalInRollersAxes[2,3];
  parameter Real m.wheel.RollerCenterDirections[3,1] = -m.wheel.VerticalInRollersAxes[3,1];
  parameter Real m.wheel.RollerCenterDirections[3,2] = -m.wheel.VerticalInRollersAxes[3,2];
  parameter Real m.wheel.RollerCenterDirections[3,3] = -m.wheel.VerticalInRollersAxes[3,3];
  parameter Real m.wheel.RollerCenterDirections[4,1] = -m.wheel.VerticalInRollersAxes[4,1];
  parameter Real m.wheel.RollerCenterDirections[4,2] = -m.wheel.VerticalInRollersAxes[4,2];
  parameter Real m.wheel.RollerCenterDirections[4,3] = -m.wheel.VerticalInRollersAxes[4,3];
  parameter Real m.wheel.RollerCenterDirections[5,1] = -m.wheel.VerticalInRollersAxes[5,1];
  parameter Real m.wheel.RollerCenterDirections[5,2] = -m.wheel.VerticalInRollersAxes[5,2];
  parameter Real m.wheel.RollerCenterDirections[5,3] = -m.wheel.VerticalInRollersAxes[5,3];
  parameter Real m.wheel.RollerAxisDirections[1,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {1.0, 0.0, 0.0})[1];
  parameter Real m.wheel.RollerAxisDirections[1,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {1.0, 0.0, 0.0})[2];
  parameter Real m.wheel.RollerAxisDirections[1,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[1,1], m.wheel.RollerQs[1,2], m.wheel.RollerQs[1,3], m.wheel.RollerQs[1,4]}) * {1.0, 0.0, 0.0})[3];
  parameter Real m.wheel.RollerAxisDirections[2,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {1.0, 0.0, 0.0})[1];
  parameter Real m.wheel.RollerAxisDirections[2,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {1.0, 0.0, 0.0})[2];
  parameter Real m.wheel.RollerAxisDirections[2,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[2,1], m.wheel.RollerQs[2,2], m.wheel.RollerQs[2,3], m.wheel.RollerQs[2,4]}) * {1.0, 0.0, 0.0})[3];
  parameter Real m.wheel.RollerAxisDirections[3,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {1.0, 0.0, 0.0})[1];
  parameter Real m.wheel.RollerAxisDirections[3,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {1.0, 0.0, 0.0})[2];
  parameter Real m.wheel.RollerAxisDirections[3,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[3,1], m.wheel.RollerQs[3,2], m.wheel.RollerQs[3,3], m.wheel.RollerQs[3,4]}) * {1.0, 0.0, 0.0})[3];
  parameter Real m.wheel.RollerAxisDirections[4,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {1.0, 0.0, 0.0})[1];
  parameter Real m.wheel.RollerAxisDirections[4,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {1.0, 0.0, 0.0})[2];
  parameter Real m.wheel.RollerAxisDirections[4,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[4,1], m.wheel.RollerQs[4,2], m.wheel.RollerQs[4,3], m.wheel.RollerQs[4,4]}) * {1.0, 0.0, 0.0})[3];
  parameter Real m.wheel.RollerAxisDirections[5,1] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {1.0, 0.0, 0.0})[1];
  parameter Real m.wheel.RollerAxisDirections[5,2] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {1.0, 0.0, 0.0})[2];
  parameter Real m.wheel.RollerAxisDirections[5,3] = (MbsLite.Util.Quaternions.QToT({m.wheel.RollerQs[5,1], m.wheel.RollerQs[5,2], m.wheel.RollerQs[5,3], m.wheel.RollerQs[5,4]}) * {1.0, 0.0, 0.0})[3];
  parameter Real m.wheel.RollerCenters[1,1] = m.wheel.RollerCenterDirections[1,1] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[1,2] = m.wheel.RollerCenterDirections[1,2] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[1,3] = m.wheel.RollerCenterDirections[1,3] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[2,1] = m.wheel.RollerCenterDirections[2,1] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[2,2] = m.wheel.RollerCenterDirections[2,2] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[2,3] = m.wheel.RollerCenterDirections[2,3] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[3,1] = m.wheel.RollerCenterDirections[3,1] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[3,2] = m.wheel.RollerCenterDirections[3,2] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[3,3] = m.wheel.RollerCenterDirections[3,3] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[4,1] = m.wheel.RollerCenterDirections[4,1] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[4,2] = m.wheel.RollerCenterDirections[4,2] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[4,3] = m.wheel.RollerCenterDirections[4,3] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[5,1] = m.wheel.RollerCenterDirections[5,1] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[5,2] = m.wheel.RollerCenterDirections[5,2] * m.wheel.R1;
  parameter Real m.wheel.RollerCenters[5,3] = m.wheel.RollerCenterDirections[5,3] * m.wheel.R1;
  parameter Integer m.wheel.Contacts[1].ConstraintNo = 1;
  Real m.wheel.Contacts[1].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[1].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[1].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[1].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[1].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[1].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[1].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[1].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[1].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[1].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[1].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter String m.wheel.Contacts[1].name = m.wheel.name + \".Contacts[\" + \"1\" + \"]\";
  parameter Integer m.wheel.Contacts[1].n = m.wheel.n \"Number of rollers\";
  parameter Real m.wheel.Contacts[1].R = m.wheel.R \"Omni wheel outer radius (ellipse small axis)\";
  parameter Real m.wheel.Contacts[1].psi = m.wheel.psi \"Angle of roller distortion (fixed axis turn)\";
  parameter Real m.wheel.Contacts[1].alpha = 3.141592653589793 / /*Real*/(m.wheel.Contacts[1].n) \"Max angle of the half-sector\";
  parameter Real m.wheel.Contacts[1].Q = m.wheel.Contacts[1].R / cos(m.wheel.Contacts[1].psi) \"Ellipse large axis\";
  parameter Real m.wheel.Contacts[1].R1 = m.wheel.Contacts[1].R * cos(m.wheel.Contacts[1].alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.Contacts[1].L1 = m.wheel.Contacts[1].R * sin(m.wheel.Contacts[1].alpha) \"Half roller visible (projection) length\";
  parameter Real m.wheel.Contacts[1].L2 = m.wheel.Contacts[1].L1 / cos(m.wheel.Contacts[1].psi) \"Half roller length\";
  parameter Real m.wheel.Contacts[1].nA[1] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[1].nA[2] = 1.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[1].nA[3] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[1].gradAtRollerTip[1] = m.wheel.Contacts[1].L2 / m.wheel.Contacts[1].Q ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[1].gradAtRollerTip[2] = m.wheel.Contacts[1].R1 / m.wheel.Contacts[1].R ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[1].n_at_max[1] = m.wheel.Contacts[1].gradAtRollerTip[1] / sqrt(m.wheel.Contacts[1].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[1].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[1].n_at_max[2] = m.wheel.Contacts[1].gradAtRollerTip[2] / sqrt(m.wheel.Contacts[1].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[1].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[1].i[1] = 1.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[1].i[2] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[1].i[3] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[1].cos_of_max = cos(m.wheel.Contacts[1].alpha);
  Real m.wheel.Contacts[1].rA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].rA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].rA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].rB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].rB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].rB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[1].ni[1] \"Roller axis in global coords\";
  Real m.wheel.Contacts[1].ni[2] \"Roller axis in global coords\";
  Real m.wheel.Contacts[1].ni[3] \"Roller axis in global coords\";
  Real m.wheel.Contacts[1].crs[1] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[1].crs[2] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[1].crs[3] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[1].nk[1] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[1].nk[2] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[1].nk[3] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[1].n1j[1] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[1].n1j[2] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[1].n1j[3] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[1].n1k[1] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[1].n1k[2] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[1].n1k[3] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[1].lambda \"Parameter to be computed\";
  Real m.wheel.Contacts[1].rho[1] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[1].rho[2] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[1].rho[3] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[1].OBPB[1];
  Real m.wheel.Contacts[1].OBPB[2];
  Real m.wheel.Contacts[1].OBPB[3];
  Real m.wheel.Contacts[1].j;
  Real m.wheel.Contacts[1].cosBtwAxisAndVert;
  Real m.wheel.Contacts[1].vA[1];
  Real m.wheel.Contacts[1].vA[2];
  Real m.wheel.Contacts[1].vA[3];
  Real m.wheel.Contacts[1].vB[1];
  Real m.wheel.Contacts[1].vB[2];
  Real m.wheel.Contacts[1].vB[3];
  Real m.wheel.Contacts[1].relv[1];
  Real m.wheel.Contacts[1].relv[2];
  Real m.wheel.Contacts[1].relv[3];
  Real m.wheel.Contacts[1].relvn;
  Real m.wheel.Contacts[1].vAn;
  Real m.wheel.Contacts[1].vBn;
  Real m.wheel.Contacts[1].vAt[1];
  Real m.wheel.Contacts[1].vAt[2];
  Real m.wheel.Contacts[1].vAt[3];
  Real m.wheel.Contacts[1].vBt[1];
  Real m.wheel.Contacts[1].vBt[2];
  Real m.wheel.Contacts[1].vBt[3];
  Real m.wheel.Contacts[1].relvt[1];
  Real m.wheel.Contacts[1].relvt[2];
  Real m.wheel.Contacts[1].relvt[3];
  Real m.wheel.Contacts[1].relvtsqrt;
  parameter Real m.wheel.Contacts[1].delta = 1e-06;
  parameter Real m.wheel.Contacts[1].fric = 0.1;
  Real m.wheel.Contacts[1].mu;
  Real m.wheel.Contacts[1].Forcet[1];
  Real m.wheel.Contacts[1].Forcet[2];
  Real m.wheel.Contacts[1].Forcet[3];
  Real m.wheel.Contacts[1].Drelvn;
  Real m.wheel.Contacts[1].Forcen;
  Real m.wheel.Contacts[1].isInContact;
  parameter Integer m.wheel.Contacts[2].ConstraintNo = 1;
  Real m.wheel.Contacts[2].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[2].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[2].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[2].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[2].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[2].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[2].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[2].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[2].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[2].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[2].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter String m.wheel.Contacts[2].name = m.wheel.name + \".Contacts[\" + \"2\" + \"]\";
  parameter Integer m.wheel.Contacts[2].n = m.wheel.n \"Number of rollers\";
  parameter Real m.wheel.Contacts[2].R = m.wheel.R \"Omni wheel outer radius (ellipse small axis)\";
  parameter Real m.wheel.Contacts[2].psi = m.wheel.psi \"Angle of roller distortion (fixed axis turn)\";
  parameter Real m.wheel.Contacts[2].alpha = 3.141592653589793 / /*Real*/(m.wheel.Contacts[2].n) \"Max angle of the half-sector\";
  parameter Real m.wheel.Contacts[2].Q = m.wheel.Contacts[2].R / cos(m.wheel.Contacts[2].psi) \"Ellipse large axis\";
  parameter Real m.wheel.Contacts[2].R1 = m.wheel.Contacts[2].R * cos(m.wheel.Contacts[2].alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.Contacts[2].L1 = m.wheel.Contacts[2].R * sin(m.wheel.Contacts[2].alpha) \"Half roller visible (projection) length\";
  parameter Real m.wheel.Contacts[2].L2 = m.wheel.Contacts[2].L1 / cos(m.wheel.Contacts[2].psi) \"Half roller length\";
  parameter Real m.wheel.Contacts[2].nA[1] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[2].nA[2] = 1.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[2].nA[3] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[2].gradAtRollerTip[1] = m.wheel.Contacts[2].L2 / m.wheel.Contacts[2].Q ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[2].gradAtRollerTip[2] = m.wheel.Contacts[2].R1 / m.wheel.Contacts[2].R ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[2].n_at_max[1] = m.wheel.Contacts[2].gradAtRollerTip[1] / sqrt(m.wheel.Contacts[2].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[2].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[2].n_at_max[2] = m.wheel.Contacts[2].gradAtRollerTip[2] / sqrt(m.wheel.Contacts[2].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[2].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[2].i[1] = 1.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[2].i[2] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[2].i[3] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[2].cos_of_max = cos(m.wheel.Contacts[2].alpha);
  Real m.wheel.Contacts[2].rA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].rA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].rA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].rB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].rB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].rB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[2].ni[1] \"Roller axis in global coords\";
  Real m.wheel.Contacts[2].ni[2] \"Roller axis in global coords\";
  Real m.wheel.Contacts[2].ni[3] \"Roller axis in global coords\";
  Real m.wheel.Contacts[2].crs[1] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[2].crs[2] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[2].crs[3] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[2].nk[1] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[2].nk[2] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[2].nk[3] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[2].n1j[1] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[2].n1j[2] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[2].n1j[3] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[2].n1k[1] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[2].n1k[2] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[2].n1k[3] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[2].lambda \"Parameter to be computed\";
  Real m.wheel.Contacts[2].rho[1] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[2].rho[2] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[2].rho[3] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[2].OBPB[1];
  Real m.wheel.Contacts[2].OBPB[2];
  Real m.wheel.Contacts[2].OBPB[3];
  Real m.wheel.Contacts[2].j;
  Real m.wheel.Contacts[2].cosBtwAxisAndVert;
  Real m.wheel.Contacts[2].vA[1];
  Real m.wheel.Contacts[2].vA[2];
  Real m.wheel.Contacts[2].vA[3];
  Real m.wheel.Contacts[2].vB[1];
  Real m.wheel.Contacts[2].vB[2];
  Real m.wheel.Contacts[2].vB[3];
  Real m.wheel.Contacts[2].relv[1];
  Real m.wheel.Contacts[2].relv[2];
  Real m.wheel.Contacts[2].relv[3];
  Real m.wheel.Contacts[2].relvn;
  Real m.wheel.Contacts[2].vAn;
  Real m.wheel.Contacts[2].vBn;
  Real m.wheel.Contacts[2].vAt[1];
  Real m.wheel.Contacts[2].vAt[2];
  Real m.wheel.Contacts[2].vAt[3];
  Real m.wheel.Contacts[2].vBt[1];
  Real m.wheel.Contacts[2].vBt[2];
  Real m.wheel.Contacts[2].vBt[3];
  Real m.wheel.Contacts[2].relvt[1];
  Real m.wheel.Contacts[2].relvt[2];
  Real m.wheel.Contacts[2].relvt[3];
  Real m.wheel.Contacts[2].relvtsqrt;
  parameter Real m.wheel.Contacts[2].delta = 1e-06;
  parameter Real m.wheel.Contacts[2].fric = 0.1;
  Real m.wheel.Contacts[2].mu;
  Real m.wheel.Contacts[2].Forcet[1];
  Real m.wheel.Contacts[2].Forcet[2];
  Real m.wheel.Contacts[2].Forcet[3];
  Real m.wheel.Contacts[2].Drelvn;
  Real m.wheel.Contacts[2].Forcen;
  Real m.wheel.Contacts[2].isInContact;
  parameter Integer m.wheel.Contacts[3].ConstraintNo = 1;
  Real m.wheel.Contacts[3].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[3].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[3].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[3].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[3].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[3].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[3].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[3].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[3].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[3].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[3].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter String m.wheel.Contacts[3].name = m.wheel.name + \".Contacts[\" + \"3\" + \"]\";
  parameter Integer m.wheel.Contacts[3].n = m.wheel.n \"Number of rollers\";
  parameter Real m.wheel.Contacts[3].R = m.wheel.R \"Omni wheel outer radius (ellipse small axis)\";
  parameter Real m.wheel.Contacts[3].psi = m.wheel.psi \"Angle of roller distortion (fixed axis turn)\";
  parameter Real m.wheel.Contacts[3].alpha = 3.141592653589793 / /*Real*/(m.wheel.Contacts[3].n) \"Max angle of the half-sector\";
  parameter Real m.wheel.Contacts[3].Q = m.wheel.Contacts[3].R / cos(m.wheel.Contacts[3].psi) \"Ellipse large axis\";
  parameter Real m.wheel.Contacts[3].R1 = m.wheel.Contacts[3].R * cos(m.wheel.Contacts[3].alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.Contacts[3].L1 = m.wheel.Contacts[3].R * sin(m.wheel.Contacts[3].alpha) \"Half roller visible (projection) length\";
  parameter Real m.wheel.Contacts[3].L2 = m.wheel.Contacts[3].L1 / cos(m.wheel.Contacts[3].psi) \"Half roller length\";
  parameter Real m.wheel.Contacts[3].nA[1] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[3].nA[2] = 1.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[3].nA[3] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[3].gradAtRollerTip[1] = m.wheel.Contacts[3].L2 / m.wheel.Contacts[3].Q ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[3].gradAtRollerTip[2] = m.wheel.Contacts[3].R1 / m.wheel.Contacts[3].R ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[3].n_at_max[1] = m.wheel.Contacts[3].gradAtRollerTip[1] / sqrt(m.wheel.Contacts[3].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[3].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[3].n_at_max[2] = m.wheel.Contacts[3].gradAtRollerTip[2] / sqrt(m.wheel.Contacts[3].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[3].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[3].i[1] = 1.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[3].i[2] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[3].i[3] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[3].cos_of_max = cos(m.wheel.Contacts[3].alpha);
  Real m.wheel.Contacts[3].rA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].rA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].rA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].rB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].rB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].rB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[3].ni[1] \"Roller axis in global coords\";
  Real m.wheel.Contacts[3].ni[2] \"Roller axis in global coords\";
  Real m.wheel.Contacts[3].ni[3] \"Roller axis in global coords\";
  Real m.wheel.Contacts[3].crs[1] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[3].crs[2] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[3].crs[3] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[3].nk[1] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[3].nk[2] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[3].nk[3] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[3].n1j[1] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[3].n1j[2] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[3].n1j[3] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[3].n1k[1] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[3].n1k[2] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[3].n1k[3] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[3].lambda \"Parameter to be computed\";
  Real m.wheel.Contacts[3].rho[1] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[3].rho[2] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[3].rho[3] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[3].OBPB[1];
  Real m.wheel.Contacts[3].OBPB[2];
  Real m.wheel.Contacts[3].OBPB[3];
  Real m.wheel.Contacts[3].j;
  Real m.wheel.Contacts[3].cosBtwAxisAndVert;
  Real m.wheel.Contacts[3].vA[1];
  Real m.wheel.Contacts[3].vA[2];
  Real m.wheel.Contacts[3].vA[3];
  Real m.wheel.Contacts[3].vB[1];
  Real m.wheel.Contacts[3].vB[2];
  Real m.wheel.Contacts[3].vB[3];
  Real m.wheel.Contacts[3].relv[1];
  Real m.wheel.Contacts[3].relv[2];
  Real m.wheel.Contacts[3].relv[3];
  Real m.wheel.Contacts[3].relvn;
  Real m.wheel.Contacts[3].vAn;
  Real m.wheel.Contacts[3].vBn;
  Real m.wheel.Contacts[3].vAt[1];
  Real m.wheel.Contacts[3].vAt[2];
  Real m.wheel.Contacts[3].vAt[3];
  Real m.wheel.Contacts[3].vBt[1];
  Real m.wheel.Contacts[3].vBt[2];
  Real m.wheel.Contacts[3].vBt[3];
  Real m.wheel.Contacts[3].relvt[1];
  Real m.wheel.Contacts[3].relvt[2];
  Real m.wheel.Contacts[3].relvt[3];
  Real m.wheel.Contacts[3].relvtsqrt;
  parameter Real m.wheel.Contacts[3].delta = 1e-06;
  parameter Real m.wheel.Contacts[3].fric = 0.1;
  Real m.wheel.Contacts[3].mu;
  Real m.wheel.Contacts[3].Forcet[1];
  Real m.wheel.Contacts[3].Forcet[2];
  Real m.wheel.Contacts[3].Forcet[3];
  Real m.wheel.Contacts[3].Drelvn;
  Real m.wheel.Contacts[3].Forcen;
  Real m.wheel.Contacts[3].isInContact;
  parameter Integer m.wheel.Contacts[4].ConstraintNo = 1;
  Real m.wheel.Contacts[4].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[4].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[4].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[4].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[4].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[4].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[4].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[4].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[4].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[4].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[4].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter String m.wheel.Contacts[4].name = m.wheel.name + \".Contacts[\" + \"4\" + \"]\";
  parameter Integer m.wheel.Contacts[4].n = m.wheel.n \"Number of rollers\";
  parameter Real m.wheel.Contacts[4].R = m.wheel.R \"Omni wheel outer radius (ellipse small axis)\";
  parameter Real m.wheel.Contacts[4].psi = m.wheel.psi \"Angle of roller distortion (fixed axis turn)\";
  parameter Real m.wheel.Contacts[4].alpha = 3.141592653589793 / /*Real*/(m.wheel.Contacts[4].n) \"Max angle of the half-sector\";
  parameter Real m.wheel.Contacts[4].Q = m.wheel.Contacts[4].R / cos(m.wheel.Contacts[4].psi) \"Ellipse large axis\";
  parameter Real m.wheel.Contacts[4].R1 = m.wheel.Contacts[4].R * cos(m.wheel.Contacts[4].alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.Contacts[4].L1 = m.wheel.Contacts[4].R * sin(m.wheel.Contacts[4].alpha) \"Half roller visible (projection) length\";
  parameter Real m.wheel.Contacts[4].L2 = m.wheel.Contacts[4].L1 / cos(m.wheel.Contacts[4].psi) \"Half roller length\";
  parameter Real m.wheel.Contacts[4].nA[1] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[4].nA[2] = 1.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[4].nA[3] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[4].gradAtRollerTip[1] = m.wheel.Contacts[4].L2 / m.wheel.Contacts[4].Q ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[4].gradAtRollerTip[2] = m.wheel.Contacts[4].R1 / m.wheel.Contacts[4].R ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[4].n_at_max[1] = m.wheel.Contacts[4].gradAtRollerTip[1] / sqrt(m.wheel.Contacts[4].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[4].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[4].n_at_max[2] = m.wheel.Contacts[4].gradAtRollerTip[2] / sqrt(m.wheel.Contacts[4].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[4].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[4].i[1] = 1.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[4].i[2] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[4].i[3] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[4].cos_of_max = cos(m.wheel.Contacts[4].alpha);
  Real m.wheel.Contacts[4].rA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].rA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].rA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].rB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].rB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].rB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[4].ni[1] \"Roller axis in global coords\";
  Real m.wheel.Contacts[4].ni[2] \"Roller axis in global coords\";
  Real m.wheel.Contacts[4].ni[3] \"Roller axis in global coords\";
  Real m.wheel.Contacts[4].crs[1] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[4].crs[2] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[4].crs[3] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[4].nk[1] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[4].nk[2] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[4].nk[3] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[4].n1j[1] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[4].n1j[2] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[4].n1j[3] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[4].n1k[1] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[4].n1k[2] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[4].n1k[3] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[4].lambda \"Parameter to be computed\";
  Real m.wheel.Contacts[4].rho[1] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[4].rho[2] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[4].rho[3] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[4].OBPB[1];
  Real m.wheel.Contacts[4].OBPB[2];
  Real m.wheel.Contacts[4].OBPB[3];
  Real m.wheel.Contacts[4].j;
  Real m.wheel.Contacts[4].cosBtwAxisAndVert;
  Real m.wheel.Contacts[4].vA[1];
  Real m.wheel.Contacts[4].vA[2];
  Real m.wheel.Contacts[4].vA[3];
  Real m.wheel.Contacts[4].vB[1];
  Real m.wheel.Contacts[4].vB[2];
  Real m.wheel.Contacts[4].vB[3];
  Real m.wheel.Contacts[4].relv[1];
  Real m.wheel.Contacts[4].relv[2];
  Real m.wheel.Contacts[4].relv[3];
  Real m.wheel.Contacts[4].relvn;
  Real m.wheel.Contacts[4].vAn;
  Real m.wheel.Contacts[4].vBn;
  Real m.wheel.Contacts[4].vAt[1];
  Real m.wheel.Contacts[4].vAt[2];
  Real m.wheel.Contacts[4].vAt[3];
  Real m.wheel.Contacts[4].vBt[1];
  Real m.wheel.Contacts[4].vBt[2];
  Real m.wheel.Contacts[4].vBt[3];
  Real m.wheel.Contacts[4].relvt[1];
  Real m.wheel.Contacts[4].relvt[2];
  Real m.wheel.Contacts[4].relvt[3];
  Real m.wheel.Contacts[4].relvtsqrt;
  parameter Real m.wheel.Contacts[4].delta = 1e-06;
  parameter Real m.wheel.Contacts[4].fric = 0.1;
  Real m.wheel.Contacts[4].mu;
  Real m.wheel.Contacts[4].Forcet[1];
  Real m.wheel.Contacts[4].Forcet[2];
  Real m.wheel.Contacts[4].Forcet[3];
  Real m.wheel.Contacts[4].Drelvn;
  Real m.wheel.Contacts[4].Forcen;
  Real m.wheel.Contacts[4].isInContact;
  parameter Integer m.wheel.Contacts[5].ConstraintNo = 1;
  Real m.wheel.Contacts[5].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[5].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[5].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[5].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Contacts[5].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Contacts[5].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Contacts[5].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Contacts[5].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Contacts[5].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[5].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Contacts[5].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter String m.wheel.Contacts[5].name = m.wheel.name + \".Contacts[\" + \"5\" + \"]\";
  parameter Integer m.wheel.Contacts[5].n = m.wheel.n \"Number of rollers\";
  parameter Real m.wheel.Contacts[5].R = m.wheel.R \"Omni wheel outer radius (ellipse small axis)\";
  parameter Real m.wheel.Contacts[5].psi = m.wheel.psi \"Angle of roller distortion (fixed axis turn)\";
  parameter Real m.wheel.Contacts[5].alpha = 3.141592653589793 / /*Real*/(m.wheel.Contacts[5].n) \"Max angle of the half-sector\";
  parameter Real m.wheel.Contacts[5].Q = m.wheel.Contacts[5].R / cos(m.wheel.Contacts[5].psi) \"Ellipse large axis\";
  parameter Real m.wheel.Contacts[5].R1 = m.wheel.Contacts[5].R * cos(m.wheel.Contacts[5].alpha) \"Omni wheel inner radius\";
  parameter Real m.wheel.Contacts[5].L1 = m.wheel.Contacts[5].R * sin(m.wheel.Contacts[5].alpha) \"Half roller visible (projection) length\";
  parameter Real m.wheel.Contacts[5].L2 = m.wheel.Contacts[5].L1 / cos(m.wheel.Contacts[5].psi) \"Half roller length\";
  parameter Real m.wheel.Contacts[5].nA[1] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[5].nA[2] = 1.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[5].nA[3] = 0.0 \"Roller over horizontal surface: vertical unit vector (in global coordinates)\";
  parameter Real m.wheel.Contacts[5].gradAtRollerTip[1] = m.wheel.Contacts[5].L2 / m.wheel.Contacts[5].Q ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[5].gradAtRollerTip[2] = m.wheel.Contacts[5].R1 / m.wheel.Contacts[5].R ^ 2.0 * 2.0;
  parameter Real m.wheel.Contacts[5].n_at_max[1] = m.wheel.Contacts[5].gradAtRollerTip[1] / sqrt(m.wheel.Contacts[5].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[5].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[5].n_at_max[2] = m.wheel.Contacts[5].gradAtRollerTip[2] / sqrt(m.wheel.Contacts[5].gradAtRollerTip[1] ^ 2.0 + m.wheel.Contacts[5].gradAtRollerTip[2] ^ 2.0) \"Normal to ellipse in local coord (it is in vert plane)\";
  parameter Real m.wheel.Contacts[5].i[1] = 1.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[5].i[2] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[5].i[3] = 0.0 \"Roller axis of symmetry unit vector\";
  parameter Real m.wheel.Contacts[5].cos_of_max = cos(m.wheel.Contacts[5].alpha);
  Real m.wheel.Contacts[5].rA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].rA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].rA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].rB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].rB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].rB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Contacts[5].ni[1] \"Roller axis in global coords\";
  Real m.wheel.Contacts[5].ni[2] \"Roller axis in global coords\";
  Real m.wheel.Contacts[5].ni[3] \"Roller axis in global coords\";
  Real m.wheel.Contacts[5].crs[1] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[5].crs[2] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[5].crs[3] \"horizontal ni cross vertical\";
  Real m.wheel.Contacts[5].nk[1] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[5].nk[2] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[5].nk[3] \"Horizontal (along crs)\";
  Real m.wheel.Contacts[5].n1j[1] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[5].n1j[2] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[5].n1j[3] \"In vertical direction (= nA)\";
  Real m.wheel.Contacts[5].n1k[1] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[5].n1k[2] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[5].n1k[3] \"Horizontal wheel axis, delivered from above\";
  Real m.wheel.Contacts[5].lambda \"Parameter to be computed\";
  Real m.wheel.Contacts[5].rho[1] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[5].rho[2] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[5].rho[3] \"Unit vector between mass centers\";
  Real m.wheel.Contacts[5].OBPB[1];
  Real m.wheel.Contacts[5].OBPB[2];
  Real m.wheel.Contacts[5].OBPB[3];
  Real m.wheel.Contacts[5].j;
  Real m.wheel.Contacts[5].cosBtwAxisAndVert;
  Real m.wheel.Contacts[5].vA[1];
  Real m.wheel.Contacts[5].vA[2];
  Real m.wheel.Contacts[5].vA[3];
  Real m.wheel.Contacts[5].vB[1];
  Real m.wheel.Contacts[5].vB[2];
  Real m.wheel.Contacts[5].vB[3];
  Real m.wheel.Contacts[5].relv[1];
  Real m.wheel.Contacts[5].relv[2];
  Real m.wheel.Contacts[5].relv[3];
  Real m.wheel.Contacts[5].relvn;
  Real m.wheel.Contacts[5].vAn;
  Real m.wheel.Contacts[5].vBn;
  Real m.wheel.Contacts[5].vAt[1];
  Real m.wheel.Contacts[5].vAt[2];
  Real m.wheel.Contacts[5].vAt[3];
  Real m.wheel.Contacts[5].vBt[1];
  Real m.wheel.Contacts[5].vBt[2];
  Real m.wheel.Contacts[5].vBt[3];
  Real m.wheel.Contacts[5].relvt[1];
  Real m.wheel.Contacts[5].relvt[2];
  Real m.wheel.Contacts[5].relvt[3];
  Real m.wheel.Contacts[5].relvtsqrt;
  parameter Real m.wheel.Contacts[5].delta = 1e-06;
  parameter Real m.wheel.Contacts[5].fric = 0.1;
  Real m.wheel.Contacts[5].mu;
  Real m.wheel.Contacts[5].Forcet[1];
  Real m.wheel.Contacts[5].Forcet[2];
  Real m.wheel.Contacts[5].Forcet[3];
  Real m.wheel.Contacts[5].Drelvn;
  Real m.wheel.Contacts[5].Forcen;
  Real m.wheel.Contacts[5].isInContact;
  Real m.wheel.Rollers[1].OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[1].OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[1].OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[1].OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[1].OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[1].OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[1].OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Rollers[1].name = m.wheel.name + \".Rollers[\" + \"1\" + \"]\";
  parameter Real m.wheel.Rollers[1].m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.rollerMass \"Mass of the body\";
  parameter Real m.wheel.Rollers[1].I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 5.699141943371693e-07 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[1].I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  Real m.wheel.Rollers[1].r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[1,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[1].r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2] + m.wheel.T0[2,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[1,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[1].r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[1,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[1].v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1] + m.wheel.T0[1,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[1,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[1,2]) + m.wheel.T0[1,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[1,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[1,3]) + m.wheel.T0[1,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[1,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[1,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2] + m.wheel.T0[2,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[1,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[1,2]) + m.wheel.T0[2,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[1,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[1,3]) + m.wheel.T0[2,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[1,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[1,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3] + m.wheel.T0[3,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[1,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[1,2]) + m.wheel.T0[3,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[1,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[1,3]) + m.wheel.T0[3,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[1,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[1,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[1].a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[1].q[1](start = m.wheel.RollerQs[1,1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[1].q[2](start = m.wheel.RollerQs[1,2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[1].q[3](start = m.wheel.RollerQs[1,3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[1].q[4](start = m.wheel.RollerQs[1,4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[1].omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[1,1] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[1].omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[1,2] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[1].omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[1,3] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[1].epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[1].epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[1].epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[1].F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[1].F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[1].F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[1].M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[1].M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[1].M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[1].T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[1].Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Rollers[1].N = 2;
  parameter Real m.wheel.Rollers[1].Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Rollers[1].Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Rollers[1].Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Rollers[1].InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[1].InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[1].InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[1].InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[1].InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[1].InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[1].InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[1].InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Rollers[1].crosses[1,1];
  protected Real m.wheel.Rollers[1].crosses[1,2];
  protected Real m.wheel.Rollers[1].crosses[1,3];
  protected Real m.wheel.Rollers[1].crosses[2,1];
  protected Real m.wheel.Rollers[1].crosses[2,2];
  protected Real m.wheel.Rollers[1].crosses[2,3];
  Real m.wheel.Rollers[2].OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[2].OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[2].OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[2].OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[2].OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[2].OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[2].OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Rollers[2].name = m.wheel.name + \".Rollers[\" + \"2\" + \"]\";
  parameter Real m.wheel.Rollers[2].m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.rollerMass \"Mass of the body\";
  parameter Real m.wheel.Rollers[2].I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 5.699141943371693e-07 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[2].I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  Real m.wheel.Rollers[2].r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[2,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[2].r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2] + m.wheel.T0[2,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[2,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[2].r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[2,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[2].v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1] + m.wheel.T0[1,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[2,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[2,2]) + m.wheel.T0[1,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[2,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[2,3]) + m.wheel.T0[1,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[2,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[2,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2] + m.wheel.T0[2,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[2,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[2,2]) + m.wheel.T0[2,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[2,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[2,3]) + m.wheel.T0[2,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[2,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[2,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3] + m.wheel.T0[3,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[2,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[2,2]) + m.wheel.T0[3,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[2,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[2,3]) + m.wheel.T0[3,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[2,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[2,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[2].a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[2].q[1](start = m.wheel.RollerQs[2,1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[2].q[2](start = m.wheel.RollerQs[2,2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[2].q[3](start = m.wheel.RollerQs[2,3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[2].q[4](start = m.wheel.RollerQs[2,4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[2].omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[2,1] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[2].omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[2,2] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[2].omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[2,3] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[2].epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[2].epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[2].epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[2].F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[2].F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[2].F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[2].M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[2].M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[2].M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[2].T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[2].Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Rollers[2].N = 2;
  parameter Real m.wheel.Rollers[2].Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Rollers[2].Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Rollers[2].Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Rollers[2].InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[2].InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[2].InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[2].InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[2].InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[2].InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[2].InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[2].InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Rollers[2].crosses[1,1];
  protected Real m.wheel.Rollers[2].crosses[1,2];
  protected Real m.wheel.Rollers[2].crosses[1,3];
  protected Real m.wheel.Rollers[2].crosses[2,1];
  protected Real m.wheel.Rollers[2].crosses[2,2];
  protected Real m.wheel.Rollers[2].crosses[2,3];
  Real m.wheel.Rollers[3].OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[3].OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[3].OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[3].OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[3].OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[3].OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[3].OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Rollers[3].name = m.wheel.name + \".Rollers[\" + \"3\" + \"]\";
  parameter Real m.wheel.Rollers[3].m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.rollerMass \"Mass of the body\";
  parameter Real m.wheel.Rollers[3].I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 5.699141943371693e-07 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[3].I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  Real m.wheel.Rollers[3].r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[3,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[3].r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2] + m.wheel.T0[2,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[3,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[3].r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[3,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[3].v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1] + m.wheel.T0[1,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[3,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[3,2]) + m.wheel.T0[1,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[3,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[3,3]) + m.wheel.T0[1,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[3,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[3,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2] + m.wheel.T0[2,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[3,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[3,2]) + m.wheel.T0[2,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[3,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[3,3]) + m.wheel.T0[2,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[3,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[3,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3] + m.wheel.T0[3,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[3,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[3,2]) + m.wheel.T0[3,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[3,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[3,3]) + m.wheel.T0[3,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[3,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[3,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[3].a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[3].q[1](start = m.wheel.RollerQs[3,1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[3].q[2](start = m.wheel.RollerQs[3,2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[3].q[3](start = m.wheel.RollerQs[3,3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[3].q[4](start = m.wheel.RollerQs[3,4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[3].omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[3,1] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[3].omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[3,2] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[3].omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[3,3] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[3].epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[3].epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[3].epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[3].F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[3].F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[3].F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[3].M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[3].M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[3].M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[3].T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[3].Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Rollers[3].N = 2;
  parameter Real m.wheel.Rollers[3].Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Rollers[3].Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Rollers[3].Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Rollers[3].InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[3].InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[3].InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[3].InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[3].InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[3].InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[3].InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[3].InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Rollers[3].crosses[1,1];
  protected Real m.wheel.Rollers[3].crosses[1,2];
  protected Real m.wheel.Rollers[3].crosses[1,3];
  protected Real m.wheel.Rollers[3].crosses[2,1];
  protected Real m.wheel.Rollers[3].crosses[2,2];
  protected Real m.wheel.Rollers[3].crosses[2,3];
  Real m.wheel.Rollers[4].OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[4].OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[4].OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[4].OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[4].OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[4].OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[4].OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Rollers[4].name = m.wheel.name + \".Rollers[\" + \"4\" + \"]\";
  parameter Real m.wheel.Rollers[4].m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.rollerMass \"Mass of the body\";
  parameter Real m.wheel.Rollers[4].I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 5.699141943371693e-07 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[4].I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  Real m.wheel.Rollers[4].r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[4,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[4].r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2] + m.wheel.T0[2,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[4,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[4].r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[4,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[4].v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1] + m.wheel.T0[1,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[4,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[4,2]) + m.wheel.T0[1,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[4,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[4,3]) + m.wheel.T0[1,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[4,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[4,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2] + m.wheel.T0[2,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[4,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[4,2]) + m.wheel.T0[2,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[4,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[4,3]) + m.wheel.T0[2,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[4,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[4,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3] + m.wheel.T0[3,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[4,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[4,2]) + m.wheel.T0[3,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[4,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[4,3]) + m.wheel.T0[3,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[4,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[4,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[4].a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[4].q[1](start = m.wheel.RollerQs[4,1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[4].q[2](start = m.wheel.RollerQs[4,2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[4].q[3](start = m.wheel.RollerQs[4,3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[4].q[4](start = m.wheel.RollerQs[4,4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[4].omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[4,1] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[4].omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[4,2] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[4].omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[4,3] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[4].epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[4].epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[4].epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[4].F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[4].F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[4].F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[4].M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[4].M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[4].M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[4].T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[4].Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Rollers[4].N = 2;
  parameter Real m.wheel.Rollers[4].Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Rollers[4].Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Rollers[4].Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Rollers[4].InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[4].InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[4].InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[4].InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[4].InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[4].InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[4].InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[4].InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Rollers[4].crosses[1,1];
  protected Real m.wheel.Rollers[4].crosses[1,2];
  protected Real m.wheel.Rollers[4].crosses[1,3];
  protected Real m.wheel.Rollers[4].crosses[2,1];
  protected Real m.wheel.Rollers[4].crosses[2,2];
  protected Real m.wheel.Rollers[4].crosses[2,3];
  Real m.wheel.Rollers[5].OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Rollers[5].OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[5].OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[5].OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Rollers[5].OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[5].OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[5].OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Rollers[5].name = m.wheel.name + \".Rollers[\" + \"5\" + \"]\";
  parameter Real m.wheel.Rollers[5].m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.rollerMass \"Mass of the body\";
  parameter Real m.wheel.Rollers[5].I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 5.699141943371693e-07 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Rollers[5].I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 1.468043638102385e-05 \"Central tensor of inertia of the body\";
  Real m.wheel.Rollers[5].r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[5,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[5].r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2] + m.wheel.T0[2,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[5,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[5].r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[5,3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Rollers[5].v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1] + m.wheel.T0[1,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[5,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[5,2]) + m.wheel.T0[1,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[5,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[5,3]) + m.wheel.T0[1,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[5,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[5,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2] + m.wheel.T0[2,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[5,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[5,2]) + m.wheel.T0[2,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[5,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[5,3]) + m.wheel.T0[2,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[5,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[5,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3] + m.wheel.T0[3,1] * (m.wheel.omega0[2] * m.wheel.RollerCenters[5,3] - m.wheel.omega0[3] * m.wheel.RollerCenters[5,2]) + m.wheel.T0[3,2] * (m.wheel.omega0[3] * m.wheel.RollerCenters[5,1] - m.wheel.omega0[1] * m.wheel.RollerCenters[5,3]) + m.wheel.T0[3,3] * (m.wheel.omega0[1] * m.wheel.RollerCenters[5,2] - m.wheel.omega0[2] * m.wheel.RollerCenters[5,1])) \"Velocity vector of masscenter\";
  Real m.wheel.Rollers[5].a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Rollers[5].q[1](start = m.wheel.RollerQs[5,1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[5].q[2](start = m.wheel.RollerQs[5,2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[5].q[3](start = m.wheel.RollerQs[5,3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[5].q[4](start = m.wheel.RollerQs[5,4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Rollers[5].omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[5,1] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[5].omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.VerticalInRollersAxes[5,2] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[5].omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[5,3] * m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Rollers[5].epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[5].epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[5].epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Rollers[5].F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[5].F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[5].F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Rollers[5].M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[5].M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[5].M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Rollers[5].T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Rollers[5].Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Rollers[5].N = 2;
  parameter Real m.wheel.Rollers[5].Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Rollers[5].Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Rollers[5].Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Rollers[5].InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[5].InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[5].InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[5].InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Rollers[5].InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Rollers[5].InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[5].InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Rollers[5].InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Rollers[5].crosses[1,1];
  protected Real m.wheel.Rollers[5].crosses[1,2];
  protected Real m.wheel.Rollers[5].crosses[1,3];
  protected Real m.wheel.Rollers[5].crosses[2,1];
  protected Real m.wheel.Rollers[5].crosses[2,2];
  protected Real m.wheel.Rollers[5].crosses[2,3];
  parameter Integer m.wheel.Joints[1].ConstraintNo = 1;
  Real m.wheel.Joints[1].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[1].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[1].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[1].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[1].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[1].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[1].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[1].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[1].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[1].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[1].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter Real m.wheel.Joints[1].nA[1] = 1.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[1].nA[2] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[1].nA[3] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[1].nB[1] = m.wheel.RollerAxisDirections[1,1] \"Axis in body B local\";
  parameter Real m.wheel.Joints[1].nB[2] = m.wheel.RollerAxisDirections[1,2] \"Axis in body B local\";
  parameter Real m.wheel.Joints[1].nB[3] = m.wheel.RollerAxisDirections[1,3] \"Axis in body B local\";
  parameter Real m.wheel.Joints[1].rA[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[1].rA[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[1].rA[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[1].rB[1](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[1,1] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[1].rB[2](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[1,2] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[1].rB[3](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[1,3] \"Axis position in body B local\";
  Real m.wheel.Joints[1].RA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].RA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].RA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].RB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].RB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].RB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[1].vA[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].vA[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].vA[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].vB[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].vB[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].vB[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[1].lambda(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration along the axis\";
  Real m.wheel.Joints[1].mu(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity along the axis\";
  Real m.wheel.Joints[1].angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angle. Beware numeric error accumulation!\";
  Real m.wheel.Joints[1].omegar[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[1].omegar[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[1].omegar[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[1].epsilonr[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[1].epsilonr[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[1].epsilonr[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[1].nAi[1] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[1].nAi[2] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[1].nAi[3] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[1].M(quantity = \"Torque\", unit = \"N.m\") \"Torque about joint axis\";
  parameter Integer m.wheel.Joints[2].ConstraintNo = 1;
  Real m.wheel.Joints[2].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[2].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[2].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[2].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[2].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[2].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[2].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[2].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[2].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[2].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[2].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter Real m.wheel.Joints[2].nA[1] = 1.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[2].nA[2] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[2].nA[3] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[2].nB[1] = m.wheel.RollerAxisDirections[2,1] \"Axis in body B local\";
  parameter Real m.wheel.Joints[2].nB[2] = m.wheel.RollerAxisDirections[2,2] \"Axis in body B local\";
  parameter Real m.wheel.Joints[2].nB[3] = m.wheel.RollerAxisDirections[2,3] \"Axis in body B local\";
  parameter Real m.wheel.Joints[2].rA[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[2].rA[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[2].rA[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[2].rB[1](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[2,1] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[2].rB[2](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[2,2] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[2].rB[3](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[2,3] \"Axis position in body B local\";
  Real m.wheel.Joints[2].RA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].RA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].RA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].RB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].RB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].RB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[2].vA[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].vA[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].vA[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].vB[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].vB[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].vB[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[2].lambda(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration along the axis\";
  Real m.wheel.Joints[2].mu(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity along the axis\";
  Real m.wheel.Joints[2].angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angle. Beware numeric error accumulation!\";
  Real m.wheel.Joints[2].omegar[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[2].omegar[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[2].omegar[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[2].epsilonr[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[2].epsilonr[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[2].epsilonr[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[2].nAi[1] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[2].nAi[2] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[2].nAi[3] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[2].M(quantity = \"Torque\", unit = \"N.m\") \"Torque about joint axis\";
  parameter Integer m.wheel.Joints[3].ConstraintNo = 1;
  Real m.wheel.Joints[3].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[3].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[3].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[3].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[3].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[3].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[3].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[3].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[3].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[3].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[3].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter Real m.wheel.Joints[3].nA[1] = 1.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[3].nA[2] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[3].nA[3] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[3].nB[1] = m.wheel.RollerAxisDirections[3,1] \"Axis in body B local\";
  parameter Real m.wheel.Joints[3].nB[2] = m.wheel.RollerAxisDirections[3,2] \"Axis in body B local\";
  parameter Real m.wheel.Joints[3].nB[3] = m.wheel.RollerAxisDirections[3,3] \"Axis in body B local\";
  parameter Real m.wheel.Joints[3].rA[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[3].rA[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[3].rA[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[3].rB[1](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[3,1] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[3].rB[2](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[3,2] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[3].rB[3](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[3,3] \"Axis position in body B local\";
  Real m.wheel.Joints[3].RA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].RA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].RA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].RB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].RB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].RB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[3].vA[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].vA[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].vA[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].vB[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].vB[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].vB[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[3].lambda(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration along the axis\";
  Real m.wheel.Joints[3].mu(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity along the axis\";
  Real m.wheel.Joints[3].angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angle. Beware numeric error accumulation!\";
  Real m.wheel.Joints[3].omegar[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[3].omegar[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[3].omegar[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[3].epsilonr[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[3].epsilonr[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[3].epsilonr[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[3].nAi[1] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[3].nAi[2] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[3].nAi[3] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[3].M(quantity = \"Torque\", unit = \"N.m\") \"Torque about joint axis\";
  parameter Integer m.wheel.Joints[4].ConstraintNo = 1;
  Real m.wheel.Joints[4].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[4].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[4].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[4].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[4].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[4].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[4].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[4].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[4].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[4].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[4].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter Real m.wheel.Joints[4].nA[1] = 1.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[4].nA[2] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[4].nA[3] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[4].nB[1] = m.wheel.RollerAxisDirections[4,1] \"Axis in body B local\";
  parameter Real m.wheel.Joints[4].nB[2] = m.wheel.RollerAxisDirections[4,2] \"Axis in body B local\";
  parameter Real m.wheel.Joints[4].nB[3] = m.wheel.RollerAxisDirections[4,3] \"Axis in body B local\";
  parameter Real m.wheel.Joints[4].rA[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[4].rA[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[4].rA[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[4].rB[1](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[4,1] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[4].rB[2](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[4,2] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[4].rB[3](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[4,3] \"Axis position in body B local\";
  Real m.wheel.Joints[4].RA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].RA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].RA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].RB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].RB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].RB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[4].vA[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].vA[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].vA[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].vB[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].vB[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].vB[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[4].lambda(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration along the axis\";
  Real m.wheel.Joints[4].mu(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity along the axis\";
  Real m.wheel.Joints[4].angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angle. Beware numeric error accumulation!\";
  Real m.wheel.Joints[4].omegar[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[4].omegar[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[4].omegar[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[4].epsilonr[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[4].epsilonr[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[4].epsilonr[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[4].nAi[1] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[4].nAi[2] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[4].nAi[3] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[4].M(quantity = \"Torque\", unit = \"N.m\") \"Torque about joint axis\";
  parameter Integer m.wheel.Joints[5].ConstraintNo = 1;
  Real m.wheel.Joints[5].InPortA.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortA.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortA.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortA.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortA.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortA.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].InPortA.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].InPortA.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].OutPortA.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortA.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortA.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortA.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortA.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortA.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortA.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[5].OutPortA.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[5].OutPortA.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[5].InPortB.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Joints[5].InPortB.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Joints[5].InPortB.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortB.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortB.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Joints[5].InPortB.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].InPortB.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].InPortB.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Joints[5].OutPortB.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortB.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortB.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].OutPortB.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortB.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortB.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Joints[5].OutPortB.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[5].OutPortB.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Joints[5].OutPortB.M[3](quantity = \"Torque\", unit = \"N.m\");
  parameter Real m.wheel.Joints[5].nA[1] = 1.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[5].nA[2] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[5].nA[3] = 0.0 \"Axis in body A local\";
  parameter Real m.wheel.Joints[5].nB[1] = m.wheel.RollerAxisDirections[5,1] \"Axis in body B local\";
  parameter Real m.wheel.Joints[5].nB[2] = m.wheel.RollerAxisDirections[5,2] \"Axis in body B local\";
  parameter Real m.wheel.Joints[5].nB[3] = m.wheel.RollerAxisDirections[5,3] \"Axis in body B local\";
  parameter Real m.wheel.Joints[5].rA[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[5].rA[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[5].rA[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Axis position in body A local\";
  parameter Real m.wheel.Joints[5].rB[1](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[5,1] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[5].rB[2](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[5,2] \"Axis position in body B local\";
  parameter Real m.wheel.Joints[5].rB[3](quantity = \"Length\", unit = \"m\") = m.wheel.RollerCenters[5,3] \"Axis position in body B local\";
  Real m.wheel.Joints[5].RA[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].RA[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].RA[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].RB[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].RB[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].RB[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Joints[5].vA[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].vA[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].vA[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].vB[1](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].vB[2](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].vB[3](quantity = \"Velocity\", unit = \"m/s\");
  Real m.wheel.Joints[5].lambda(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration along the axis\";
  Real m.wheel.Joints[5].mu(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity along the axis\";
  Real m.wheel.Joints[5].angle(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angle. Beware numeric error accumulation!\";
  Real m.wheel.Joints[5].omegar[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[5].omegar[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[5].omegar[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular velocity\";
  Real m.wheel.Joints[5].epsilonr[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[5].epsilonr[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[5].epsilonr[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Relative angular acceleration\";
  Real m.wheel.Joints[5].nAi[1] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[5].nAi[2] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[5].nAi[3] \"Unit vector of joint axis w. r. t. inertial frame\";
  Real m.wheel.Joints[5].M(quantity = \"Torque\", unit = \"N.m\") \"Torque about joint axis\";
  Real m.wheel.Wheel.OutPort.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Wheel.OutPort.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Wheel.OutPort.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.Wheel.OutPort.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.OutPort.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.OutPort.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.OutPort.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.OutPort.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.OutPort.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.OutPort.T[1,1] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[1,2] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[1,3] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[2,1] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[2,2] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[2,3] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[3,1] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[3,2] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.T[3,3] \"Matrix of rotation\";
  Real m.wheel.Wheel.OutPort.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Wheel.OutPort.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Wheel.OutPort.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.Wheel.OutPort.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Wheel.OutPort.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Wheel.OutPort.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  parameter String m.wheel.Wheel.name = \"wheel hub\";
  parameter Real m.wheel.Wheel.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 9.999999999999999e+59) = m.wheel.wheelHubMass \"Mass of the body\";
  parameter Real m.wheel.Wheel.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 6.261017161132568e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 6.261017161132568e-05 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0 \"Central tensor of inertia of the body\";
  parameter Real m.wheel.Wheel.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\", start = 9.999999999999999e+59) = 0.0001227203432226514 \"Central tensor of inertia of the body\";
  Real m.wheel.Wheel.r[1](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[1]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Wheel.r[2](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[2]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Wheel.r[3](quantity = \"Length\", unit = \"m\", start = m.wheel.r0[3]) \"Radius vector of masscenter in global coords\";
  Real m.wheel.Wheel.v[1](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[1]) \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.v[2](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[2]) \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.v[3](quantity = \"Velocity\", unit = \"m/s\", start = m.wheel.v0[3]) \"Velocity vector of masscenter\";
  Real m.wheel.Wheel.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.Wheel.q[1](start = m.wheel.q0[1]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Wheel.q[2](start = m.wheel.q0[2]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Wheel.q[3](start = m.wheel.q0[3]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Wheel.q[4](start = m.wheel.q0[4]) \"Quaternion of body orientation.
     QToT(q) * local = global.
     QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6\";
  Real m.wheel.Wheel.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[1]) \"Vector of angular rate in local coords\";
  Real m.wheel.Wheel.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[2]) \"Vector of angular rate in local coords\";
  Real m.wheel.Wheel.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = m.wheel.omega0[3]) \"Vector of angular rate in local coords\";
  Real m.wheel.Wheel.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Wheel.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Wheel.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.Wheel.F[1](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Wheel.F[2](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Wheel.F[3](quantity = \"Force\", unit = \"N\", start = 9.999999999999999e+59) \"Sum of all forces applied\";
  Real m.wheel.Wheel.M[1](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Wheel.M[2](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Wheel.M[3](quantity = \"Torque\", unit = \"N.m\", start = 9.999999999999999e+59) \"Sum of all torques applied\";
  Real m.wheel.Wheel.T[1,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[1,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[1,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[2,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[2,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[2,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[3,1] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[3,2] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.T[3,3] \"Matrix of rotation. T * local = global, cols = coords of local base in global\";
  Real m.wheel.Wheel.Active(start = 1.0) \"Flag of active dynamics\";
  parameter Integer m.wheel.Wheel.N = 1 + m.wheel.nOne;
  parameter Real m.wheel.Wheel.Gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[1];
  parameter Real m.wheel.Wheel.Gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[2];
  parameter Real m.wheel.Wheel.Gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") = m.wheel.Gravity[3];
  Real m.wheel.Wheel.InPorts[1].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[1].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[1].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[1].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[1].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[1].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[1].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[1].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[1].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[2].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[2].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[2].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[2].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[2].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[2].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[2].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[2].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[2].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[3].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[3].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[3].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[3].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[3].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[3].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[3].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[3].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[3].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[4].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[4].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[4].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[4].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[4].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[4].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[4].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[4].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[4].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[5].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[5].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[5].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[5].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[5].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[5].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[5].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[5].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[5].M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[6].P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[6].P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[6].P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.Wheel.InPorts[6].F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[6].F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[6].F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.Wheel.InPorts[6].M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[6].M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.Wheel.InPorts[6].M[3](quantity = \"Torque\", unit = \"N.m\");
  protected Real m.wheel.Wheel.crosses[1,1];
  protected Real m.wheel.Wheel.crosses[1,2];
  protected Real m.wheel.Wheel.crosses[1,3];
  protected Real m.wheel.Wheel.crosses[2,1];
  protected Real m.wheel.Wheel.crosses[2,2];
  protected Real m.wheel.Wheel.crosses[2,3];
  protected Real m.wheel.Wheel.crosses[3,1];
  protected Real m.wheel.Wheel.crosses[3,2];
  protected Real m.wheel.Wheel.crosses[3,3];
  protected Real m.wheel.Wheel.crosses[4,1];
  protected Real m.wheel.Wheel.crosses[4,2];
  protected Real m.wheel.Wheel.crosses[4,3];
  protected Real m.wheel.Wheel.crosses[5,1];
  protected Real m.wheel.Wheel.crosses[5,2];
  protected Real m.wheel.Wheel.crosses[5,3];
  protected Real m.wheel.Wheel.crosses[6,1];
  protected Real m.wheel.Wheel.crosses[6,2];
  protected Real m.wheel.Wheel.crosses[6,3];
  Real m.wheel.InPortK.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.InPortK.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.InPortK.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.InPortK.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.InPortK.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.InPortK.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.InPortK.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.InPortK.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.InPortK.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.InPortK.T[1,1] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[1,2] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[1,3] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[2,1] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[2,2] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[2,3] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[3,1] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[3,2] \"Matrix of rotation\";
  Real m.wheel.InPortK.T[3,3] \"Matrix of rotation\";
  Real m.wheel.InPortK.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.InPortK.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.InPortK.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.InPortK.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.InPortK.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.InPortK.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.InPortF.P[1](quantity = \"Length\", unit = \"m\");
  Real m.wheel.InPortF.P[2](quantity = \"Length\", unit = \"m\");
  Real m.wheel.InPortF.P[3](quantity = \"Length\", unit = \"m\");
  Real m.wheel.InPortF.F[1](quantity = \"Force\", unit = \"N\");
  Real m.wheel.InPortF.F[2](quantity = \"Force\", unit = \"N\");
  Real m.wheel.InPortF.F[3](quantity = \"Force\", unit = \"N\");
  Real m.wheel.InPortF.M[1](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.InPortF.M[2](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.InPortF.M[3](quantity = \"Torque\", unit = \"N.m\");
  Real m.wheel.OutPortK.r[1](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.OutPortK.r[2](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.OutPortK.r[3](quantity = \"Length\", unit = \"m\") \"Radius vector of masscenter\";
  Real m.wheel.OutPortK.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.OutPortK.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.OutPortK.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Velocity vector of masscenter\";
  Real m.wheel.OutPortK.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.OutPortK.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.OutPortK.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Acceleration vector of masscenter\";
  Real m.wheel.OutPortK.T[1,1] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[1,2] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[1,3] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[2,1] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[2,2] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[2,3] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[3,1] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[3,2] \"Matrix of rotation\";
  Real m.wheel.OutPortK.T[3,3] \"Matrix of rotation\";
  Real m.wheel.OutPortK.omega[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.OutPortK.omega[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.OutPortK.omega[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Vector of angular rate\";
  Real m.wheel.OutPortK.epsilon[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.OutPortK.epsilon[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.OutPortK.epsilon[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Vector of angular acceleration\";
  Real m.wheel.w[1];
  Real m.wheel.w[2];
  Real m.wheel.w[3];
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Contacts[1].name, m.wheel.Contacts[1].name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Contacts[1].name, m.wheel.Contacts[1].n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[1].name, {m.wheel.Contacts[1].R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[1].name, {m.wheel.Contacts[1].psi}, \"psi\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Contacts[2].name, m.wheel.Contacts[2].name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Contacts[2].name, m.wheel.Contacts[2].n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[2].name, {m.wheel.Contacts[2].R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[2].name, {m.wheel.Contacts[2].psi}, \"psi\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Contacts[3].name, m.wheel.Contacts[3].name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Contacts[3].name, m.wheel.Contacts[3].n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[3].name, {m.wheel.Contacts[3].R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[3].name, {m.wheel.Contacts[3].psi}, \"psi\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Contacts[4].name, m.wheel.Contacts[4].name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Contacts[4].name, m.wheel.Contacts[4].n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[4].name, {m.wheel.Contacts[4].R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[4].name, {m.wheel.Contacts[4].psi}, \"psi\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Contacts[5].name, m.wheel.Contacts[5].name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Contacts[5].name, m.wheel.Contacts[5].n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[5].name, {m.wheel.Contacts[5].R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Contacts[5].name, {m.wheel.Contacts[5].psi}, \"psi\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Rollers[1].name, m.wheel.Rollers[1].N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].Gravity[1], m.wheel.Rollers[1].Gravity[2], m.wheel.Rollers[1].Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Rollers[1].q[1] ^ 2.0 + m.wheel.Rollers[1].q[2] ^ 2.0 + m.wheel.Rollers[1].q[3] ^ 2.0 + m.wheel.Rollers[1].q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Rollers[1].q[1] ^ 2.0 + m.wheel.Rollers[1].q[2] ^ 2.0 + m.wheel.Rollers[1].q[3] ^ 2.0 + m.wheel.Rollers[1].q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Rollers[1].q[1], m.wheel.Rollers[1].q[2], m.wheel.Rollers[1].q[3], m.wheel.Rollers[1].q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Rollers[1].name, m.wheel.Rollers[1].name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].I[1,1], m.wheel.Rollers[1].I[1,2], m.wheel.Rollers[1].I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].I[2,1], m.wheel.Rollers[1].I[2,2], m.wheel.Rollers[1].I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].I[3,1], m.wheel.Rollers[1].I[3,2], m.wheel.Rollers[1].I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].r[1], m.wheel.Rollers[1].r[2], m.wheel.Rollers[1].r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].v[1], m.wheel.Rollers[1].v[2], m.wheel.Rollers[1].v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].q[1], m.wheel.Rollers[1].q[2], m.wheel.Rollers[1].q[3], m.wheel.Rollers[1].q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].omega[1], m.wheel.Rollers[1].omega[2], m.wheel.Rollers[1].omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].F[1], m.wheel.Rollers[1].F[2], m.wheel.Rollers[1].F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[1].name, {m.wheel.Rollers[1].M[1], m.wheel.Rollers[1].M[2], m.wheel.Rollers[1].M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Rollers[2].name, m.wheel.Rollers[2].N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].Gravity[1], m.wheel.Rollers[2].Gravity[2], m.wheel.Rollers[2].Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Rollers[2].q[1] ^ 2.0 + m.wheel.Rollers[2].q[2] ^ 2.0 + m.wheel.Rollers[2].q[3] ^ 2.0 + m.wheel.Rollers[2].q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Rollers[2].q[1] ^ 2.0 + m.wheel.Rollers[2].q[2] ^ 2.0 + m.wheel.Rollers[2].q[3] ^ 2.0 + m.wheel.Rollers[2].q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Rollers[2].q[1], m.wheel.Rollers[2].q[2], m.wheel.Rollers[2].q[3], m.wheel.Rollers[2].q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Rollers[2].name, m.wheel.Rollers[2].name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].I[1,1], m.wheel.Rollers[2].I[1,2], m.wheel.Rollers[2].I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].I[2,1], m.wheel.Rollers[2].I[2,2], m.wheel.Rollers[2].I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].I[3,1], m.wheel.Rollers[2].I[3,2], m.wheel.Rollers[2].I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].r[1], m.wheel.Rollers[2].r[2], m.wheel.Rollers[2].r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].v[1], m.wheel.Rollers[2].v[2], m.wheel.Rollers[2].v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].q[1], m.wheel.Rollers[2].q[2], m.wheel.Rollers[2].q[3], m.wheel.Rollers[2].q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].omega[1], m.wheel.Rollers[2].omega[2], m.wheel.Rollers[2].omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].F[1], m.wheel.Rollers[2].F[2], m.wheel.Rollers[2].F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[2].name, {m.wheel.Rollers[2].M[1], m.wheel.Rollers[2].M[2], m.wheel.Rollers[2].M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Rollers[3].name, m.wheel.Rollers[3].N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].Gravity[1], m.wheel.Rollers[3].Gravity[2], m.wheel.Rollers[3].Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Rollers[3].q[1] ^ 2.0 + m.wheel.Rollers[3].q[2] ^ 2.0 + m.wheel.Rollers[3].q[3] ^ 2.0 + m.wheel.Rollers[3].q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Rollers[3].q[1] ^ 2.0 + m.wheel.Rollers[3].q[2] ^ 2.0 + m.wheel.Rollers[3].q[3] ^ 2.0 + m.wheel.Rollers[3].q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Rollers[3].q[1], m.wheel.Rollers[3].q[2], m.wheel.Rollers[3].q[3], m.wheel.Rollers[3].q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Rollers[3].name, m.wheel.Rollers[3].name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].I[1,1], m.wheel.Rollers[3].I[1,2], m.wheel.Rollers[3].I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].I[2,1], m.wheel.Rollers[3].I[2,2], m.wheel.Rollers[3].I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].I[3,1], m.wheel.Rollers[3].I[3,2], m.wheel.Rollers[3].I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].r[1], m.wheel.Rollers[3].r[2], m.wheel.Rollers[3].r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].v[1], m.wheel.Rollers[3].v[2], m.wheel.Rollers[3].v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].q[1], m.wheel.Rollers[3].q[2], m.wheel.Rollers[3].q[3], m.wheel.Rollers[3].q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].omega[1], m.wheel.Rollers[3].omega[2], m.wheel.Rollers[3].omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].F[1], m.wheel.Rollers[3].F[2], m.wheel.Rollers[3].F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[3].name, {m.wheel.Rollers[3].M[1], m.wheel.Rollers[3].M[2], m.wheel.Rollers[3].M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Rollers[4].name, m.wheel.Rollers[4].N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].Gravity[1], m.wheel.Rollers[4].Gravity[2], m.wheel.Rollers[4].Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Rollers[4].q[1] ^ 2.0 + m.wheel.Rollers[4].q[2] ^ 2.0 + m.wheel.Rollers[4].q[3] ^ 2.0 + m.wheel.Rollers[4].q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Rollers[4].q[1] ^ 2.0 + m.wheel.Rollers[4].q[2] ^ 2.0 + m.wheel.Rollers[4].q[3] ^ 2.0 + m.wheel.Rollers[4].q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Rollers[4].q[1], m.wheel.Rollers[4].q[2], m.wheel.Rollers[4].q[3], m.wheel.Rollers[4].q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Rollers[4].name, m.wheel.Rollers[4].name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].I[1,1], m.wheel.Rollers[4].I[1,2], m.wheel.Rollers[4].I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].I[2,1], m.wheel.Rollers[4].I[2,2], m.wheel.Rollers[4].I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].I[3,1], m.wheel.Rollers[4].I[3,2], m.wheel.Rollers[4].I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].r[1], m.wheel.Rollers[4].r[2], m.wheel.Rollers[4].r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].v[1], m.wheel.Rollers[4].v[2], m.wheel.Rollers[4].v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].q[1], m.wheel.Rollers[4].q[2], m.wheel.Rollers[4].q[3], m.wheel.Rollers[4].q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].omega[1], m.wheel.Rollers[4].omega[2], m.wheel.Rollers[4].omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].F[1], m.wheel.Rollers[4].F[2], m.wheel.Rollers[4].F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[4].name, {m.wheel.Rollers[4].M[1], m.wheel.Rollers[4].M[2], m.wheel.Rollers[4].M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Rollers[5].name, m.wheel.Rollers[5].N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].Gravity[1], m.wheel.Rollers[5].Gravity[2], m.wheel.Rollers[5].Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Rollers[5].q[1] ^ 2.0 + m.wheel.Rollers[5].q[2] ^ 2.0 + m.wheel.Rollers[5].q[3] ^ 2.0 + m.wheel.Rollers[5].q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Rollers[5].q[1] ^ 2.0 + m.wheel.Rollers[5].q[2] ^ 2.0 + m.wheel.Rollers[5].q[3] ^ 2.0 + m.wheel.Rollers[5].q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Rollers[5].q[1], m.wheel.Rollers[5].q[2], m.wheel.Rollers[5].q[3], m.wheel.Rollers[5].q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Rollers[5].name, m.wheel.Rollers[5].name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].I[1,1], m.wheel.Rollers[5].I[1,2], m.wheel.Rollers[5].I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].I[2,1], m.wheel.Rollers[5].I[2,2], m.wheel.Rollers[5].I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].I[3,1], m.wheel.Rollers[5].I[3,2], m.wheel.Rollers[5].I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].r[1], m.wheel.Rollers[5].r[2], m.wheel.Rollers[5].r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].v[1], m.wheel.Rollers[5].v[2], m.wheel.Rollers[5].v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].q[1], m.wheel.Rollers[5].q[2], m.wheel.Rollers[5].q[3], m.wheel.Rollers[5].q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].omega[1], m.wheel.Rollers[5].omega[2], m.wheel.Rollers[5].omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].F[1], m.wheel.Rollers[5].F[2], m.wheel.Rollers[5].F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Rollers[5].name, {m.wheel.Rollers[5].M[1], m.wheel.Rollers[5].M[2], m.wheel.Rollers[5].M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.Wheel.name, m.wheel.Wheel.N, \"N\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.Gravity[1], m.wheel.Wheel.Gravity[2], m.wheel.Wheel.Gravity[3]}, \"Gravity\");
initial algorithm
  assert(MbsLite.Util.CompareReal(m.wheel.Wheel.q[1] ^ 2.0 + m.wheel.Wheel.q[2] ^ 2.0 + m.wheel.Wheel.q[3] ^ 2.0 + m.wheel.Wheel.q[4] ^ 2.0, 1.0, 1e-10, 1e-05), \"Quaternion of body orientation should have norm 1, was: \" + String(m.wheel.Wheel.q[1] ^ 2.0 + m.wheel.Wheel.q[2] ^ 2.0 + m.wheel.Wheel.q[3] ^ 2.0 + m.wheel.Wheel.q[4] ^ 2.0, 0, true, 6) + \", q = \" + MbsLite.Util.StringA({m.wheel.Wheel.q[1], m.wheel.Wheel.q[2], m.wheel.Wheel.q[3], m.wheel.Wheel.q[4]}, \", \") + \". Are the initial conditions specified?\");
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.Wheel.name, m.wheel.Wheel.name, \"name\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.m}, \"m\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.I[1,1], m.wheel.Wheel.I[1,2], m.wheel.Wheel.I[1,3]}, \"I[1, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.I[2,1], m.wheel.Wheel.I[2,2], m.wheel.Wheel.I[2,3]}, \"I[2, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.I[3,1], m.wheel.Wheel.I[3,2], m.wheel.Wheel.I[3,3]}, \"I[3, :]\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.r[1], m.wheel.Wheel.r[2], m.wheel.Wheel.r[3]}, \"r\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.v[1], m.wheel.Wheel.v[2], m.wheel.Wheel.v[3]}, \"v\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.q[1], m.wheel.Wheel.q[2], m.wheel.Wheel.q[3], m.wheel.Wheel.q[4]}, \"q\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.omega[1], m.wheel.Wheel.omega[2], m.wheel.Wheel.omega[3]}, \"omega\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.F[1], m.wheel.Wheel.F[2], m.wheel.Wheel.F[3]}, \"F\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.Wheel.name, {m.wheel.Wheel.M[1], m.wheel.Wheel.M[2], m.wheel.Wheel.M[3]}, \"M\");
initial algorithm
  MbsLite.Util.Assert.AssertInitializedS(m.wheel.name, m.wheel.name, \"name\");
  MbsLite.Util.Assert.AssertInitializedI(m.wheel.name, m.wheel.n, \"n\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.psi}, \"psi\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.rollerMass}, \"rollerMass\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.rollerAxialMoi}, \"rollerAxialMoi\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.rollerOrthogonalMoi}, \"rollerOrthogonalMoi\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.wheelHubMass}, \"wheelHubMass\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.wheelHubAxialMoi}, \"wheelHubAxialMoi\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.wheelHubOrthogonalMoi}, \"wheelHubOrthogonalMoi\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.R}, \"R\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.r0[1], m.wheel.r0[2], m.wheel.r0[3]}, \"r0\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.q0[1], m.wheel.q0[2], m.wheel.q0[3], m.wheel.q0[4]}, \"q0\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.v0[1], m.wheel.v0[2], m.wheel.v0[3]}, \"v0\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.omega0[1], m.wheel.omega0[2], m.wheel.omega0[3]}, \"omega0\");
  MbsLite.Util.Assert.AssertInitialized(m.wheel.name, {m.wheel.Gravity[1], m.wheel.Gravity[2], m.wheel.Gravity[3]}, \"Gravity\");
equation
  m.base.OutPort.r[1] = 0.0;
  m.base.OutPort.r[2] = 0.0;
  m.base.OutPort.r[3] = 0.0;
  m.base.OutPort.v[1] = 0.0;
  m.base.OutPort.v[2] = 0.0;
  m.base.OutPort.v[3] = 0.0;
  m.base.OutPort.a[1] = 0.0;
  m.base.OutPort.a[2] = 0.0;
  m.base.OutPort.a[3] = 0.0;
  m.base.OutPort.T[1,1] = 1.0;
  m.base.OutPort.T[1,2] = 0.0;
  m.base.OutPort.T[1,3] = 0.0;
  m.base.OutPort.T[2,1] = 0.0;
  m.base.OutPort.T[2,2] = 1.0;
  m.base.OutPort.T[2,3] = 0.0;
  m.base.OutPort.T[3,1] = 0.0;
  m.base.OutPort.T[3,2] = 0.0;
  m.base.OutPort.T[3,3] = 1.0;
  m.base.OutPort.omega[1] = 0.0;
  m.base.OutPort.omega[2] = 0.0;
  m.base.OutPort.omega[3] = 0.0;
  m.base.OutPort.epsilon[1] = 0.0;
  m.base.OutPort.epsilon[2] = 0.0;
  m.base.OutPort.epsilon[3] = 0.0;
  if noEvent(abs(m.wheel.Contacts[1].cosBtwAxisAndVert) < m.wheel.Contacts[1].cos_of_max) and noEvent(m.wheel.Contacts[1].InPortB.r[2] < m.wheel.Contacts[1].R) then
    m.wheel.Contacts[1].isInContact = 1.0;
    m.wheel.Contacts[1].Drelvn = 0.0;
    m.wheel.Contacts[1].Forcet[1] = m.wheel.Contacts[1].nA[1] * m.wheel.Contacts[1].mu - m.wheel.Contacts[1].relvt[1] * m.wheel.Contacts[1].fric * (if noEvent(m.wheel.Contacts[1].relvtsqrt <= m.wheel.Contacts[1].delta) then 1.0 / m.wheel.Contacts[1].delta else 1.0 / m.wheel.Contacts[1].relvtsqrt) * m.wheel.Contacts[1].Forcen;
    m.wheel.Contacts[1].Forcet[2] = m.wheel.Contacts[1].nA[2] * m.wheel.Contacts[1].mu - m.wheel.Contacts[1].relvt[2] * m.wheel.Contacts[1].fric * (if noEvent(m.wheel.Contacts[1].relvtsqrt <= m.wheel.Contacts[1].delta) then 1.0 / m.wheel.Contacts[1].delta else 1.0 / m.wheel.Contacts[1].relvtsqrt) * m.wheel.Contacts[1].Forcen;
    m.wheel.Contacts[1].Forcet[3] = m.wheel.Contacts[1].nA[3] * m.wheel.Contacts[1].mu - m.wheel.Contacts[1].relvt[3] * m.wheel.Contacts[1].fric * (if noEvent(m.wheel.Contacts[1].relvtsqrt <= m.wheel.Contacts[1].delta) then 1.0 / m.wheel.Contacts[1].delta else 1.0 / m.wheel.Contacts[1].relvtsqrt) * m.wheel.Contacts[1].Forcen;
  else
    m.wheel.Contacts[1].isInContact = 0.0;
    m.wheel.Contacts[1].Forcen = 0.0;
    m.wheel.Contacts[1].Forcet[1] = 0.0;
    m.wheel.Contacts[1].Forcet[2] = 0.0;
    m.wheel.Contacts[1].Forcet[3] = 0.0;
  end if;
  m.wheel.Contacts[1].Drelvn = der(m.wheel.Contacts[1].relvn);
  m.wheel.Contacts[1].Forcen = m.wheel.Contacts[1].OutPortB.F[1] * m.wheel.Contacts[1].nA[1] + m.wheel.Contacts[1].OutPortB.F[2] * m.wheel.Contacts[1].nA[2] + m.wheel.Contacts[1].OutPortB.F[3] * m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].OutPortB.F[1] = m.wheel.Contacts[1].Forcet[1] + m.wheel.Contacts[1].nA[1] * m.wheel.Contacts[1].Forcen;
  m.wheel.Contacts[1].OutPortB.F[2] = m.wheel.Contacts[1].Forcet[2] + m.wheel.Contacts[1].nA[2] * m.wheel.Contacts[1].Forcen;
  m.wheel.Contacts[1].OutPortB.F[3] = m.wheel.Contacts[1].Forcet[3] + m.wheel.Contacts[1].nA[3] * m.wheel.Contacts[1].Forcen;
  m.wheel.Contacts[1].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[1].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[1].OutPortB.M[3] = 0.0;
  m.wheel.Contacts[1].vA = MbsLite.Util.Euler({m.wheel.Contacts[1].InPortA.r[1], m.wheel.Contacts[1].InPortA.r[2], m.wheel.Contacts[1].InPortA.r[3]}, {m.wheel.Contacts[1].rA[1], m.wheel.Contacts[1].rA[2], m.wheel.Contacts[1].rA[3]}, {m.wheel.Contacts[1].InPortA.v[1], m.wheel.Contacts[1].InPortA.v[2], m.wheel.Contacts[1].InPortA.v[3]}, {m.wheel.Contacts[1].InPortA.omega[1], m.wheel.Contacts[1].InPortA.omega[2], m.wheel.Contacts[1].InPortA.omega[3]});
  m.wheel.Contacts[1].vB = MbsLite.Util.Euler({m.wheel.Contacts[1].InPortB.r[1], m.wheel.Contacts[1].InPortB.r[2], m.wheel.Contacts[1].InPortB.r[3]}, {m.wheel.Contacts[1].rB[1], m.wheel.Contacts[1].rB[2], m.wheel.Contacts[1].rB[3]}, {m.wheel.Contacts[1].InPortB.v[1], m.wheel.Contacts[1].InPortB.v[2], m.wheel.Contacts[1].InPortB.v[3]}, {m.wheel.Contacts[1].InPortB.omega[1], m.wheel.Contacts[1].InPortB.omega[2], m.wheel.Contacts[1].InPortB.omega[3]});
  m.wheel.Contacts[1].relv[1] = m.wheel.Contacts[1].vB[1] - m.wheel.Contacts[1].vA[1];
  m.wheel.Contacts[1].relv[2] = m.wheel.Contacts[1].vB[2] - m.wheel.Contacts[1].vA[2];
  m.wheel.Contacts[1].relv[3] = m.wheel.Contacts[1].vB[3] - m.wheel.Contacts[1].vA[3];
  m.wheel.Contacts[1].vAn = m.wheel.Contacts[1].vA[1] * m.wheel.Contacts[1].nA[1] + m.wheel.Contacts[1].vA[2] * m.wheel.Contacts[1].nA[2] + m.wheel.Contacts[1].vA[3] * m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].vBn = m.wheel.Contacts[1].vB[1] * m.wheel.Contacts[1].nA[1] + m.wheel.Contacts[1].vB[2] * m.wheel.Contacts[1].nA[2] + m.wheel.Contacts[1].vB[3] * m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].relvn = m.wheel.Contacts[1].relv[1] * m.wheel.Contacts[1].nA[1] + m.wheel.Contacts[1].relv[2] * m.wheel.Contacts[1].nA[2] + m.wheel.Contacts[1].relv[3] * m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].vAt[1] = m.wheel.Contacts[1].vA[1] - m.wheel.Contacts[1].nA[1] * m.wheel.Contacts[1].vAn;
  m.wheel.Contacts[1].vAt[2] = m.wheel.Contacts[1].vA[2] - m.wheel.Contacts[1].nA[2] * m.wheel.Contacts[1].vAn;
  m.wheel.Contacts[1].vAt[3] = m.wheel.Contacts[1].vA[3] - m.wheel.Contacts[1].nA[3] * m.wheel.Contacts[1].vAn;
  m.wheel.Contacts[1].vBt[1] = m.wheel.Contacts[1].vB[1] - m.wheel.Contacts[1].nA[1] * m.wheel.Contacts[1].vBn;
  m.wheel.Contacts[1].vBt[2] = m.wheel.Contacts[1].vB[2] - m.wheel.Contacts[1].nA[2] * m.wheel.Contacts[1].vBn;
  m.wheel.Contacts[1].vBt[3] = m.wheel.Contacts[1].vB[3] - m.wheel.Contacts[1].nA[3] * m.wheel.Contacts[1].vBn;
  m.wheel.Contacts[1].relvt[1] = m.wheel.Contacts[1].vBt[1] - m.wheel.Contacts[1].vAt[1];
  m.wheel.Contacts[1].relvt[2] = m.wheel.Contacts[1].vBt[2] - m.wheel.Contacts[1].vAt[2];
  m.wheel.Contacts[1].relvt[3] = m.wheel.Contacts[1].vBt[3] - m.wheel.Contacts[1].vAt[3];
  m.wheel.Contacts[1].relvtsqrt = Modelica.Math.Vectors.norm({m.wheel.Contacts[1].relvt[1], m.wheel.Contacts[1].relvt[2], m.wheel.Contacts[1].relvt[3]}, 2.0);
  m.wheel.Contacts[1].OutPortA.P[1] = m.wheel.Contacts[1].rA[1];
  m.wheel.Contacts[1].OutPortA.P[2] = m.wheel.Contacts[1].rA[2];
  m.wheel.Contacts[1].OutPortA.P[3] = m.wheel.Contacts[1].rA[3];
  m.wheel.Contacts[1].OutPortB.P[1] = m.wheel.Contacts[1].rB[1];
  m.wheel.Contacts[1].OutPortB.P[2] = m.wheel.Contacts[1].rB[2];
  m.wheel.Contacts[1].OutPortB.P[3] = m.wheel.Contacts[1].rB[3];
  m.wheel.Contacts[1].n1j[1] = m.wheel.Contacts[1].nA[1];
  m.wheel.Contacts[1].n1j[2] = m.wheel.Contacts[1].nA[2];
  m.wheel.Contacts[1].n1j[3] = m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].ni[1] = m.wheel.Contacts[1].InPortB.T[1,1] * m.wheel.Contacts[1].i[1] + m.wheel.Contacts[1].InPortB.T[1,2] * m.wheel.Contacts[1].i[2] + m.wheel.Contacts[1].InPortB.T[1,3] * m.wheel.Contacts[1].i[3];
  m.wheel.Contacts[1].ni[2] = m.wheel.Contacts[1].InPortB.T[2,1] * m.wheel.Contacts[1].i[1] + m.wheel.Contacts[1].InPortB.T[2,2] * m.wheel.Contacts[1].i[2] + m.wheel.Contacts[1].InPortB.T[2,3] * m.wheel.Contacts[1].i[3];
  m.wheel.Contacts[1].ni[3] = m.wheel.Contacts[1].InPortB.T[3,1] * m.wheel.Contacts[1].i[1] + m.wheel.Contacts[1].InPortB.T[3,2] * m.wheel.Contacts[1].i[2] + m.wheel.Contacts[1].InPortB.T[3,3] * m.wheel.Contacts[1].i[3];
  m.wheel.Contacts[1].crs[1] = m.wheel.Contacts[1].ni[2] * m.wheel.Contacts[1].nA[3] - m.wheel.Contacts[1].ni[3] * m.wheel.Contacts[1].nA[2];
  m.wheel.Contacts[1].crs[2] = m.wheel.Contacts[1].ni[3] * m.wheel.Contacts[1].nA[1] - m.wheel.Contacts[1].ni[1] * m.wheel.Contacts[1].nA[3];
  m.wheel.Contacts[1].crs[3] = m.wheel.Contacts[1].ni[1] * m.wheel.Contacts[1].nA[2] - m.wheel.Contacts[1].ni[2] * m.wheel.Contacts[1].nA[1];
  m.wheel.Contacts[1].nk[1] = m.wheel.Contacts[1].crs[1] / sqrt(m.wheel.Contacts[1].crs[1] ^ 2.0 + m.wheel.Contacts[1].crs[2] ^ 2.0 + m.wheel.Contacts[1].crs[3] ^ 2.0);
  m.wheel.Contacts[1].nk[2] = m.wheel.Contacts[1].crs[2] / sqrt(m.wheel.Contacts[1].crs[1] ^ 2.0 + m.wheel.Contacts[1].crs[2] ^ 2.0 + m.wheel.Contacts[1].crs[3] ^ 2.0);
  m.wheel.Contacts[1].nk[3] = m.wheel.Contacts[1].crs[3] / sqrt(m.wheel.Contacts[1].crs[1] ^ 2.0 + m.wheel.Contacts[1].crs[2] ^ 2.0 + m.wheel.Contacts[1].crs[3] ^ 2.0);
  m.wheel.Contacts[1].cosBtwAxisAndVert = m.wheel.Contacts[1].ni[1] * m.wheel.Contacts[1].nA[1] + m.wheel.Contacts[1].ni[2] * m.wheel.Contacts[1].nA[2] + m.wheel.Contacts[1].ni[3] * m.wheel.Contacts[1].nA[3];
  if noEvent(abs(m.wheel.Contacts[1].cosBtwAxisAndVert) < m.wheel.Contacts[1].cos_of_max) and noEvent(m.wheel.Contacts[1].InPortB.r[2] < m.wheel.Contacts[1].R) then
    m.wheel.Contacts[1].lambda = (m.wheel.Contacts[1].R * (m.wheel.Contacts[1].n1j[1] * m.wheel.Contacts[1].nk[1] + m.wheel.Contacts[1].n1j[2] * m.wheel.Contacts[1].nk[2] + m.wheel.Contacts[1].n1j[3] * m.wheel.Contacts[1].nk[3]) - m.wheel.Contacts[1].R1 * (m.wheel.Contacts[1].rho[1] * m.wheel.Contacts[1].nk[1] + m.wheel.Contacts[1].rho[2] * m.wheel.Contacts[1].nk[2] + m.wheel.Contacts[1].rho[3] * m.wheel.Contacts[1].nk[3])) / (m.wheel.Contacts[1].n1k[1] * m.wheel.Contacts[1].nk[1] + m.wheel.Contacts[1].n1k[2] * m.wheel.Contacts[1].nk[2] + m.wheel.Contacts[1].n1k[3] * m.wheel.Contacts[1].nk[3]);
    m.wheel.Contacts[1].OBPB[1] = m.wheel.Contacts[1].n1k[1] * m.wheel.Contacts[1].lambda - m.wheel.Contacts[1].n1j[1] * m.wheel.Contacts[1].R + m.wheel.Contacts[1].rho[1] * m.wheel.Contacts[1].R1;
    m.wheel.Contacts[1].OBPB[2] = m.wheel.Contacts[1].n1k[2] * m.wheel.Contacts[1].lambda - m.wheel.Contacts[1].n1j[2] * m.wheel.Contacts[1].R + m.wheel.Contacts[1].rho[2] * m.wheel.Contacts[1].R1;
    m.wheel.Contacts[1].OBPB[3] = m.wheel.Contacts[1].n1k[3] * m.wheel.Contacts[1].lambda - m.wheel.Contacts[1].n1j[3] * m.wheel.Contacts[1].R + m.wheel.Contacts[1].rho[3] * m.wheel.Contacts[1].R1;
    m.wheel.Contacts[1].rB[1] = m.wheel.Contacts[1].InPortB.r[1] + m.wheel.Contacts[1].OBPB[1];
    m.wheel.Contacts[1].rB[2] = m.wheel.Contacts[1].InPortB.r[2] + m.wheel.Contacts[1].OBPB[2];
    m.wheel.Contacts[1].rB[3] = m.wheel.Contacts[1].InPortB.r[3] + m.wheel.Contacts[1].OBPB[3];
    m.wheel.Contacts[1].j = 1.0;
  else
    m.wheel.Contacts[1].lambda = m.wheel.Contacts[1].R * (m.wheel.Contacts[1].n1j[1] * m.wheel.Contacts[1].nk[1] + m.wheel.Contacts[1].n1j[2] * m.wheel.Contacts[1].nk[2] + m.wheel.Contacts[1].n1j[3] * m.wheel.Contacts[1].nk[3]) / (m.wheel.Contacts[1].n1k[1] * m.wheel.Contacts[1].nk[1] + m.wheel.Contacts[1].n1k[2] * m.wheel.Contacts[1].nk[2] + m.wheel.Contacts[1].n1k[3] * m.wheel.Contacts[1].nk[3]);
    m.wheel.Contacts[1].OBPB[1] = (-m.wheel.Contacts[1].n1j[1]) * m.wheel.Contacts[1].R;
    m.wheel.Contacts[1].OBPB[2] = (-m.wheel.Contacts[1].n1j[2]) * m.wheel.Contacts[1].R;
    m.wheel.Contacts[1].OBPB[3] = (-m.wheel.Contacts[1].n1j[3]) * m.wheel.Contacts[1].R;
    if noEvent(m.wheel.Contacts[1].cosBtwAxisAndVert > 0.0) then
      m.wheel.Contacts[1].rB[1] = m.wheel.Contacts[1].InPortB.r[1] - m.wheel.Contacts[1].ni[1] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].rB[2] = m.wheel.Contacts[1].InPortB.r[2] - m.wheel.Contacts[1].ni[2] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].rB[3] = m.wheel.Contacts[1].InPortB.r[3] - m.wheel.Contacts[1].ni[3] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].j = 2.0;
    else
      m.wheel.Contacts[1].rB[1] = m.wheel.Contacts[1].InPortB.r[1] + m.wheel.Contacts[1].ni[1] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].rB[2] = m.wheel.Contacts[1].InPortB.r[2] + m.wheel.Contacts[1].ni[2] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].rB[3] = m.wheel.Contacts[1].InPortB.r[3] + m.wheel.Contacts[1].ni[3] * m.wheel.Contacts[1].L2;
      m.wheel.Contacts[1].j = 3.0;
    end if;
  end if;
  m.wheel.Contacts[1].rA[1] = m.wheel.Contacts[1].rB[1];
  m.wheel.Contacts[1].rA[2] = 0.0;
  m.wheel.Contacts[1].rA[3] = m.wheel.Contacts[1].rB[3];
  m.wheel.Contacts[1].OutPortA.F[1] + m.wheel.Contacts[1].OutPortB.F[1] = 0.0;
  m.wheel.Contacts[1].OutPortA.F[2] + m.wheel.Contacts[1].OutPortB.F[2] = 0.0;
  m.wheel.Contacts[1].OutPortA.F[3] + m.wheel.Contacts[1].OutPortB.F[3] = 0.0;
  m.wheel.Contacts[1].OutPortA.M[1] + m.wheel.Contacts[1].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[1].OutPortA.M[2] + m.wheel.Contacts[1].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[1].OutPortA.M[3] + m.wheel.Contacts[1].OutPortB.M[3] = 0.0;
  if noEvent(abs(m.wheel.Contacts[2].cosBtwAxisAndVert) < m.wheel.Contacts[2].cos_of_max) and noEvent(m.wheel.Contacts[2].InPortB.r[2] < m.wheel.Contacts[2].R) then
    m.wheel.Contacts[2].isInContact = 1.0;
    m.wheel.Contacts[2].Drelvn = 0.0;
    m.wheel.Contacts[2].Forcet[1] = m.wheel.Contacts[2].nA[1] * m.wheel.Contacts[2].mu - m.wheel.Contacts[2].relvt[1] * m.wheel.Contacts[2].fric * (if noEvent(m.wheel.Contacts[2].relvtsqrt <= m.wheel.Contacts[2].delta) then 1.0 / m.wheel.Contacts[2].delta else 1.0 / m.wheel.Contacts[2].relvtsqrt) * m.wheel.Contacts[2].Forcen;
    m.wheel.Contacts[2].Forcet[2] = m.wheel.Contacts[2].nA[2] * m.wheel.Contacts[2].mu - m.wheel.Contacts[2].relvt[2] * m.wheel.Contacts[2].fric * (if noEvent(m.wheel.Contacts[2].relvtsqrt <= m.wheel.Contacts[2].delta) then 1.0 / m.wheel.Contacts[2].delta else 1.0 / m.wheel.Contacts[2].relvtsqrt) * m.wheel.Contacts[2].Forcen;
    m.wheel.Contacts[2].Forcet[3] = m.wheel.Contacts[2].nA[3] * m.wheel.Contacts[2].mu - m.wheel.Contacts[2].relvt[3] * m.wheel.Contacts[2].fric * (if noEvent(m.wheel.Contacts[2].relvtsqrt <= m.wheel.Contacts[2].delta) then 1.0 / m.wheel.Contacts[2].delta else 1.0 / m.wheel.Contacts[2].relvtsqrt) * m.wheel.Contacts[2].Forcen;
  else
    m.wheel.Contacts[2].isInContact = 0.0;
    m.wheel.Contacts[2].Forcen = 0.0;
    m.wheel.Contacts[2].Forcet[1] = 0.0;
    m.wheel.Contacts[2].Forcet[2] = 0.0;
    m.wheel.Contacts[2].Forcet[3] = 0.0;
  end if;
  m.wheel.Contacts[2].Drelvn = der(m.wheel.Contacts[2].relvn);
  m.wheel.Contacts[2].Forcen = m.wheel.Contacts[2].OutPortB.F[1] * m.wheel.Contacts[2].nA[1] + m.wheel.Contacts[2].OutPortB.F[2] * m.wheel.Contacts[2].nA[2] + m.wheel.Contacts[2].OutPortB.F[3] * m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].OutPortB.F[1] = m.wheel.Contacts[2].Forcet[1] + m.wheel.Contacts[2].nA[1] * m.wheel.Contacts[2].Forcen;
  m.wheel.Contacts[2].OutPortB.F[2] = m.wheel.Contacts[2].Forcet[2] + m.wheel.Contacts[2].nA[2] * m.wheel.Contacts[2].Forcen;
  m.wheel.Contacts[2].OutPortB.F[3] = m.wheel.Contacts[2].Forcet[3] + m.wheel.Contacts[2].nA[3] * m.wheel.Contacts[2].Forcen;
  m.wheel.Contacts[2].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[2].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[2].OutPortB.M[3] = 0.0;
  m.wheel.Contacts[2].vA = MbsLite.Util.Euler({m.wheel.Contacts[2].InPortA.r[1], m.wheel.Contacts[2].InPortA.r[2], m.wheel.Contacts[2].InPortA.r[3]}, {m.wheel.Contacts[2].rA[1], m.wheel.Contacts[2].rA[2], m.wheel.Contacts[2].rA[3]}, {m.wheel.Contacts[2].InPortA.v[1], m.wheel.Contacts[2].InPortA.v[2], m.wheel.Contacts[2].InPortA.v[3]}, {m.wheel.Contacts[2].InPortA.omega[1], m.wheel.Contacts[2].InPortA.omega[2], m.wheel.Contacts[2].InPortA.omega[3]});
  m.wheel.Contacts[2].vB = MbsLite.Util.Euler({m.wheel.Contacts[2].InPortB.r[1], m.wheel.Contacts[2].InPortB.r[2], m.wheel.Contacts[2].InPortB.r[3]}, {m.wheel.Contacts[2].rB[1], m.wheel.Contacts[2].rB[2], m.wheel.Contacts[2].rB[3]}, {m.wheel.Contacts[2].InPortB.v[1], m.wheel.Contacts[2].InPortB.v[2], m.wheel.Contacts[2].InPortB.v[3]}, {m.wheel.Contacts[2].InPortB.omega[1], m.wheel.Contacts[2].InPortB.omega[2], m.wheel.Contacts[2].InPortB.omega[3]});
  m.wheel.Contacts[2].relv[1] = m.wheel.Contacts[2].vB[1] - m.wheel.Contacts[2].vA[1];
  m.wheel.Contacts[2].relv[2] = m.wheel.Contacts[2].vB[2] - m.wheel.Contacts[2].vA[2];
  m.wheel.Contacts[2].relv[3] = m.wheel.Contacts[2].vB[3] - m.wheel.Contacts[2].vA[3];
  m.wheel.Contacts[2].vAn = m.wheel.Contacts[2].vA[1] * m.wheel.Contacts[2].nA[1] + m.wheel.Contacts[2].vA[2] * m.wheel.Contacts[2].nA[2] + m.wheel.Contacts[2].vA[3] * m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].vBn = m.wheel.Contacts[2].vB[1] * m.wheel.Contacts[2].nA[1] + m.wheel.Contacts[2].vB[2] * m.wheel.Contacts[2].nA[2] + m.wheel.Contacts[2].vB[3] * m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].relvn = m.wheel.Contacts[2].relv[1] * m.wheel.Contacts[2].nA[1] + m.wheel.Contacts[2].relv[2] * m.wheel.Contacts[2].nA[2] + m.wheel.Contacts[2].relv[3] * m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].vAt[1] = m.wheel.Contacts[2].vA[1] - m.wheel.Contacts[2].nA[1] * m.wheel.Contacts[2].vAn;
  m.wheel.Contacts[2].vAt[2] = m.wheel.Contacts[2].vA[2] - m.wheel.Contacts[2].nA[2] * m.wheel.Contacts[2].vAn;
  m.wheel.Contacts[2].vAt[3] = m.wheel.Contacts[2].vA[3] - m.wheel.Contacts[2].nA[3] * m.wheel.Contacts[2].vAn;
  m.wheel.Contacts[2].vBt[1] = m.wheel.Contacts[2].vB[1] - m.wheel.Contacts[2].nA[1] * m.wheel.Contacts[2].vBn;
  m.wheel.Contacts[2].vBt[2] = m.wheel.Contacts[2].vB[2] - m.wheel.Contacts[2].nA[2] * m.wheel.Contacts[2].vBn;
  m.wheel.Contacts[2].vBt[3] = m.wheel.Contacts[2].vB[3] - m.wheel.Contacts[2].nA[3] * m.wheel.Contacts[2].vBn;
  m.wheel.Contacts[2].relvt[1] = m.wheel.Contacts[2].vBt[1] - m.wheel.Contacts[2].vAt[1];
  m.wheel.Contacts[2].relvt[2] = m.wheel.Contacts[2].vBt[2] - m.wheel.Contacts[2].vAt[2];
  m.wheel.Contacts[2].relvt[3] = m.wheel.Contacts[2].vBt[3] - m.wheel.Contacts[2].vAt[3];
  m.wheel.Contacts[2].relvtsqrt = Modelica.Math.Vectors.norm({m.wheel.Contacts[2].relvt[1], m.wheel.Contacts[2].relvt[2], m.wheel.Contacts[2].relvt[3]}, 2.0);
  m.wheel.Contacts[2].OutPortA.P[1] = m.wheel.Contacts[2].rA[1];
  m.wheel.Contacts[2].OutPortA.P[2] = m.wheel.Contacts[2].rA[2];
  m.wheel.Contacts[2].OutPortA.P[3] = m.wheel.Contacts[2].rA[3];
  m.wheel.Contacts[2].OutPortB.P[1] = m.wheel.Contacts[2].rB[1];
  m.wheel.Contacts[2].OutPortB.P[2] = m.wheel.Contacts[2].rB[2];
  m.wheel.Contacts[2].OutPortB.P[3] = m.wheel.Contacts[2].rB[3];
  m.wheel.Contacts[2].n1j[1] = m.wheel.Contacts[2].nA[1];
  m.wheel.Contacts[2].n1j[2] = m.wheel.Contacts[2].nA[2];
  m.wheel.Contacts[2].n1j[3] = m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].ni[1] = m.wheel.Contacts[2].InPortB.T[1,1] * m.wheel.Contacts[2].i[1] + m.wheel.Contacts[2].InPortB.T[1,2] * m.wheel.Contacts[2].i[2] + m.wheel.Contacts[2].InPortB.T[1,3] * m.wheel.Contacts[2].i[3];
  m.wheel.Contacts[2].ni[2] = m.wheel.Contacts[2].InPortB.T[2,1] * m.wheel.Contacts[2].i[1] + m.wheel.Contacts[2].InPortB.T[2,2] * m.wheel.Contacts[2].i[2] + m.wheel.Contacts[2].InPortB.T[2,3] * m.wheel.Contacts[2].i[3];
  m.wheel.Contacts[2].ni[3] = m.wheel.Contacts[2].InPortB.T[3,1] * m.wheel.Contacts[2].i[1] + m.wheel.Contacts[2].InPortB.T[3,2] * m.wheel.Contacts[2].i[2] + m.wheel.Contacts[2].InPortB.T[3,3] * m.wheel.Contacts[2].i[3];
  m.wheel.Contacts[2].crs[1] = m.wheel.Contacts[2].ni[2] * m.wheel.Contacts[2].nA[3] - m.wheel.Contacts[2].ni[3] * m.wheel.Contacts[2].nA[2];
  m.wheel.Contacts[2].crs[2] = m.wheel.Contacts[2].ni[3] * m.wheel.Contacts[2].nA[1] - m.wheel.Contacts[2].ni[1] * m.wheel.Contacts[2].nA[3];
  m.wheel.Contacts[2].crs[3] = m.wheel.Contacts[2].ni[1] * m.wheel.Contacts[2].nA[2] - m.wheel.Contacts[2].ni[2] * m.wheel.Contacts[2].nA[1];
  m.wheel.Contacts[2].nk[1] = m.wheel.Contacts[2].crs[1] / sqrt(m.wheel.Contacts[2].crs[1] ^ 2.0 + m.wheel.Contacts[2].crs[2] ^ 2.0 + m.wheel.Contacts[2].crs[3] ^ 2.0);
  m.wheel.Contacts[2].nk[2] = m.wheel.Contacts[2].crs[2] / sqrt(m.wheel.Contacts[2].crs[1] ^ 2.0 + m.wheel.Contacts[2].crs[2] ^ 2.0 + m.wheel.Contacts[2].crs[3] ^ 2.0);
  m.wheel.Contacts[2].nk[3] = m.wheel.Contacts[2].crs[3] / sqrt(m.wheel.Contacts[2].crs[1] ^ 2.0 + m.wheel.Contacts[2].crs[2] ^ 2.0 + m.wheel.Contacts[2].crs[3] ^ 2.0);
  m.wheel.Contacts[2].cosBtwAxisAndVert = m.wheel.Contacts[2].ni[1] * m.wheel.Contacts[2].nA[1] + m.wheel.Contacts[2].ni[2] * m.wheel.Contacts[2].nA[2] + m.wheel.Contacts[2].ni[3] * m.wheel.Contacts[2].nA[3];
  if noEvent(abs(m.wheel.Contacts[2].cosBtwAxisAndVert) < m.wheel.Contacts[2].cos_of_max) and noEvent(m.wheel.Contacts[2].InPortB.r[2] < m.wheel.Contacts[2].R) then
    m.wheel.Contacts[2].lambda = (m.wheel.Contacts[2].R * (m.wheel.Contacts[2].n1j[1] * m.wheel.Contacts[2].nk[1] + m.wheel.Contacts[2].n1j[2] * m.wheel.Contacts[2].nk[2] + m.wheel.Contacts[2].n1j[3] * m.wheel.Contacts[2].nk[3]) - m.wheel.Contacts[2].R1 * (m.wheel.Contacts[2].rho[1] * m.wheel.Contacts[2].nk[1] + m.wheel.Contacts[2].rho[2] * m.wheel.Contacts[2].nk[2] + m.wheel.Contacts[2].rho[3] * m.wheel.Contacts[2].nk[3])) / (m.wheel.Contacts[2].n1k[1] * m.wheel.Contacts[2].nk[1] + m.wheel.Contacts[2].n1k[2] * m.wheel.Contacts[2].nk[2] + m.wheel.Contacts[2].n1k[3] * m.wheel.Contacts[2].nk[3]);
    m.wheel.Contacts[2].OBPB[1] = m.wheel.Contacts[2].n1k[1] * m.wheel.Contacts[2].lambda - m.wheel.Contacts[2].n1j[1] * m.wheel.Contacts[2].R + m.wheel.Contacts[2].rho[1] * m.wheel.Contacts[2].R1;
    m.wheel.Contacts[2].OBPB[2] = m.wheel.Contacts[2].n1k[2] * m.wheel.Contacts[2].lambda - m.wheel.Contacts[2].n1j[2] * m.wheel.Contacts[2].R + m.wheel.Contacts[2].rho[2] * m.wheel.Contacts[2].R1;
    m.wheel.Contacts[2].OBPB[3] = m.wheel.Contacts[2].n1k[3] * m.wheel.Contacts[2].lambda - m.wheel.Contacts[2].n1j[3] * m.wheel.Contacts[2].R + m.wheel.Contacts[2].rho[3] * m.wheel.Contacts[2].R1;
    m.wheel.Contacts[2].rB[1] = m.wheel.Contacts[2].InPortB.r[1] + m.wheel.Contacts[2].OBPB[1];
    m.wheel.Contacts[2].rB[2] = m.wheel.Contacts[2].InPortB.r[2] + m.wheel.Contacts[2].OBPB[2];
    m.wheel.Contacts[2].rB[3] = m.wheel.Contacts[2].InPortB.r[3] + m.wheel.Contacts[2].OBPB[3];
    m.wheel.Contacts[2].j = 1.0;
  else
    m.wheel.Contacts[2].lambda = m.wheel.Contacts[2].R * (m.wheel.Contacts[2].n1j[1] * m.wheel.Contacts[2].nk[1] + m.wheel.Contacts[2].n1j[2] * m.wheel.Contacts[2].nk[2] + m.wheel.Contacts[2].n1j[3] * m.wheel.Contacts[2].nk[3]) / (m.wheel.Contacts[2].n1k[1] * m.wheel.Contacts[2].nk[1] + m.wheel.Contacts[2].n1k[2] * m.wheel.Contacts[2].nk[2] + m.wheel.Contacts[2].n1k[3] * m.wheel.Contacts[2].nk[3]);
    m.wheel.Contacts[2].OBPB[1] = (-m.wheel.Contacts[2].n1j[1]) * m.wheel.Contacts[2].R;
    m.wheel.Contacts[2].OBPB[2] = (-m.wheel.Contacts[2].n1j[2]) * m.wheel.Contacts[2].R;
    m.wheel.Contacts[2].OBPB[3] = (-m.wheel.Contacts[2].n1j[3]) * m.wheel.Contacts[2].R;
    if noEvent(m.wheel.Contacts[2].cosBtwAxisAndVert > 0.0) then
      m.wheel.Contacts[2].rB[1] = m.wheel.Contacts[2].InPortB.r[1] - m.wheel.Contacts[2].ni[1] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].rB[2] = m.wheel.Contacts[2].InPortB.r[2] - m.wheel.Contacts[2].ni[2] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].rB[3] = m.wheel.Contacts[2].InPortB.r[3] - m.wheel.Contacts[2].ni[3] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].j = 2.0;
    else
      m.wheel.Contacts[2].rB[1] = m.wheel.Contacts[2].InPortB.r[1] + m.wheel.Contacts[2].ni[1] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].rB[2] = m.wheel.Contacts[2].InPortB.r[2] + m.wheel.Contacts[2].ni[2] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].rB[3] = m.wheel.Contacts[2].InPortB.r[3] + m.wheel.Contacts[2].ni[3] * m.wheel.Contacts[2].L2;
      m.wheel.Contacts[2].j = 3.0;
    end if;
  end if;
  m.wheel.Contacts[2].rA[1] = m.wheel.Contacts[2].rB[1];
  m.wheel.Contacts[2].rA[2] = 0.0;
  m.wheel.Contacts[2].rA[3] = m.wheel.Contacts[2].rB[3];
  m.wheel.Contacts[2].OutPortA.F[1] + m.wheel.Contacts[2].OutPortB.F[1] = 0.0;
  m.wheel.Contacts[2].OutPortA.F[2] + m.wheel.Contacts[2].OutPortB.F[2] = 0.0;
  m.wheel.Contacts[2].OutPortA.F[3] + m.wheel.Contacts[2].OutPortB.F[3] = 0.0;
  m.wheel.Contacts[2].OutPortA.M[1] + m.wheel.Contacts[2].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[2].OutPortA.M[2] + m.wheel.Contacts[2].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[2].OutPortA.M[3] + m.wheel.Contacts[2].OutPortB.M[3] = 0.0;
  if noEvent(abs(m.wheel.Contacts[3].cosBtwAxisAndVert) < m.wheel.Contacts[3].cos_of_max) and noEvent(m.wheel.Contacts[3].InPortB.r[2] < m.wheel.Contacts[3].R) then
    m.wheel.Contacts[3].isInContact = 1.0;
    m.wheel.Contacts[3].Drelvn = 0.0;
    m.wheel.Contacts[3].Forcet[1] = m.wheel.Contacts[3].nA[1] * m.wheel.Contacts[3].mu - m.wheel.Contacts[3].relvt[1] * m.wheel.Contacts[3].fric * (if noEvent(m.wheel.Contacts[3].relvtsqrt <= m.wheel.Contacts[3].delta) then 1.0 / m.wheel.Contacts[3].delta else 1.0 / m.wheel.Contacts[3].relvtsqrt) * m.wheel.Contacts[3].Forcen;
    m.wheel.Contacts[3].Forcet[2] = m.wheel.Contacts[3].nA[2] * m.wheel.Contacts[3].mu - m.wheel.Contacts[3].relvt[2] * m.wheel.Contacts[3].fric * (if noEvent(m.wheel.Contacts[3].relvtsqrt <= m.wheel.Contacts[3].delta) then 1.0 / m.wheel.Contacts[3].delta else 1.0 / m.wheel.Contacts[3].relvtsqrt) * m.wheel.Contacts[3].Forcen;
    m.wheel.Contacts[3].Forcet[3] = m.wheel.Contacts[3].nA[3] * m.wheel.Contacts[3].mu - m.wheel.Contacts[3].relvt[3] * m.wheel.Contacts[3].fric * (if noEvent(m.wheel.Contacts[3].relvtsqrt <= m.wheel.Contacts[3].delta) then 1.0 / m.wheel.Contacts[3].delta else 1.0 / m.wheel.Contacts[3].relvtsqrt) * m.wheel.Contacts[3].Forcen;
  else
    m.wheel.Contacts[3].isInContact = 0.0;
    m.wheel.Contacts[3].Forcen = 0.0;
    m.wheel.Contacts[3].Forcet[1] = 0.0;
    m.wheel.Contacts[3].Forcet[2] = 0.0;
    m.wheel.Contacts[3].Forcet[3] = 0.0;
  end if;
  m.wheel.Contacts[3].Drelvn = der(m.wheel.Contacts[3].relvn);
  m.wheel.Contacts[3].Forcen = m.wheel.Contacts[3].OutPortB.F[1] * m.wheel.Contacts[3].nA[1] + m.wheel.Contacts[3].OutPortB.F[2] * m.wheel.Contacts[3].nA[2] + m.wheel.Contacts[3].OutPortB.F[3] * m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].OutPortB.F[1] = m.wheel.Contacts[3].Forcet[1] + m.wheel.Contacts[3].nA[1] * m.wheel.Contacts[3].Forcen;
  m.wheel.Contacts[3].OutPortB.F[2] = m.wheel.Contacts[3].Forcet[2] + m.wheel.Contacts[3].nA[2] * m.wheel.Contacts[3].Forcen;
  m.wheel.Contacts[3].OutPortB.F[3] = m.wheel.Contacts[3].Forcet[3] + m.wheel.Contacts[3].nA[3] * m.wheel.Contacts[3].Forcen;
  m.wheel.Contacts[3].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[3].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[3].OutPortB.M[3] = 0.0;
  m.wheel.Contacts[3].vA = MbsLite.Util.Euler({m.wheel.Contacts[3].InPortA.r[1], m.wheel.Contacts[3].InPortA.r[2], m.wheel.Contacts[3].InPortA.r[3]}, {m.wheel.Contacts[3].rA[1], m.wheel.Contacts[3].rA[2], m.wheel.Contacts[3].rA[3]}, {m.wheel.Contacts[3].InPortA.v[1], m.wheel.Contacts[3].InPortA.v[2], m.wheel.Contacts[3].InPortA.v[3]}, {m.wheel.Contacts[3].InPortA.omega[1], m.wheel.Contacts[3].InPortA.omega[2], m.wheel.Contacts[3].InPortA.omega[3]});
  m.wheel.Contacts[3].vB = MbsLite.Util.Euler({m.wheel.Contacts[3].InPortB.r[1], m.wheel.Contacts[3].InPortB.r[2], m.wheel.Contacts[3].InPortB.r[3]}, {m.wheel.Contacts[3].rB[1], m.wheel.Contacts[3].rB[2], m.wheel.Contacts[3].rB[3]}, {m.wheel.Contacts[3].InPortB.v[1], m.wheel.Contacts[3].InPortB.v[2], m.wheel.Contacts[3].InPortB.v[3]}, {m.wheel.Contacts[3].InPortB.omega[1], m.wheel.Contacts[3].InPortB.omega[2], m.wheel.Contacts[3].InPortB.omega[3]});
  m.wheel.Contacts[3].relv[1] = m.wheel.Contacts[3].vB[1] - m.wheel.Contacts[3].vA[1];
  m.wheel.Contacts[3].relv[2] = m.wheel.Contacts[3].vB[2] - m.wheel.Contacts[3].vA[2];
  m.wheel.Contacts[3].relv[3] = m.wheel.Contacts[3].vB[3] - m.wheel.Contacts[3].vA[3];
  m.wheel.Contacts[3].vAn = m.wheel.Contacts[3].vA[1] * m.wheel.Contacts[3].nA[1] + m.wheel.Contacts[3].vA[2] * m.wheel.Contacts[3].nA[2] + m.wheel.Contacts[3].vA[3] * m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].vBn = m.wheel.Contacts[3].vB[1] * m.wheel.Contacts[3].nA[1] + m.wheel.Contacts[3].vB[2] * m.wheel.Contacts[3].nA[2] + m.wheel.Contacts[3].vB[3] * m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].relvn = m.wheel.Contacts[3].relv[1] * m.wheel.Contacts[3].nA[1] + m.wheel.Contacts[3].relv[2] * m.wheel.Contacts[3].nA[2] + m.wheel.Contacts[3].relv[3] * m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].vAt[1] = m.wheel.Contacts[3].vA[1] - m.wheel.Contacts[3].nA[1] * m.wheel.Contacts[3].vAn;
  m.wheel.Contacts[3].vAt[2] = m.wheel.Contacts[3].vA[2] - m.wheel.Contacts[3].nA[2] * m.wheel.Contacts[3].vAn;
  m.wheel.Contacts[3].vAt[3] = m.wheel.Contacts[3].vA[3] - m.wheel.Contacts[3].nA[3] * m.wheel.Contacts[3].vAn;
  m.wheel.Contacts[3].vBt[1] = m.wheel.Contacts[3].vB[1] - m.wheel.Contacts[3].nA[1] * m.wheel.Contacts[3].vBn;
  m.wheel.Contacts[3].vBt[2] = m.wheel.Contacts[3].vB[2] - m.wheel.Contacts[3].nA[2] * m.wheel.Contacts[3].vBn;
  m.wheel.Contacts[3].vBt[3] = m.wheel.Contacts[3].vB[3] - m.wheel.Contacts[3].nA[3] * m.wheel.Contacts[3].vBn;
  m.wheel.Contacts[3].relvt[1] = m.wheel.Contacts[3].vBt[1] - m.wheel.Contacts[3].vAt[1];
  m.wheel.Contacts[3].relvt[2] = m.wheel.Contacts[3].vBt[2] - m.wheel.Contacts[3].vAt[2];
  m.wheel.Contacts[3].relvt[3] = m.wheel.Contacts[3].vBt[3] - m.wheel.Contacts[3].vAt[3];
  m.wheel.Contacts[3].relvtsqrt = Modelica.Math.Vectors.norm({m.wheel.Contacts[3].relvt[1], m.wheel.Contacts[3].relvt[2], m.wheel.Contacts[3].relvt[3]}, 2.0);
  m.wheel.Contacts[3].OutPortA.P[1] = m.wheel.Contacts[3].rA[1];
  m.wheel.Contacts[3].OutPortA.P[2] = m.wheel.Contacts[3].rA[2];
  m.wheel.Contacts[3].OutPortA.P[3] = m.wheel.Contacts[3].rA[3];
  m.wheel.Contacts[3].OutPortB.P[1] = m.wheel.Contacts[3].rB[1];
  m.wheel.Contacts[3].OutPortB.P[2] = m.wheel.Contacts[3].rB[2];
  m.wheel.Contacts[3].OutPortB.P[3] = m.wheel.Contacts[3].rB[3];
  m.wheel.Contacts[3].n1j[1] = m.wheel.Contacts[3].nA[1];
  m.wheel.Contacts[3].n1j[2] = m.wheel.Contacts[3].nA[2];
  m.wheel.Contacts[3].n1j[3] = m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].ni[1] = m.wheel.Contacts[3].InPortB.T[1,1] * m.wheel.Contacts[3].i[1] + m.wheel.Contacts[3].InPortB.T[1,2] * m.wheel.Contacts[3].i[2] + m.wheel.Contacts[3].InPortB.T[1,3] * m.wheel.Contacts[3].i[3];
  m.wheel.Contacts[3].ni[2] = m.wheel.Contacts[3].InPortB.T[2,1] * m.wheel.Contacts[3].i[1] + m.wheel.Contacts[3].InPortB.T[2,2] * m.wheel.Contacts[3].i[2] + m.wheel.Contacts[3].InPortB.T[2,3] * m.wheel.Contacts[3].i[3];
  m.wheel.Contacts[3].ni[3] = m.wheel.Contacts[3].InPortB.T[3,1] * m.wheel.Contacts[3].i[1] + m.wheel.Contacts[3].InPortB.T[3,2] * m.wheel.Contacts[3].i[2] + m.wheel.Contacts[3].InPortB.T[3,3] * m.wheel.Contacts[3].i[3];
  m.wheel.Contacts[3].crs[1] = m.wheel.Contacts[3].ni[2] * m.wheel.Contacts[3].nA[3] - m.wheel.Contacts[3].ni[3] * m.wheel.Contacts[3].nA[2];
  m.wheel.Contacts[3].crs[2] = m.wheel.Contacts[3].ni[3] * m.wheel.Contacts[3].nA[1] - m.wheel.Contacts[3].ni[1] * m.wheel.Contacts[3].nA[3];
  m.wheel.Contacts[3].crs[3] = m.wheel.Contacts[3].ni[1] * m.wheel.Contacts[3].nA[2] - m.wheel.Contacts[3].ni[2] * m.wheel.Contacts[3].nA[1];
  m.wheel.Contacts[3].nk[1] = m.wheel.Contacts[3].crs[1] / sqrt(m.wheel.Contacts[3].crs[1] ^ 2.0 + m.wheel.Contacts[3].crs[2] ^ 2.0 + m.wheel.Contacts[3].crs[3] ^ 2.0);
  m.wheel.Contacts[3].nk[2] = m.wheel.Contacts[3].crs[2] / sqrt(m.wheel.Contacts[3].crs[1] ^ 2.0 + m.wheel.Contacts[3].crs[2] ^ 2.0 + m.wheel.Contacts[3].crs[3] ^ 2.0);
  m.wheel.Contacts[3].nk[3] = m.wheel.Contacts[3].crs[3] / sqrt(m.wheel.Contacts[3].crs[1] ^ 2.0 + m.wheel.Contacts[3].crs[2] ^ 2.0 + m.wheel.Contacts[3].crs[3] ^ 2.0);
  m.wheel.Contacts[3].cosBtwAxisAndVert = m.wheel.Contacts[3].ni[1] * m.wheel.Contacts[3].nA[1] + m.wheel.Contacts[3].ni[2] * m.wheel.Contacts[3].nA[2] + m.wheel.Contacts[3].ni[3] * m.wheel.Contacts[3].nA[3];
  if noEvent(abs(m.wheel.Contacts[3].cosBtwAxisAndVert) < m.wheel.Contacts[3].cos_of_max) and noEvent(m.wheel.Contacts[3].InPortB.r[2] < m.wheel.Contacts[3].R) then
    m.wheel.Contacts[3].lambda = (m.wheel.Contacts[3].R * (m.wheel.Contacts[3].n1j[1] * m.wheel.Contacts[3].nk[1] + m.wheel.Contacts[3].n1j[2] * m.wheel.Contacts[3].nk[2] + m.wheel.Contacts[3].n1j[3] * m.wheel.Contacts[3].nk[3]) - m.wheel.Contacts[3].R1 * (m.wheel.Contacts[3].rho[1] * m.wheel.Contacts[3].nk[1] + m.wheel.Contacts[3].rho[2] * m.wheel.Contacts[3].nk[2] + m.wheel.Contacts[3].rho[3] * m.wheel.Contacts[3].nk[3])) / (m.wheel.Contacts[3].n1k[1] * m.wheel.Contacts[3].nk[1] + m.wheel.Contacts[3].n1k[2] * m.wheel.Contacts[3].nk[2] + m.wheel.Contacts[3].n1k[3] * m.wheel.Contacts[3].nk[3]);
    m.wheel.Contacts[3].OBPB[1] = m.wheel.Contacts[3].n1k[1] * m.wheel.Contacts[3].lambda - m.wheel.Contacts[3].n1j[1] * m.wheel.Contacts[3].R + m.wheel.Contacts[3].rho[1] * m.wheel.Contacts[3].R1;
    m.wheel.Contacts[3].OBPB[2] = m.wheel.Contacts[3].n1k[2] * m.wheel.Contacts[3].lambda - m.wheel.Contacts[3].n1j[2] * m.wheel.Contacts[3].R + m.wheel.Contacts[3].rho[2] * m.wheel.Contacts[3].R1;
    m.wheel.Contacts[3].OBPB[3] = m.wheel.Contacts[3].n1k[3] * m.wheel.Contacts[3].lambda - m.wheel.Contacts[3].n1j[3] * m.wheel.Contacts[3].R + m.wheel.Contacts[3].rho[3] * m.wheel.Contacts[3].R1;
    m.wheel.Contacts[3].rB[1] = m.wheel.Contacts[3].InPortB.r[1] + m.wheel.Contacts[3].OBPB[1];
    m.wheel.Contacts[3].rB[2] = m.wheel.Contacts[3].InPortB.r[2] + m.wheel.Contacts[3].OBPB[2];
    m.wheel.Contacts[3].rB[3] = m.wheel.Contacts[3].InPortB.r[3] + m.wheel.Contacts[3].OBPB[3];
    m.wheel.Contacts[3].j = 1.0;
  else
    m.wheel.Contacts[3].lambda = m.wheel.Contacts[3].R * (m.wheel.Contacts[3].n1j[1] * m.wheel.Contacts[3].nk[1] + m.wheel.Contacts[3].n1j[2] * m.wheel.Contacts[3].nk[2] + m.wheel.Contacts[3].n1j[3] * m.wheel.Contacts[3].nk[3]) / (m.wheel.Contacts[3].n1k[1] * m.wheel.Contacts[3].nk[1] + m.wheel.Contacts[3].n1k[2] * m.wheel.Contacts[3].nk[2] + m.wheel.Contacts[3].n1k[3] * m.wheel.Contacts[3].nk[3]);
    m.wheel.Contacts[3].OBPB[1] = (-m.wheel.Contacts[3].n1j[1]) * m.wheel.Contacts[3].R;
    m.wheel.Contacts[3].OBPB[2] = (-m.wheel.Contacts[3].n1j[2]) * m.wheel.Contacts[3].R;
    m.wheel.Contacts[3].OBPB[3] = (-m.wheel.Contacts[3].n1j[3]) * m.wheel.Contacts[3].R;
    if noEvent(m.wheel.Contacts[3].cosBtwAxisAndVert > 0.0) then
      m.wheel.Contacts[3].rB[1] = m.wheel.Contacts[3].InPortB.r[1] - m.wheel.Contacts[3].ni[1] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].rB[2] = m.wheel.Contacts[3].InPortB.r[2] - m.wheel.Contacts[3].ni[2] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].rB[3] = m.wheel.Contacts[3].InPortB.r[3] - m.wheel.Contacts[3].ni[3] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].j = 2.0;
    else
      m.wheel.Contacts[3].rB[1] = m.wheel.Contacts[3].InPortB.r[1] + m.wheel.Contacts[3].ni[1] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].rB[2] = m.wheel.Contacts[3].InPortB.r[2] + m.wheel.Contacts[3].ni[2] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].rB[3] = m.wheel.Contacts[3].InPortB.r[3] + m.wheel.Contacts[3].ni[3] * m.wheel.Contacts[3].L2;
      m.wheel.Contacts[3].j = 3.0;
    end if;
  end if;
  m.wheel.Contacts[3].rA[1] = m.wheel.Contacts[3].rB[1];
  m.wheel.Contacts[3].rA[2] = 0.0;
  m.wheel.Contacts[3].rA[3] = m.wheel.Contacts[3].rB[3];
  m.wheel.Contacts[3].OutPortA.F[1] + m.wheel.Contacts[3].OutPortB.F[1] = 0.0;
  m.wheel.Contacts[3].OutPortA.F[2] + m.wheel.Contacts[3].OutPortB.F[2] = 0.0;
  m.wheel.Contacts[3].OutPortA.F[3] + m.wheel.Contacts[3].OutPortB.F[3] = 0.0;
  m.wheel.Contacts[3].OutPortA.M[1] + m.wheel.Contacts[3].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[3].OutPortA.M[2] + m.wheel.Contacts[3].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[3].OutPortA.M[3] + m.wheel.Contacts[3].OutPortB.M[3] = 0.0;
  if noEvent(abs(m.wheel.Contacts[4].cosBtwAxisAndVert) < m.wheel.Contacts[4].cos_of_max) and noEvent(m.wheel.Contacts[4].InPortB.r[2] < m.wheel.Contacts[4].R) then
    m.wheel.Contacts[4].isInContact = 1.0;
    m.wheel.Contacts[4].Drelvn = 0.0;
    m.wheel.Contacts[4].Forcet[1] = m.wheel.Contacts[4].nA[1] * m.wheel.Contacts[4].mu - m.wheel.Contacts[4].relvt[1] * m.wheel.Contacts[4].fric * (if noEvent(m.wheel.Contacts[4].relvtsqrt <= m.wheel.Contacts[4].delta) then 1.0 / m.wheel.Contacts[4].delta else 1.0 / m.wheel.Contacts[4].relvtsqrt) * m.wheel.Contacts[4].Forcen;
    m.wheel.Contacts[4].Forcet[2] = m.wheel.Contacts[4].nA[2] * m.wheel.Contacts[4].mu - m.wheel.Contacts[4].relvt[2] * m.wheel.Contacts[4].fric * (if noEvent(m.wheel.Contacts[4].relvtsqrt <= m.wheel.Contacts[4].delta) then 1.0 / m.wheel.Contacts[4].delta else 1.0 / m.wheel.Contacts[4].relvtsqrt) * m.wheel.Contacts[4].Forcen;
    m.wheel.Contacts[4].Forcet[3] = m.wheel.Contacts[4].nA[3] * m.wheel.Contacts[4].mu - m.wheel.Contacts[4].relvt[3] * m.wheel.Contacts[4].fric * (if noEvent(m.wheel.Contacts[4].relvtsqrt <= m.wheel.Contacts[4].delta) then 1.0 / m.wheel.Contacts[4].delta else 1.0 / m.wheel.Contacts[4].relvtsqrt) * m.wheel.Contacts[4].Forcen;
  else
    m.wheel.Contacts[4].isInContact = 0.0;
    m.wheel.Contacts[4].Forcen = 0.0;
    m.wheel.Contacts[4].Forcet[1] = 0.0;
    m.wheel.Contacts[4].Forcet[2] = 0.0;
    m.wheel.Contacts[4].Forcet[3] = 0.0;
  end if;
  m.wheel.Contacts[4].Drelvn = der(m.wheel.Contacts[4].relvn);
  m.wheel.Contacts[4].Forcen = m.wheel.Contacts[4].OutPortB.F[1] * m.wheel.Contacts[4].nA[1] + m.wheel.Contacts[4].OutPortB.F[2] * m.wheel.Contacts[4].nA[2] + m.wheel.Contacts[4].OutPortB.F[3] * m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].OutPortB.F[1] = m.wheel.Contacts[4].Forcet[1] + m.wheel.Contacts[4].nA[1] * m.wheel.Contacts[4].Forcen;
  m.wheel.Contacts[4].OutPortB.F[2] = m.wheel.Contacts[4].Forcet[2] + m.wheel.Contacts[4].nA[2] * m.wheel.Contacts[4].Forcen;
  m.wheel.Contacts[4].OutPortB.F[3] = m.wheel.Contacts[4].Forcet[3] + m.wheel.Contacts[4].nA[3] * m.wheel.Contacts[4].Forcen;
  m.wheel.Contacts[4].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[4].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[4].OutPortB.M[3] = 0.0;
  m.wheel.Contacts[4].vA = MbsLite.Util.Euler({m.wheel.Contacts[4].InPortA.r[1], m.wheel.Contacts[4].InPortA.r[2], m.wheel.Contacts[4].InPortA.r[3]}, {m.wheel.Contacts[4].rA[1], m.wheel.Contacts[4].rA[2], m.wheel.Contacts[4].rA[3]}, {m.wheel.Contacts[4].InPortA.v[1], m.wheel.Contacts[4].InPortA.v[2], m.wheel.Contacts[4].InPortA.v[3]}, {m.wheel.Contacts[4].InPortA.omega[1], m.wheel.Contacts[4].InPortA.omega[2], m.wheel.Contacts[4].InPortA.omega[3]});
  m.wheel.Contacts[4].vB = MbsLite.Util.Euler({m.wheel.Contacts[4].InPortB.r[1], m.wheel.Contacts[4].InPortB.r[2], m.wheel.Contacts[4].InPortB.r[3]}, {m.wheel.Contacts[4].rB[1], m.wheel.Contacts[4].rB[2], m.wheel.Contacts[4].rB[3]}, {m.wheel.Contacts[4].InPortB.v[1], m.wheel.Contacts[4].InPortB.v[2], m.wheel.Contacts[4].InPortB.v[3]}, {m.wheel.Contacts[4].InPortB.omega[1], m.wheel.Contacts[4].InPortB.omega[2], m.wheel.Contacts[4].InPortB.omega[3]});
  m.wheel.Contacts[4].relv[1] = m.wheel.Contacts[4].vB[1] - m.wheel.Contacts[4].vA[1];
  m.wheel.Contacts[4].relv[2] = m.wheel.Contacts[4].vB[2] - m.wheel.Contacts[4].vA[2];
  m.wheel.Contacts[4].relv[3] = m.wheel.Contacts[4].vB[3] - m.wheel.Contacts[4].vA[3];
  m.wheel.Contacts[4].vAn = m.wheel.Contacts[4].vA[1] * m.wheel.Contacts[4].nA[1] + m.wheel.Contacts[4].vA[2] * m.wheel.Contacts[4].nA[2] + m.wheel.Contacts[4].vA[3] * m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].vBn = m.wheel.Contacts[4].vB[1] * m.wheel.Contacts[4].nA[1] + m.wheel.Contacts[4].vB[2] * m.wheel.Contacts[4].nA[2] + m.wheel.Contacts[4].vB[3] * m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].relvn = m.wheel.Contacts[4].relv[1] * m.wheel.Contacts[4].nA[1] + m.wheel.Contacts[4].relv[2] * m.wheel.Contacts[4].nA[2] + m.wheel.Contacts[4].relv[3] * m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].vAt[1] = m.wheel.Contacts[4].vA[1] - m.wheel.Contacts[4].nA[1] * m.wheel.Contacts[4].vAn;
  m.wheel.Contacts[4].vAt[2] = m.wheel.Contacts[4].vA[2] - m.wheel.Contacts[4].nA[2] * m.wheel.Contacts[4].vAn;
  m.wheel.Contacts[4].vAt[3] = m.wheel.Contacts[4].vA[3] - m.wheel.Contacts[4].nA[3] * m.wheel.Contacts[4].vAn;
  m.wheel.Contacts[4].vBt[1] = m.wheel.Contacts[4].vB[1] - m.wheel.Contacts[4].nA[1] * m.wheel.Contacts[4].vBn;
  m.wheel.Contacts[4].vBt[2] = m.wheel.Contacts[4].vB[2] - m.wheel.Contacts[4].nA[2] * m.wheel.Contacts[4].vBn;
  m.wheel.Contacts[4].vBt[3] = m.wheel.Contacts[4].vB[3] - m.wheel.Contacts[4].nA[3] * m.wheel.Contacts[4].vBn;
  m.wheel.Contacts[4].relvt[1] = m.wheel.Contacts[4].vBt[1] - m.wheel.Contacts[4].vAt[1];
  m.wheel.Contacts[4].relvt[2] = m.wheel.Contacts[4].vBt[2] - m.wheel.Contacts[4].vAt[2];
  m.wheel.Contacts[4].relvt[3] = m.wheel.Contacts[4].vBt[3] - m.wheel.Contacts[4].vAt[3];
  m.wheel.Contacts[4].relvtsqrt = Modelica.Math.Vectors.norm({m.wheel.Contacts[4].relvt[1], m.wheel.Contacts[4].relvt[2], m.wheel.Contacts[4].relvt[3]}, 2.0);
  m.wheel.Contacts[4].OutPortA.P[1] = m.wheel.Contacts[4].rA[1];
  m.wheel.Contacts[4].OutPortA.P[2] = m.wheel.Contacts[4].rA[2];
  m.wheel.Contacts[4].OutPortA.P[3] = m.wheel.Contacts[4].rA[3];
  m.wheel.Contacts[4].OutPortB.P[1] = m.wheel.Contacts[4].rB[1];
  m.wheel.Contacts[4].OutPortB.P[2] = m.wheel.Contacts[4].rB[2];
  m.wheel.Contacts[4].OutPortB.P[3] = m.wheel.Contacts[4].rB[3];
  m.wheel.Contacts[4].n1j[1] = m.wheel.Contacts[4].nA[1];
  m.wheel.Contacts[4].n1j[2] = m.wheel.Contacts[4].nA[2];
  m.wheel.Contacts[4].n1j[3] = m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].ni[1] = m.wheel.Contacts[4].InPortB.T[1,1] * m.wheel.Contacts[4].i[1] + m.wheel.Contacts[4].InPortB.T[1,2] * m.wheel.Contacts[4].i[2] + m.wheel.Contacts[4].InPortB.T[1,3] * m.wheel.Contacts[4].i[3];
  m.wheel.Contacts[4].ni[2] = m.wheel.Contacts[4].InPortB.T[2,1] * m.wheel.Contacts[4].i[1] + m.wheel.Contacts[4].InPortB.T[2,2] * m.wheel.Contacts[4].i[2] + m.wheel.Contacts[4].InPortB.T[2,3] * m.wheel.Contacts[4].i[3];
  m.wheel.Contacts[4].ni[3] = m.wheel.Contacts[4].InPortB.T[3,1] * m.wheel.Contacts[4].i[1] + m.wheel.Contacts[4].InPortB.T[3,2] * m.wheel.Contacts[4].i[2] + m.wheel.Contacts[4].InPortB.T[3,3] * m.wheel.Contacts[4].i[3];
  m.wheel.Contacts[4].crs[1] = m.wheel.Contacts[4].ni[2] * m.wheel.Contacts[4].nA[3] - m.wheel.Contacts[4].ni[3] * m.wheel.Contacts[4].nA[2];
  m.wheel.Contacts[4].crs[2] = m.wheel.Contacts[4].ni[3] * m.wheel.Contacts[4].nA[1] - m.wheel.Contacts[4].ni[1] * m.wheel.Contacts[4].nA[3];
  m.wheel.Contacts[4].crs[3] = m.wheel.Contacts[4].ni[1] * m.wheel.Contacts[4].nA[2] - m.wheel.Contacts[4].ni[2] * m.wheel.Contacts[4].nA[1];
  m.wheel.Contacts[4].nk[1] = m.wheel.Contacts[4].crs[1] / sqrt(m.wheel.Contacts[4].crs[1] ^ 2.0 + m.wheel.Contacts[4].crs[2] ^ 2.0 + m.wheel.Contacts[4].crs[3] ^ 2.0);
  m.wheel.Contacts[4].nk[2] = m.wheel.Contacts[4].crs[2] / sqrt(m.wheel.Contacts[4].crs[1] ^ 2.0 + m.wheel.Contacts[4].crs[2] ^ 2.0 + m.wheel.Contacts[4].crs[3] ^ 2.0);
  m.wheel.Contacts[4].nk[3] = m.wheel.Contacts[4].crs[3] / sqrt(m.wheel.Contacts[4].crs[1] ^ 2.0 + m.wheel.Contacts[4].crs[2] ^ 2.0 + m.wheel.Contacts[4].crs[3] ^ 2.0);
  m.wheel.Contacts[4].cosBtwAxisAndVert = m.wheel.Contacts[4].ni[1] * m.wheel.Contacts[4].nA[1] + m.wheel.Contacts[4].ni[2] * m.wheel.Contacts[4].nA[2] + m.wheel.Contacts[4].ni[3] * m.wheel.Contacts[4].nA[3];
  if noEvent(abs(m.wheel.Contacts[4].cosBtwAxisAndVert) < m.wheel.Contacts[4].cos_of_max) and noEvent(m.wheel.Contacts[4].InPortB.r[2] < m.wheel.Contacts[4].R) then
    m.wheel.Contacts[4].lambda = (m.wheel.Contacts[4].R * (m.wheel.Contacts[4].n1j[1] * m.wheel.Contacts[4].nk[1] + m.wheel.Contacts[4].n1j[2] * m.wheel.Contacts[4].nk[2] + m.wheel.Contacts[4].n1j[3] * m.wheel.Contacts[4].nk[3]) - m.wheel.Contacts[4].R1 * (m.wheel.Contacts[4].rho[1] * m.wheel.Contacts[4].nk[1] + m.wheel.Contacts[4].rho[2] * m.wheel.Contacts[4].nk[2] + m.wheel.Contacts[4].rho[3] * m.wheel.Contacts[4].nk[3])) / (m.wheel.Contacts[4].n1k[1] * m.wheel.Contacts[4].nk[1] + m.wheel.Contacts[4].n1k[2] * m.wheel.Contacts[4].nk[2] + m.wheel.Contacts[4].n1k[3] * m.wheel.Contacts[4].nk[3]);
    m.wheel.Contacts[4].OBPB[1] = m.wheel.Contacts[4].n1k[1] * m.wheel.Contacts[4].lambda - m.wheel.Contacts[4].n1j[1] * m.wheel.Contacts[4].R + m.wheel.Contacts[4].rho[1] * m.wheel.Contacts[4].R1;
    m.wheel.Contacts[4].OBPB[2] = m.wheel.Contacts[4].n1k[2] * m.wheel.Contacts[4].lambda - m.wheel.Contacts[4].n1j[2] * m.wheel.Contacts[4].R + m.wheel.Contacts[4].rho[2] * m.wheel.Contacts[4].R1;
    m.wheel.Contacts[4].OBPB[3] = m.wheel.Contacts[4].n1k[3] * m.wheel.Contacts[4].lambda - m.wheel.Contacts[4].n1j[3] * m.wheel.Contacts[4].R + m.wheel.Contacts[4].rho[3] * m.wheel.Contacts[4].R1;
    m.wheel.Contacts[4].rB[1] = m.wheel.Contacts[4].InPortB.r[1] + m.wheel.Contacts[4].OBPB[1];
    m.wheel.Contacts[4].rB[2] = m.wheel.Contacts[4].InPortB.r[2] + m.wheel.Contacts[4].OBPB[2];
    m.wheel.Contacts[4].rB[3] = m.wheel.Contacts[4].InPortB.r[3] + m.wheel.Contacts[4].OBPB[3];
    m.wheel.Contacts[4].j = 1.0;
  else
    m.wheel.Contacts[4].lambda = m.wheel.Contacts[4].R * (m.wheel.Contacts[4].n1j[1] * m.wheel.Contacts[4].nk[1] + m.wheel.Contacts[4].n1j[2] * m.wheel.Contacts[4].nk[2] + m.wheel.Contacts[4].n1j[3] * m.wheel.Contacts[4].nk[3]) / (m.wheel.Contacts[4].n1k[1] * m.wheel.Contacts[4].nk[1] + m.wheel.Contacts[4].n1k[2] * m.wheel.Contacts[4].nk[2] + m.wheel.Contacts[4].n1k[3] * m.wheel.Contacts[4].nk[3]);
    m.wheel.Contacts[4].OBPB[1] = (-m.wheel.Contacts[4].n1j[1]) * m.wheel.Contacts[4].R;
    m.wheel.Contacts[4].OBPB[2] = (-m.wheel.Contacts[4].n1j[2]) * m.wheel.Contacts[4].R;
    m.wheel.Contacts[4].OBPB[3] = (-m.wheel.Contacts[4].n1j[3]) * m.wheel.Contacts[4].R;
    if noEvent(m.wheel.Contacts[4].cosBtwAxisAndVert > 0.0) then
      m.wheel.Contacts[4].rB[1] = m.wheel.Contacts[4].InPortB.r[1] - m.wheel.Contacts[4].ni[1] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].rB[2] = m.wheel.Contacts[4].InPortB.r[2] - m.wheel.Contacts[4].ni[2] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].rB[3] = m.wheel.Contacts[4].InPortB.r[3] - m.wheel.Contacts[4].ni[3] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].j = 2.0;
    else
      m.wheel.Contacts[4].rB[1] = m.wheel.Contacts[4].InPortB.r[1] + m.wheel.Contacts[4].ni[1] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].rB[2] = m.wheel.Contacts[4].InPortB.r[2] + m.wheel.Contacts[4].ni[2] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].rB[3] = m.wheel.Contacts[4].InPortB.r[3] + m.wheel.Contacts[4].ni[3] * m.wheel.Contacts[4].L2;
      m.wheel.Contacts[4].j = 3.0;
    end if;
  end if;
  m.wheel.Contacts[4].rA[1] = m.wheel.Contacts[4].rB[1];
  m.wheel.Contacts[4].rA[2] = 0.0;
  m.wheel.Contacts[4].rA[3] = m.wheel.Contacts[4].rB[3];
  m.wheel.Contacts[4].OutPortA.F[1] + m.wheel.Contacts[4].OutPortB.F[1] = 0.0;
  m.wheel.Contacts[4].OutPortA.F[2] + m.wheel.Contacts[4].OutPortB.F[2] = 0.0;
  m.wheel.Contacts[4].OutPortA.F[3] + m.wheel.Contacts[4].OutPortB.F[3] = 0.0;
  m.wheel.Contacts[4].OutPortA.M[1] + m.wheel.Contacts[4].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[4].OutPortA.M[2] + m.wheel.Contacts[4].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[4].OutPortA.M[3] + m.wheel.Contacts[4].OutPortB.M[3] = 0.0;
  if noEvent(abs(m.wheel.Contacts[5].cosBtwAxisAndVert) < m.wheel.Contacts[5].cos_of_max) and noEvent(m.wheel.Contacts[5].InPortB.r[2] < m.wheel.Contacts[5].R) then
    m.wheel.Contacts[5].isInContact = 1.0;
    m.wheel.Contacts[5].Drelvn = 0.0;
    m.wheel.Contacts[5].Forcet[1] = m.wheel.Contacts[5].nA[1] * m.wheel.Contacts[5].mu - m.wheel.Contacts[5].relvt[1] * m.wheel.Contacts[5].fric * (if noEvent(m.wheel.Contacts[5].relvtsqrt <= m.wheel.Contacts[5].delta) then 1.0 / m.wheel.Contacts[5].delta else 1.0 / m.wheel.Contacts[5].relvtsqrt) * m.wheel.Contacts[5].Forcen;
    m.wheel.Contacts[5].Forcet[2] = m.wheel.Contacts[5].nA[2] * m.wheel.Contacts[5].mu - m.wheel.Contacts[5].relvt[2] * m.wheel.Contacts[5].fric * (if noEvent(m.wheel.Contacts[5].relvtsqrt <= m.wheel.Contacts[5].delta) then 1.0 / m.wheel.Contacts[5].delta else 1.0 / m.wheel.Contacts[5].relvtsqrt) * m.wheel.Contacts[5].Forcen;
    m.wheel.Contacts[5].Forcet[3] = m.wheel.Contacts[5].nA[3] * m.wheel.Contacts[5].mu - m.wheel.Contacts[5].relvt[3] * m.wheel.Contacts[5].fric * (if noEvent(m.wheel.Contacts[5].relvtsqrt <= m.wheel.Contacts[5].delta) then 1.0 / m.wheel.Contacts[5].delta else 1.0 / m.wheel.Contacts[5].relvtsqrt) * m.wheel.Contacts[5].Forcen;
  else
    m.wheel.Contacts[5].isInContact = 0.0;
    m.wheel.Contacts[5].Forcen = 0.0;
    m.wheel.Contacts[5].Forcet[1] = 0.0;
    m.wheel.Contacts[5].Forcet[2] = 0.0;
    m.wheel.Contacts[5].Forcet[3] = 0.0;
  end if;
  m.wheel.Contacts[5].Drelvn = der(m.wheel.Contacts[5].relvn);
  m.wheel.Contacts[5].Forcen = m.wheel.Contacts[5].OutPortB.F[1] * m.wheel.Contacts[5].nA[1] + m.wheel.Contacts[5].OutPortB.F[2] * m.wheel.Contacts[5].nA[2] + m.wheel.Contacts[5].OutPortB.F[3] * m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].OutPortB.F[1] = m.wheel.Contacts[5].Forcet[1] + m.wheel.Contacts[5].nA[1] * m.wheel.Contacts[5].Forcen;
  m.wheel.Contacts[5].OutPortB.F[2] = m.wheel.Contacts[5].Forcet[2] + m.wheel.Contacts[5].nA[2] * m.wheel.Contacts[5].Forcen;
  m.wheel.Contacts[5].OutPortB.F[3] = m.wheel.Contacts[5].Forcet[3] + m.wheel.Contacts[5].nA[3] * m.wheel.Contacts[5].Forcen;
  m.wheel.Contacts[5].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[5].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[5].OutPortB.M[3] = 0.0;
  m.wheel.Contacts[5].vA = MbsLite.Util.Euler({m.wheel.Contacts[5].InPortA.r[1], m.wheel.Contacts[5].InPortA.r[2], m.wheel.Contacts[5].InPortA.r[3]}, {m.wheel.Contacts[5].rA[1], m.wheel.Contacts[5].rA[2], m.wheel.Contacts[5].rA[3]}, {m.wheel.Contacts[5].InPortA.v[1], m.wheel.Contacts[5].InPortA.v[2], m.wheel.Contacts[5].InPortA.v[3]}, {m.wheel.Contacts[5].InPortA.omega[1], m.wheel.Contacts[5].InPortA.omega[2], m.wheel.Contacts[5].InPortA.omega[3]});
  m.wheel.Contacts[5].vB = MbsLite.Util.Euler({m.wheel.Contacts[5].InPortB.r[1], m.wheel.Contacts[5].InPortB.r[2], m.wheel.Contacts[5].InPortB.r[3]}, {m.wheel.Contacts[5].rB[1], m.wheel.Contacts[5].rB[2], m.wheel.Contacts[5].rB[3]}, {m.wheel.Contacts[5].InPortB.v[1], m.wheel.Contacts[5].InPortB.v[2], m.wheel.Contacts[5].InPortB.v[3]}, {m.wheel.Contacts[5].InPortB.omega[1], m.wheel.Contacts[5].InPortB.omega[2], m.wheel.Contacts[5].InPortB.omega[3]});
  m.wheel.Contacts[5].relv[1] = m.wheel.Contacts[5].vB[1] - m.wheel.Contacts[5].vA[1];
  m.wheel.Contacts[5].relv[2] = m.wheel.Contacts[5].vB[2] - m.wheel.Contacts[5].vA[2];
  m.wheel.Contacts[5].relv[3] = m.wheel.Contacts[5].vB[3] - m.wheel.Contacts[5].vA[3];
  m.wheel.Contacts[5].vAn = m.wheel.Contacts[5].vA[1] * m.wheel.Contacts[5].nA[1] + m.wheel.Contacts[5].vA[2] * m.wheel.Contacts[5].nA[2] + m.wheel.Contacts[5].vA[3] * m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].vBn = m.wheel.Contacts[5].vB[1] * m.wheel.Contacts[5].nA[1] + m.wheel.Contacts[5].vB[2] * m.wheel.Contacts[5].nA[2] + m.wheel.Contacts[5].vB[3] * m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].relvn = m.wheel.Contacts[5].relv[1] * m.wheel.Contacts[5].nA[1] + m.wheel.Contacts[5].relv[2] * m.wheel.Contacts[5].nA[2] + m.wheel.Contacts[5].relv[3] * m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].vAt[1] = m.wheel.Contacts[5].vA[1] - m.wheel.Contacts[5].nA[1] * m.wheel.Contacts[5].vAn;
  m.wheel.Contacts[5].vAt[2] = m.wheel.Contacts[5].vA[2] - m.wheel.Contacts[5].nA[2] * m.wheel.Contacts[5].vAn;
  m.wheel.Contacts[5].vAt[3] = m.wheel.Contacts[5].vA[3] - m.wheel.Contacts[5].nA[3] * m.wheel.Contacts[5].vAn;
  m.wheel.Contacts[5].vBt[1] = m.wheel.Contacts[5].vB[1] - m.wheel.Contacts[5].nA[1] * m.wheel.Contacts[5].vBn;
  m.wheel.Contacts[5].vBt[2] = m.wheel.Contacts[5].vB[2] - m.wheel.Contacts[5].nA[2] * m.wheel.Contacts[5].vBn;
  m.wheel.Contacts[5].vBt[3] = m.wheel.Contacts[5].vB[3] - m.wheel.Contacts[5].nA[3] * m.wheel.Contacts[5].vBn;
  m.wheel.Contacts[5].relvt[1] = m.wheel.Contacts[5].vBt[1] - m.wheel.Contacts[5].vAt[1];
  m.wheel.Contacts[5].relvt[2] = m.wheel.Contacts[5].vBt[2] - m.wheel.Contacts[5].vAt[2];
  m.wheel.Contacts[5].relvt[3] = m.wheel.Contacts[5].vBt[3] - m.wheel.Contacts[5].vAt[3];
  m.wheel.Contacts[5].relvtsqrt = Modelica.Math.Vectors.norm({m.wheel.Contacts[5].relvt[1], m.wheel.Contacts[5].relvt[2], m.wheel.Contacts[5].relvt[3]}, 2.0);
  m.wheel.Contacts[5].OutPortA.P[1] = m.wheel.Contacts[5].rA[1];
  m.wheel.Contacts[5].OutPortA.P[2] = m.wheel.Contacts[5].rA[2];
  m.wheel.Contacts[5].OutPortA.P[3] = m.wheel.Contacts[5].rA[3];
  m.wheel.Contacts[5].OutPortB.P[1] = m.wheel.Contacts[5].rB[1];
  m.wheel.Contacts[5].OutPortB.P[2] = m.wheel.Contacts[5].rB[2];
  m.wheel.Contacts[5].OutPortB.P[3] = m.wheel.Contacts[5].rB[3];
  m.wheel.Contacts[5].n1j[1] = m.wheel.Contacts[5].nA[1];
  m.wheel.Contacts[5].n1j[2] = m.wheel.Contacts[5].nA[2];
  m.wheel.Contacts[5].n1j[3] = m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].ni[1] = m.wheel.Contacts[5].InPortB.T[1,1] * m.wheel.Contacts[5].i[1] + m.wheel.Contacts[5].InPortB.T[1,2] * m.wheel.Contacts[5].i[2] + m.wheel.Contacts[5].InPortB.T[1,3] * m.wheel.Contacts[5].i[3];
  m.wheel.Contacts[5].ni[2] = m.wheel.Contacts[5].InPortB.T[2,1] * m.wheel.Contacts[5].i[1] + m.wheel.Contacts[5].InPortB.T[2,2] * m.wheel.Contacts[5].i[2] + m.wheel.Contacts[5].InPortB.T[2,3] * m.wheel.Contacts[5].i[3];
  m.wheel.Contacts[5].ni[3] = m.wheel.Contacts[5].InPortB.T[3,1] * m.wheel.Contacts[5].i[1] + m.wheel.Contacts[5].InPortB.T[3,2] * m.wheel.Contacts[5].i[2] + m.wheel.Contacts[5].InPortB.T[3,3] * m.wheel.Contacts[5].i[3];
  m.wheel.Contacts[5].crs[1] = m.wheel.Contacts[5].ni[2] * m.wheel.Contacts[5].nA[3] - m.wheel.Contacts[5].ni[3] * m.wheel.Contacts[5].nA[2];
  m.wheel.Contacts[5].crs[2] = m.wheel.Contacts[5].ni[3] * m.wheel.Contacts[5].nA[1] - m.wheel.Contacts[5].ni[1] * m.wheel.Contacts[5].nA[3];
  m.wheel.Contacts[5].crs[3] = m.wheel.Contacts[5].ni[1] * m.wheel.Contacts[5].nA[2] - m.wheel.Contacts[5].ni[2] * m.wheel.Contacts[5].nA[1];
  m.wheel.Contacts[5].nk[1] = m.wheel.Contacts[5].crs[1] / sqrt(m.wheel.Contacts[5].crs[1] ^ 2.0 + m.wheel.Contacts[5].crs[2] ^ 2.0 + m.wheel.Contacts[5].crs[3] ^ 2.0);
  m.wheel.Contacts[5].nk[2] = m.wheel.Contacts[5].crs[2] / sqrt(m.wheel.Contacts[5].crs[1] ^ 2.0 + m.wheel.Contacts[5].crs[2] ^ 2.0 + m.wheel.Contacts[5].crs[3] ^ 2.0);
  m.wheel.Contacts[5].nk[3] = m.wheel.Contacts[5].crs[3] / sqrt(m.wheel.Contacts[5].crs[1] ^ 2.0 + m.wheel.Contacts[5].crs[2] ^ 2.0 + m.wheel.Contacts[5].crs[3] ^ 2.0);
  m.wheel.Contacts[5].cosBtwAxisAndVert = m.wheel.Contacts[5].ni[1] * m.wheel.Contacts[5].nA[1] + m.wheel.Contacts[5].ni[2] * m.wheel.Contacts[5].nA[2] + m.wheel.Contacts[5].ni[3] * m.wheel.Contacts[5].nA[3];
  if noEvent(abs(m.wheel.Contacts[5].cosBtwAxisAndVert) < m.wheel.Contacts[5].cos_of_max) and noEvent(m.wheel.Contacts[5].InPortB.r[2] < m.wheel.Contacts[5].R) then
    m.wheel.Contacts[5].lambda = (m.wheel.Contacts[5].R * (m.wheel.Contacts[5].n1j[1] * m.wheel.Contacts[5].nk[1] + m.wheel.Contacts[5].n1j[2] * m.wheel.Contacts[5].nk[2] + m.wheel.Contacts[5].n1j[3] * m.wheel.Contacts[5].nk[3]) - m.wheel.Contacts[5].R1 * (m.wheel.Contacts[5].rho[1] * m.wheel.Contacts[5].nk[1] + m.wheel.Contacts[5].rho[2] * m.wheel.Contacts[5].nk[2] + m.wheel.Contacts[5].rho[3] * m.wheel.Contacts[5].nk[3])) / (m.wheel.Contacts[5].n1k[1] * m.wheel.Contacts[5].nk[1] + m.wheel.Contacts[5].n1k[2] * m.wheel.Contacts[5].nk[2] + m.wheel.Contacts[5].n1k[3] * m.wheel.Contacts[5].nk[3]);
    m.wheel.Contacts[5].OBPB[1] = m.wheel.Contacts[5].n1k[1] * m.wheel.Contacts[5].lambda - m.wheel.Contacts[5].n1j[1] * m.wheel.Contacts[5].R + m.wheel.Contacts[5].rho[1] * m.wheel.Contacts[5].R1;
    m.wheel.Contacts[5].OBPB[2] = m.wheel.Contacts[5].n1k[2] * m.wheel.Contacts[5].lambda - m.wheel.Contacts[5].n1j[2] * m.wheel.Contacts[5].R + m.wheel.Contacts[5].rho[2] * m.wheel.Contacts[5].R1;
    m.wheel.Contacts[5].OBPB[3] = m.wheel.Contacts[5].n1k[3] * m.wheel.Contacts[5].lambda - m.wheel.Contacts[5].n1j[3] * m.wheel.Contacts[5].R + m.wheel.Contacts[5].rho[3] * m.wheel.Contacts[5].R1;
    m.wheel.Contacts[5].rB[1] = m.wheel.Contacts[5].InPortB.r[1] + m.wheel.Contacts[5].OBPB[1];
    m.wheel.Contacts[5].rB[2] = m.wheel.Contacts[5].InPortB.r[2] + m.wheel.Contacts[5].OBPB[2];
    m.wheel.Contacts[5].rB[3] = m.wheel.Contacts[5].InPortB.r[3] + m.wheel.Contacts[5].OBPB[3];
    m.wheel.Contacts[5].j = 1.0;
  else
    m.wheel.Contacts[5].lambda = m.wheel.Contacts[5].R * (m.wheel.Contacts[5].n1j[1] * m.wheel.Contacts[5].nk[1] + m.wheel.Contacts[5].n1j[2] * m.wheel.Contacts[5].nk[2] + m.wheel.Contacts[5].n1j[3] * m.wheel.Contacts[5].nk[3]) / (m.wheel.Contacts[5].n1k[1] * m.wheel.Contacts[5].nk[1] + m.wheel.Contacts[5].n1k[2] * m.wheel.Contacts[5].nk[2] + m.wheel.Contacts[5].n1k[3] * m.wheel.Contacts[5].nk[3]);
    m.wheel.Contacts[5].OBPB[1] = (-m.wheel.Contacts[5].n1j[1]) * m.wheel.Contacts[5].R;
    m.wheel.Contacts[5].OBPB[2] = (-m.wheel.Contacts[5].n1j[2]) * m.wheel.Contacts[5].R;
    m.wheel.Contacts[5].OBPB[3] = (-m.wheel.Contacts[5].n1j[3]) * m.wheel.Contacts[5].R;
    if noEvent(m.wheel.Contacts[5].cosBtwAxisAndVert > 0.0) then
      m.wheel.Contacts[5].rB[1] = m.wheel.Contacts[5].InPortB.r[1] - m.wheel.Contacts[5].ni[1] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].rB[2] = m.wheel.Contacts[5].InPortB.r[2] - m.wheel.Contacts[5].ni[2] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].rB[3] = m.wheel.Contacts[5].InPortB.r[3] - m.wheel.Contacts[5].ni[3] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].j = 2.0;
    else
      m.wheel.Contacts[5].rB[1] = m.wheel.Contacts[5].InPortB.r[1] + m.wheel.Contacts[5].ni[1] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].rB[2] = m.wheel.Contacts[5].InPortB.r[2] + m.wheel.Contacts[5].ni[2] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].rB[3] = m.wheel.Contacts[5].InPortB.r[3] + m.wheel.Contacts[5].ni[3] * m.wheel.Contacts[5].L2;
      m.wheel.Contacts[5].j = 3.0;
    end if;
  end if;
  m.wheel.Contacts[5].rA[1] = m.wheel.Contacts[5].rB[1];
  m.wheel.Contacts[5].rA[2] = 0.0;
  m.wheel.Contacts[5].rA[3] = m.wheel.Contacts[5].rB[3];
  m.wheel.Contacts[5].OutPortA.F[1] + m.wheel.Contacts[5].OutPortB.F[1] = 0.0;
  m.wheel.Contacts[5].OutPortA.F[2] + m.wheel.Contacts[5].OutPortB.F[2] = 0.0;
  m.wheel.Contacts[5].OutPortA.F[3] + m.wheel.Contacts[5].OutPortB.F[3] = 0.0;
  m.wheel.Contacts[5].OutPortA.M[1] + m.wheel.Contacts[5].OutPortB.M[1] = 0.0;
  m.wheel.Contacts[5].OutPortA.M[2] + m.wheel.Contacts[5].OutPortB.M[2] = 0.0;
  m.wheel.Contacts[5].OutPortA.M[3] + m.wheel.Contacts[5].OutPortB.M[3] = 0.0;
  m.wheel.Rollers[1].crosses[1,1] = (m.wheel.Rollers[1].InPorts[1].P[2] - m.wheel.Rollers[1].r[2]) * m.wheel.Rollers[1].InPorts[1].F[3] - (m.wheel.Rollers[1].InPorts[1].P[3] - m.wheel.Rollers[1].r[3]) * m.wheel.Rollers[1].InPorts[1].F[2];
  m.wheel.Rollers[1].crosses[1,2] = (m.wheel.Rollers[1].InPorts[1].P[3] - m.wheel.Rollers[1].r[3]) * m.wheel.Rollers[1].InPorts[1].F[1] - (m.wheel.Rollers[1].InPorts[1].P[1] - m.wheel.Rollers[1].r[1]) * m.wheel.Rollers[1].InPorts[1].F[3];
  m.wheel.Rollers[1].crosses[1,3] = (m.wheel.Rollers[1].InPorts[1].P[1] - m.wheel.Rollers[1].r[1]) * m.wheel.Rollers[1].InPorts[1].F[2] - (m.wheel.Rollers[1].InPorts[1].P[2] - m.wheel.Rollers[1].r[2]) * m.wheel.Rollers[1].InPorts[1].F[1];
  m.wheel.Rollers[1].crosses[2,1] = (m.wheel.Rollers[1].InPorts[2].P[2] - m.wheel.Rollers[1].r[2]) * m.wheel.Rollers[1].InPorts[2].F[3] - (m.wheel.Rollers[1].InPorts[2].P[3] - m.wheel.Rollers[1].r[3]) * m.wheel.Rollers[1].InPorts[2].F[2];
  m.wheel.Rollers[1].crosses[2,2] = (m.wheel.Rollers[1].InPorts[2].P[3] - m.wheel.Rollers[1].r[3]) * m.wheel.Rollers[1].InPorts[2].F[1] - (m.wheel.Rollers[1].InPorts[2].P[1] - m.wheel.Rollers[1].r[1]) * m.wheel.Rollers[1].InPorts[2].F[3];
  m.wheel.Rollers[1].crosses[2,3] = (m.wheel.Rollers[1].InPorts[2].P[1] - m.wheel.Rollers[1].r[1]) * m.wheel.Rollers[1].InPorts[2].F[2] - (m.wheel.Rollers[1].InPorts[2].P[2] - m.wheel.Rollers[1].r[2]) * m.wheel.Rollers[1].InPorts[2].F[1];
  m.wheel.Rollers[1].F[1] = m.wheel.Rollers[1].Gravity[1] * m.wheel.Rollers[1].m + m.wheel.Rollers[1].InPorts[1].F[1] + m.wheel.Rollers[1].InPorts[2].F[1];
  m.wheel.Rollers[1].F[2] = m.wheel.Rollers[1].Gravity[2] * m.wheel.Rollers[1].m + m.wheel.Rollers[1].InPorts[1].F[2] + m.wheel.Rollers[1].InPorts[2].F[2];
  m.wheel.Rollers[1].F[3] = m.wheel.Rollers[1].Gravity[3] * m.wheel.Rollers[1].m + m.wheel.Rollers[1].InPorts[1].F[3] + m.wheel.Rollers[1].InPorts[2].F[3];
  m.wheel.Rollers[1].M[1] = m.wheel.Rollers[1].InPorts[1].M[1] + m.wheel.Rollers[1].crosses[1,1] + m.wheel.Rollers[1].InPorts[2].M[1] + m.wheel.Rollers[1].crosses[2,1];
  m.wheel.Rollers[1].M[2] = m.wheel.Rollers[1].InPorts[1].M[2] + m.wheel.Rollers[1].crosses[1,2] + m.wheel.Rollers[1].InPorts[2].M[2] + m.wheel.Rollers[1].crosses[2,2];
  m.wheel.Rollers[1].M[3] = m.wheel.Rollers[1].InPorts[1].M[3] + m.wheel.Rollers[1].crosses[1,3] + m.wheel.Rollers[1].InPorts[2].M[3] + m.wheel.Rollers[1].crosses[2,3];
  der(m.wheel.Rollers[1].Active) = 0.0;
  der(m.wheel.Rollers[1].r[1]) = m.wheel.Rollers[1].v[1] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].r[2]) = m.wheel.Rollers[1].v[2] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].r[3]) = m.wheel.Rollers[1].v[3] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].v[1]) = m.wheel.Rollers[1].a[1] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].v[2]) = m.wheel.Rollers[1].a[2] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].v[3]) = m.wheel.Rollers[1].a[3] * m.wheel.Rollers[1].Active;
  m.wheel.Rollers[1].a[1] * m.wheel.Rollers[1].m = m.wheel.Rollers[1].F[1];
  m.wheel.Rollers[1].a[2] * m.wheel.Rollers[1].m = m.wheel.Rollers[1].F[2];
  m.wheel.Rollers[1].a[3] * m.wheel.Rollers[1].m = m.wheel.Rollers[1].F[3];
  {der(m.wheel.Rollers[1].q[1]), der(m.wheel.Rollers[1].q[2]), der(m.wheel.Rollers[1].q[3]), der(m.wheel.Rollers[1].q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Rollers[1].q[1], m.wheel.Rollers[1].q[2], m.wheel.Rollers[1].q[3], m.wheel.Rollers[1].q[4]}, {0.0, m.wheel.Rollers[1].omega[1], m.wheel.Rollers[1].omega[2], m.wheel.Rollers[1].omega[3]}) * 0.5 * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].omega[1]) = m.wheel.Rollers[1].epsilon[1] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].omega[2]) = m.wheel.Rollers[1].epsilon[2] * m.wheel.Rollers[1].Active;
  der(m.wheel.Rollers[1].omega[3]) = m.wheel.Rollers[1].epsilon[3] * m.wheel.Rollers[1].Active;
  m.wheel.Rollers[1].T = MbsLite.Util.Quaternions.QToT({m.wheel.Rollers[1].q[1], m.wheel.Rollers[1].q[2], m.wheel.Rollers[1].q[3], m.wheel.Rollers[1].q[4]});
  m.wheel.Rollers[1].I[1,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].I[1,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].I[1,3] * m.wheel.Rollers[1].epsilon[3] + m.wheel.Rollers[1].omega[2] * (m.wheel.Rollers[1].I[3,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[3,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[3,3] * m.wheel.Rollers[1].omega[3]) - m.wheel.Rollers[1].omega[3] * (m.wheel.Rollers[1].I[2,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[2,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[2,3] * m.wheel.Rollers[1].omega[3]) = m.wheel.Rollers[1].T[1,1] * m.wheel.Rollers[1].M[1] + m.wheel.Rollers[1].T[2,1] * m.wheel.Rollers[1].M[2] + m.wheel.Rollers[1].T[3,1] * m.wheel.Rollers[1].M[3];
  m.wheel.Rollers[1].I[2,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].I[2,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].I[2,3] * m.wheel.Rollers[1].epsilon[3] + m.wheel.Rollers[1].omega[3] * (m.wheel.Rollers[1].I[1,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[1,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[1,3] * m.wheel.Rollers[1].omega[3]) - m.wheel.Rollers[1].omega[1] * (m.wheel.Rollers[1].I[3,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[3,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[3,3] * m.wheel.Rollers[1].omega[3]) = m.wheel.Rollers[1].T[1,2] * m.wheel.Rollers[1].M[1] + m.wheel.Rollers[1].T[2,2] * m.wheel.Rollers[1].M[2] + m.wheel.Rollers[1].T[3,2] * m.wheel.Rollers[1].M[3];
  m.wheel.Rollers[1].I[3,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].I[3,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].I[3,3] * m.wheel.Rollers[1].epsilon[3] + m.wheel.Rollers[1].omega[1] * (m.wheel.Rollers[1].I[2,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[2,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[2,3] * m.wheel.Rollers[1].omega[3]) - m.wheel.Rollers[1].omega[2] * (m.wheel.Rollers[1].I[1,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].I[1,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].I[1,3] * m.wheel.Rollers[1].omega[3]) = m.wheel.Rollers[1].T[1,3] * m.wheel.Rollers[1].M[1] + m.wheel.Rollers[1].T[2,3] * m.wheel.Rollers[1].M[2] + m.wheel.Rollers[1].T[3,3] * m.wheel.Rollers[1].M[3];
  m.wheel.Rollers[1].OutPort.r[1] = m.wheel.Rollers[1].r[1];
  m.wheel.Rollers[1].OutPort.r[2] = m.wheel.Rollers[1].r[2];
  m.wheel.Rollers[1].OutPort.r[3] = m.wheel.Rollers[1].r[3];
  m.wheel.Rollers[1].OutPort.v[1] = m.wheel.Rollers[1].v[1];
  m.wheel.Rollers[1].OutPort.v[2] = m.wheel.Rollers[1].v[2];
  m.wheel.Rollers[1].OutPort.v[3] = m.wheel.Rollers[1].v[3];
  m.wheel.Rollers[1].OutPort.a[1] = m.wheel.Rollers[1].a[1];
  m.wheel.Rollers[1].OutPort.a[2] = m.wheel.Rollers[1].a[2];
  m.wheel.Rollers[1].OutPort.a[3] = m.wheel.Rollers[1].a[3];
  m.wheel.Rollers[1].OutPort.T[1,1] = m.wheel.Rollers[1].T[1,1];
  m.wheel.Rollers[1].OutPort.T[1,2] = m.wheel.Rollers[1].T[1,2];
  m.wheel.Rollers[1].OutPort.T[1,3] = m.wheel.Rollers[1].T[1,3];
  m.wheel.Rollers[1].OutPort.T[2,1] = m.wheel.Rollers[1].T[2,1];
  m.wheel.Rollers[1].OutPort.T[2,2] = m.wheel.Rollers[1].T[2,2];
  m.wheel.Rollers[1].OutPort.T[2,3] = m.wheel.Rollers[1].T[2,3];
  m.wheel.Rollers[1].OutPort.T[3,1] = m.wheel.Rollers[1].T[3,1];
  m.wheel.Rollers[1].OutPort.T[3,2] = m.wheel.Rollers[1].T[3,2];
  m.wheel.Rollers[1].OutPort.T[3,3] = m.wheel.Rollers[1].T[3,3];
  m.wheel.Rollers[1].OutPort.omega[1] = m.wheel.Rollers[1].T[1,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].T[1,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].T[1,3] * m.wheel.Rollers[1].omega[3];
  m.wheel.Rollers[1].OutPort.omega[2] = m.wheel.Rollers[1].T[2,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].T[2,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].T[2,3] * m.wheel.Rollers[1].omega[3];
  m.wheel.Rollers[1].OutPort.omega[3] = m.wheel.Rollers[1].T[3,1] * m.wheel.Rollers[1].omega[1] + m.wheel.Rollers[1].T[3,2] * m.wheel.Rollers[1].omega[2] + m.wheel.Rollers[1].T[3,3] * m.wheel.Rollers[1].omega[3];
  m.wheel.Rollers[1].OutPort.epsilon[1] = m.wheel.Rollers[1].T[1,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].T[1,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].T[1,3] * m.wheel.Rollers[1].epsilon[3];
  m.wheel.Rollers[1].OutPort.epsilon[2] = m.wheel.Rollers[1].T[2,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].T[2,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].T[2,3] * m.wheel.Rollers[1].epsilon[3];
  m.wheel.Rollers[1].OutPort.epsilon[3] = m.wheel.Rollers[1].T[3,1] * m.wheel.Rollers[1].epsilon[1] + m.wheel.Rollers[1].T[3,2] * m.wheel.Rollers[1].epsilon[2] + m.wheel.Rollers[1].T[3,3] * m.wheel.Rollers[1].epsilon[3];
  m.wheel.Rollers[2].crosses[1,1] = (m.wheel.Rollers[2].InPorts[1].P[2] - m.wheel.Rollers[2].r[2]) * m.wheel.Rollers[2].InPorts[1].F[3] - (m.wheel.Rollers[2].InPorts[1].P[3] - m.wheel.Rollers[2].r[3]) * m.wheel.Rollers[2].InPorts[1].F[2];
  m.wheel.Rollers[2].crosses[1,2] = (m.wheel.Rollers[2].InPorts[1].P[3] - m.wheel.Rollers[2].r[3]) * m.wheel.Rollers[2].InPorts[1].F[1] - (m.wheel.Rollers[2].InPorts[1].P[1] - m.wheel.Rollers[2].r[1]) * m.wheel.Rollers[2].InPorts[1].F[3];
  m.wheel.Rollers[2].crosses[1,3] = (m.wheel.Rollers[2].InPorts[1].P[1] - m.wheel.Rollers[2].r[1]) * m.wheel.Rollers[2].InPorts[1].F[2] - (m.wheel.Rollers[2].InPorts[1].P[2] - m.wheel.Rollers[2].r[2]) * m.wheel.Rollers[2].InPorts[1].F[1];
  m.wheel.Rollers[2].crosses[2,1] = (m.wheel.Rollers[2].InPorts[2].P[2] - m.wheel.Rollers[2].r[2]) * m.wheel.Rollers[2].InPorts[2].F[3] - (m.wheel.Rollers[2].InPorts[2].P[3] - m.wheel.Rollers[2].r[3]) * m.wheel.Rollers[2].InPorts[2].F[2];
  m.wheel.Rollers[2].crosses[2,2] = (m.wheel.Rollers[2].InPorts[2].P[3] - m.wheel.Rollers[2].r[3]) * m.wheel.Rollers[2].InPorts[2].F[1] - (m.wheel.Rollers[2].InPorts[2].P[1] - m.wheel.Rollers[2].r[1]) * m.wheel.Rollers[2].InPorts[2].F[3];
  m.wheel.Rollers[2].crosses[2,3] = (m.wheel.Rollers[2].InPorts[2].P[1] - m.wheel.Rollers[2].r[1]) * m.wheel.Rollers[2].InPorts[2].F[2] - (m.wheel.Rollers[2].InPorts[2].P[2] - m.wheel.Rollers[2].r[2]) * m.wheel.Rollers[2].InPorts[2].F[1];
  m.wheel.Rollers[2].F[1] = m.wheel.Rollers[2].Gravity[1] * m.wheel.Rollers[2].m + m.wheel.Rollers[2].InPorts[1].F[1] + m.wheel.Rollers[2].InPorts[2].F[1];
  m.wheel.Rollers[2].F[2] = m.wheel.Rollers[2].Gravity[2] * m.wheel.Rollers[2].m + m.wheel.Rollers[2].InPorts[1].F[2] + m.wheel.Rollers[2].InPorts[2].F[2];
  m.wheel.Rollers[2].F[3] = m.wheel.Rollers[2].Gravity[3] * m.wheel.Rollers[2].m + m.wheel.Rollers[2].InPorts[1].F[3] + m.wheel.Rollers[2].InPorts[2].F[3];
  m.wheel.Rollers[2].M[1] = m.wheel.Rollers[2].InPorts[1].M[1] + m.wheel.Rollers[2].crosses[1,1] + m.wheel.Rollers[2].InPorts[2].M[1] + m.wheel.Rollers[2].crosses[2,1];
  m.wheel.Rollers[2].M[2] = m.wheel.Rollers[2].InPorts[1].M[2] + m.wheel.Rollers[2].crosses[1,2] + m.wheel.Rollers[2].InPorts[2].M[2] + m.wheel.Rollers[2].crosses[2,2];
  m.wheel.Rollers[2].M[3] = m.wheel.Rollers[2].InPorts[1].M[3] + m.wheel.Rollers[2].crosses[1,3] + m.wheel.Rollers[2].InPorts[2].M[3] + m.wheel.Rollers[2].crosses[2,3];
  der(m.wheel.Rollers[2].Active) = 0.0;
  der(m.wheel.Rollers[2].r[1]) = m.wheel.Rollers[2].v[1] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].r[2]) = m.wheel.Rollers[2].v[2] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].r[3]) = m.wheel.Rollers[2].v[3] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].v[1]) = m.wheel.Rollers[2].a[1] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].v[2]) = m.wheel.Rollers[2].a[2] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].v[3]) = m.wheel.Rollers[2].a[3] * m.wheel.Rollers[2].Active;
  m.wheel.Rollers[2].a[1] * m.wheel.Rollers[2].m = m.wheel.Rollers[2].F[1];
  m.wheel.Rollers[2].a[2] * m.wheel.Rollers[2].m = m.wheel.Rollers[2].F[2];
  m.wheel.Rollers[2].a[3] * m.wheel.Rollers[2].m = m.wheel.Rollers[2].F[3];
  {der(m.wheel.Rollers[2].q[1]), der(m.wheel.Rollers[2].q[2]), der(m.wheel.Rollers[2].q[3]), der(m.wheel.Rollers[2].q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Rollers[2].q[1], m.wheel.Rollers[2].q[2], m.wheel.Rollers[2].q[3], m.wheel.Rollers[2].q[4]}, {0.0, m.wheel.Rollers[2].omega[1], m.wheel.Rollers[2].omega[2], m.wheel.Rollers[2].omega[3]}) * 0.5 * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].omega[1]) = m.wheel.Rollers[2].epsilon[1] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].omega[2]) = m.wheel.Rollers[2].epsilon[2] * m.wheel.Rollers[2].Active;
  der(m.wheel.Rollers[2].omega[3]) = m.wheel.Rollers[2].epsilon[3] * m.wheel.Rollers[2].Active;
  m.wheel.Rollers[2].T = MbsLite.Util.Quaternions.QToT({m.wheel.Rollers[2].q[1], m.wheel.Rollers[2].q[2], m.wheel.Rollers[2].q[3], m.wheel.Rollers[2].q[4]});
  m.wheel.Rollers[2].I[1,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].I[1,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].I[1,3] * m.wheel.Rollers[2].epsilon[3] + m.wheel.Rollers[2].omega[2] * (m.wheel.Rollers[2].I[3,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[3,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[3,3] * m.wheel.Rollers[2].omega[3]) - m.wheel.Rollers[2].omega[3] * (m.wheel.Rollers[2].I[2,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[2,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[2,3] * m.wheel.Rollers[2].omega[3]) = m.wheel.Rollers[2].T[1,1] * m.wheel.Rollers[2].M[1] + m.wheel.Rollers[2].T[2,1] * m.wheel.Rollers[2].M[2] + m.wheel.Rollers[2].T[3,1] * m.wheel.Rollers[2].M[3];
  m.wheel.Rollers[2].I[2,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].I[2,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].I[2,3] * m.wheel.Rollers[2].epsilon[3] + m.wheel.Rollers[2].omega[3] * (m.wheel.Rollers[2].I[1,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[1,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[1,3] * m.wheel.Rollers[2].omega[3]) - m.wheel.Rollers[2].omega[1] * (m.wheel.Rollers[2].I[3,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[3,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[3,3] * m.wheel.Rollers[2].omega[3]) = m.wheel.Rollers[2].T[1,2] * m.wheel.Rollers[2].M[1] + m.wheel.Rollers[2].T[2,2] * m.wheel.Rollers[2].M[2] + m.wheel.Rollers[2].T[3,2] * m.wheel.Rollers[2].M[3];
  m.wheel.Rollers[2].I[3,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].I[3,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].I[3,3] * m.wheel.Rollers[2].epsilon[3] + m.wheel.Rollers[2].omega[1] * (m.wheel.Rollers[2].I[2,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[2,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[2,3] * m.wheel.Rollers[2].omega[3]) - m.wheel.Rollers[2].omega[2] * (m.wheel.Rollers[2].I[1,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].I[1,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].I[1,3] * m.wheel.Rollers[2].omega[3]) = m.wheel.Rollers[2].T[1,3] * m.wheel.Rollers[2].M[1] + m.wheel.Rollers[2].T[2,3] * m.wheel.Rollers[2].M[2] + m.wheel.Rollers[2].T[3,3] * m.wheel.Rollers[2].M[3];
  m.wheel.Rollers[2].OutPort.r[1] = m.wheel.Rollers[2].r[1];
  m.wheel.Rollers[2].OutPort.r[2] = m.wheel.Rollers[2].r[2];
  m.wheel.Rollers[2].OutPort.r[3] = m.wheel.Rollers[2].r[3];
  m.wheel.Rollers[2].OutPort.v[1] = m.wheel.Rollers[2].v[1];
  m.wheel.Rollers[2].OutPort.v[2] = m.wheel.Rollers[2].v[2];
  m.wheel.Rollers[2].OutPort.v[3] = m.wheel.Rollers[2].v[3];
  m.wheel.Rollers[2].OutPort.a[1] = m.wheel.Rollers[2].a[1];
  m.wheel.Rollers[2].OutPort.a[2] = m.wheel.Rollers[2].a[2];
  m.wheel.Rollers[2].OutPort.a[3] = m.wheel.Rollers[2].a[3];
  m.wheel.Rollers[2].OutPort.T[1,1] = m.wheel.Rollers[2].T[1,1];
  m.wheel.Rollers[2].OutPort.T[1,2] = m.wheel.Rollers[2].T[1,2];
  m.wheel.Rollers[2].OutPort.T[1,3] = m.wheel.Rollers[2].T[1,3];
  m.wheel.Rollers[2].OutPort.T[2,1] = m.wheel.Rollers[2].T[2,1];
  m.wheel.Rollers[2].OutPort.T[2,2] = m.wheel.Rollers[2].T[2,2];
  m.wheel.Rollers[2].OutPort.T[2,3] = m.wheel.Rollers[2].T[2,3];
  m.wheel.Rollers[2].OutPort.T[3,1] = m.wheel.Rollers[2].T[3,1];
  m.wheel.Rollers[2].OutPort.T[3,2] = m.wheel.Rollers[2].T[3,2];
  m.wheel.Rollers[2].OutPort.T[3,3] = m.wheel.Rollers[2].T[3,3];
  m.wheel.Rollers[2].OutPort.omega[1] = m.wheel.Rollers[2].T[1,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].T[1,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].T[1,3] * m.wheel.Rollers[2].omega[3];
  m.wheel.Rollers[2].OutPort.omega[2] = m.wheel.Rollers[2].T[2,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].T[2,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].T[2,3] * m.wheel.Rollers[2].omega[3];
  m.wheel.Rollers[2].OutPort.omega[3] = m.wheel.Rollers[2].T[3,1] * m.wheel.Rollers[2].omega[1] + m.wheel.Rollers[2].T[3,2] * m.wheel.Rollers[2].omega[2] + m.wheel.Rollers[2].T[3,3] * m.wheel.Rollers[2].omega[3];
  m.wheel.Rollers[2].OutPort.epsilon[1] = m.wheel.Rollers[2].T[1,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].T[1,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].T[1,3] * m.wheel.Rollers[2].epsilon[3];
  m.wheel.Rollers[2].OutPort.epsilon[2] = m.wheel.Rollers[2].T[2,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].T[2,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].T[2,3] * m.wheel.Rollers[2].epsilon[3];
  m.wheel.Rollers[2].OutPort.epsilon[3] = m.wheel.Rollers[2].T[3,1] * m.wheel.Rollers[2].epsilon[1] + m.wheel.Rollers[2].T[3,2] * m.wheel.Rollers[2].epsilon[2] + m.wheel.Rollers[2].T[3,3] * m.wheel.Rollers[2].epsilon[3];
  m.wheel.Rollers[3].crosses[1,1] = (m.wheel.Rollers[3].InPorts[1].P[2] - m.wheel.Rollers[3].r[2]) * m.wheel.Rollers[3].InPorts[1].F[3] - (m.wheel.Rollers[3].InPorts[1].P[3] - m.wheel.Rollers[3].r[3]) * m.wheel.Rollers[3].InPorts[1].F[2];
  m.wheel.Rollers[3].crosses[1,2] = (m.wheel.Rollers[3].InPorts[1].P[3] - m.wheel.Rollers[3].r[3]) * m.wheel.Rollers[3].InPorts[1].F[1] - (m.wheel.Rollers[3].InPorts[1].P[1] - m.wheel.Rollers[3].r[1]) * m.wheel.Rollers[3].InPorts[1].F[3];
  m.wheel.Rollers[3].crosses[1,3] = (m.wheel.Rollers[3].InPorts[1].P[1] - m.wheel.Rollers[3].r[1]) * m.wheel.Rollers[3].InPorts[1].F[2] - (m.wheel.Rollers[3].InPorts[1].P[2] - m.wheel.Rollers[3].r[2]) * m.wheel.Rollers[3].InPorts[1].F[1];
  m.wheel.Rollers[3].crosses[2,1] = (m.wheel.Rollers[3].InPorts[2].P[2] - m.wheel.Rollers[3].r[2]) * m.wheel.Rollers[3].InPorts[2].F[3] - (m.wheel.Rollers[3].InPorts[2].P[3] - m.wheel.Rollers[3].r[3]) * m.wheel.Rollers[3].InPorts[2].F[2];
  m.wheel.Rollers[3].crosses[2,2] = (m.wheel.Rollers[3].InPorts[2].P[3] - m.wheel.Rollers[3].r[3]) * m.wheel.Rollers[3].InPorts[2].F[1] - (m.wheel.Rollers[3].InPorts[2].P[1] - m.wheel.Rollers[3].r[1]) * m.wheel.Rollers[3].InPorts[2].F[3];
  m.wheel.Rollers[3].crosses[2,3] = (m.wheel.Rollers[3].InPorts[2].P[1] - m.wheel.Rollers[3].r[1]) * m.wheel.Rollers[3].InPorts[2].F[2] - (m.wheel.Rollers[3].InPorts[2].P[2] - m.wheel.Rollers[3].r[2]) * m.wheel.Rollers[3].InPorts[2].F[1];
  m.wheel.Rollers[3].F[1] = m.wheel.Rollers[3].Gravity[1] * m.wheel.Rollers[3].m + m.wheel.Rollers[3].InPorts[1].F[1] + m.wheel.Rollers[3].InPorts[2].F[1];
  m.wheel.Rollers[3].F[2] = m.wheel.Rollers[3].Gravity[2] * m.wheel.Rollers[3].m + m.wheel.Rollers[3].InPorts[1].F[2] + m.wheel.Rollers[3].InPorts[2].F[2];
  m.wheel.Rollers[3].F[3] = m.wheel.Rollers[3].Gravity[3] * m.wheel.Rollers[3].m + m.wheel.Rollers[3].InPorts[1].F[3] + m.wheel.Rollers[3].InPorts[2].F[3];
  m.wheel.Rollers[3].M[1] = m.wheel.Rollers[3].InPorts[1].M[1] + m.wheel.Rollers[3].crosses[1,1] + m.wheel.Rollers[3].InPorts[2].M[1] + m.wheel.Rollers[3].crosses[2,1];
  m.wheel.Rollers[3].M[2] = m.wheel.Rollers[3].InPorts[1].M[2] + m.wheel.Rollers[3].crosses[1,2] + m.wheel.Rollers[3].InPorts[2].M[2] + m.wheel.Rollers[3].crosses[2,2];
  m.wheel.Rollers[3].M[3] = m.wheel.Rollers[3].InPorts[1].M[3] + m.wheel.Rollers[3].crosses[1,3] + m.wheel.Rollers[3].InPorts[2].M[3] + m.wheel.Rollers[3].crosses[2,3];
  der(m.wheel.Rollers[3].Active) = 0.0;
  der(m.wheel.Rollers[3].r[1]) = m.wheel.Rollers[3].v[1] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].r[2]) = m.wheel.Rollers[3].v[2] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].r[3]) = m.wheel.Rollers[3].v[3] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].v[1]) = m.wheel.Rollers[3].a[1] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].v[2]) = m.wheel.Rollers[3].a[2] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].v[3]) = m.wheel.Rollers[3].a[3] * m.wheel.Rollers[3].Active;
  m.wheel.Rollers[3].a[1] * m.wheel.Rollers[3].m = m.wheel.Rollers[3].F[1];
  m.wheel.Rollers[3].a[2] * m.wheel.Rollers[3].m = m.wheel.Rollers[3].F[2];
  m.wheel.Rollers[3].a[3] * m.wheel.Rollers[3].m = m.wheel.Rollers[3].F[3];
  {der(m.wheel.Rollers[3].q[1]), der(m.wheel.Rollers[3].q[2]), der(m.wheel.Rollers[3].q[3]), der(m.wheel.Rollers[3].q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Rollers[3].q[1], m.wheel.Rollers[3].q[2], m.wheel.Rollers[3].q[3], m.wheel.Rollers[3].q[4]}, {0.0, m.wheel.Rollers[3].omega[1], m.wheel.Rollers[3].omega[2], m.wheel.Rollers[3].omega[3]}) * 0.5 * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].omega[1]) = m.wheel.Rollers[3].epsilon[1] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].omega[2]) = m.wheel.Rollers[3].epsilon[2] * m.wheel.Rollers[3].Active;
  der(m.wheel.Rollers[3].omega[3]) = m.wheel.Rollers[3].epsilon[3] * m.wheel.Rollers[3].Active;
  m.wheel.Rollers[3].T = MbsLite.Util.Quaternions.QToT({m.wheel.Rollers[3].q[1], m.wheel.Rollers[3].q[2], m.wheel.Rollers[3].q[3], m.wheel.Rollers[3].q[4]});
  m.wheel.Rollers[3].I[1,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].I[1,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].I[1,3] * m.wheel.Rollers[3].epsilon[3] + m.wheel.Rollers[3].omega[2] * (m.wheel.Rollers[3].I[3,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[3,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[3,3] * m.wheel.Rollers[3].omega[3]) - m.wheel.Rollers[3].omega[3] * (m.wheel.Rollers[3].I[2,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[2,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[2,3] * m.wheel.Rollers[3].omega[3]) = m.wheel.Rollers[3].T[1,1] * m.wheel.Rollers[3].M[1] + m.wheel.Rollers[3].T[2,1] * m.wheel.Rollers[3].M[2] + m.wheel.Rollers[3].T[3,1] * m.wheel.Rollers[3].M[3];
  m.wheel.Rollers[3].I[2,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].I[2,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].I[2,3] * m.wheel.Rollers[3].epsilon[3] + m.wheel.Rollers[3].omega[3] * (m.wheel.Rollers[3].I[1,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[1,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[1,3] * m.wheel.Rollers[3].omega[3]) - m.wheel.Rollers[3].omega[1] * (m.wheel.Rollers[3].I[3,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[3,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[3,3] * m.wheel.Rollers[3].omega[3]) = m.wheel.Rollers[3].T[1,2] * m.wheel.Rollers[3].M[1] + m.wheel.Rollers[3].T[2,2] * m.wheel.Rollers[3].M[2] + m.wheel.Rollers[3].T[3,2] * m.wheel.Rollers[3].M[3];
  m.wheel.Rollers[3].I[3,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].I[3,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].I[3,3] * m.wheel.Rollers[3].epsilon[3] + m.wheel.Rollers[3].omega[1] * (m.wheel.Rollers[3].I[2,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[2,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[2,3] * m.wheel.Rollers[3].omega[3]) - m.wheel.Rollers[3].omega[2] * (m.wheel.Rollers[3].I[1,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].I[1,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].I[1,3] * m.wheel.Rollers[3].omega[3]) = m.wheel.Rollers[3].T[1,3] * m.wheel.Rollers[3].M[1] + m.wheel.Rollers[3].T[2,3] * m.wheel.Rollers[3].M[2] + m.wheel.Rollers[3].T[3,3] * m.wheel.Rollers[3].M[3];
  m.wheel.Rollers[3].OutPort.r[1] = m.wheel.Rollers[3].r[1];
  m.wheel.Rollers[3].OutPort.r[2] = m.wheel.Rollers[3].r[2];
  m.wheel.Rollers[3].OutPort.r[3] = m.wheel.Rollers[3].r[3];
  m.wheel.Rollers[3].OutPort.v[1] = m.wheel.Rollers[3].v[1];
  m.wheel.Rollers[3].OutPort.v[2] = m.wheel.Rollers[3].v[2];
  m.wheel.Rollers[3].OutPort.v[3] = m.wheel.Rollers[3].v[3];
  m.wheel.Rollers[3].OutPort.a[1] = m.wheel.Rollers[3].a[1];
  m.wheel.Rollers[3].OutPort.a[2] = m.wheel.Rollers[3].a[2];
  m.wheel.Rollers[3].OutPort.a[3] = m.wheel.Rollers[3].a[3];
  m.wheel.Rollers[3].OutPort.T[1,1] = m.wheel.Rollers[3].T[1,1];
  m.wheel.Rollers[3].OutPort.T[1,2] = m.wheel.Rollers[3].T[1,2];
  m.wheel.Rollers[3].OutPort.T[1,3] = m.wheel.Rollers[3].T[1,3];
  m.wheel.Rollers[3].OutPort.T[2,1] = m.wheel.Rollers[3].T[2,1];
  m.wheel.Rollers[3].OutPort.T[2,2] = m.wheel.Rollers[3].T[2,2];
  m.wheel.Rollers[3].OutPort.T[2,3] = m.wheel.Rollers[3].T[2,3];
  m.wheel.Rollers[3].OutPort.T[3,1] = m.wheel.Rollers[3].T[3,1];
  m.wheel.Rollers[3].OutPort.T[3,2] = m.wheel.Rollers[3].T[3,2];
  m.wheel.Rollers[3].OutPort.T[3,3] = m.wheel.Rollers[3].T[3,3];
  m.wheel.Rollers[3].OutPort.omega[1] = m.wheel.Rollers[3].T[1,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].T[1,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].T[1,3] * m.wheel.Rollers[3].omega[3];
  m.wheel.Rollers[3].OutPort.omega[2] = m.wheel.Rollers[3].T[2,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].T[2,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].T[2,3] * m.wheel.Rollers[3].omega[3];
  m.wheel.Rollers[3].OutPort.omega[3] = m.wheel.Rollers[3].T[3,1] * m.wheel.Rollers[3].omega[1] + m.wheel.Rollers[3].T[3,2] * m.wheel.Rollers[3].omega[2] + m.wheel.Rollers[3].T[3,3] * m.wheel.Rollers[3].omega[3];
  m.wheel.Rollers[3].OutPort.epsilon[1] = m.wheel.Rollers[3].T[1,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].T[1,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].T[1,3] * m.wheel.Rollers[3].epsilon[3];
  m.wheel.Rollers[3].OutPort.epsilon[2] = m.wheel.Rollers[3].T[2,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].T[2,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].T[2,3] * m.wheel.Rollers[3].epsilon[3];
  m.wheel.Rollers[3].OutPort.epsilon[3] = m.wheel.Rollers[3].T[3,1] * m.wheel.Rollers[3].epsilon[1] + m.wheel.Rollers[3].T[3,2] * m.wheel.Rollers[3].epsilon[2] + m.wheel.Rollers[3].T[3,3] * m.wheel.Rollers[3].epsilon[3];
  m.wheel.Rollers[4].crosses[1,1] = (m.wheel.Rollers[4].InPorts[1].P[2] - m.wheel.Rollers[4].r[2]) * m.wheel.Rollers[4].InPorts[1].F[3] - (m.wheel.Rollers[4].InPorts[1].P[3] - m.wheel.Rollers[4].r[3]) * m.wheel.Rollers[4].InPorts[1].F[2];
  m.wheel.Rollers[4].crosses[1,2] = (m.wheel.Rollers[4].InPorts[1].P[3] - m.wheel.Rollers[4].r[3]) * m.wheel.Rollers[4].InPorts[1].F[1] - (m.wheel.Rollers[4].InPorts[1].P[1] - m.wheel.Rollers[4].r[1]) * m.wheel.Rollers[4].InPorts[1].F[3];
  m.wheel.Rollers[4].crosses[1,3] = (m.wheel.Rollers[4].InPorts[1].P[1] - m.wheel.Rollers[4].r[1]) * m.wheel.Rollers[4].InPorts[1].F[2] - (m.wheel.Rollers[4].InPorts[1].P[2] - m.wheel.Rollers[4].r[2]) * m.wheel.Rollers[4].InPorts[1].F[1];
  m.wheel.Rollers[4].crosses[2,1] = (m.wheel.Rollers[4].InPorts[2].P[2] - m.wheel.Rollers[4].r[2]) * m.wheel.Rollers[4].InPorts[2].F[3] - (m.wheel.Rollers[4].InPorts[2].P[3] - m.wheel.Rollers[4].r[3]) * m.wheel.Rollers[4].InPorts[2].F[2];
  m.wheel.Rollers[4].crosses[2,2] = (m.wheel.Rollers[4].InPorts[2].P[3] - m.wheel.Rollers[4].r[3]) * m.wheel.Rollers[4].InPorts[2].F[1] - (m.wheel.Rollers[4].InPorts[2].P[1] - m.wheel.Rollers[4].r[1]) * m.wheel.Rollers[4].InPorts[2].F[3];
  m.wheel.Rollers[4].crosses[2,3] = (m.wheel.Rollers[4].InPorts[2].P[1] - m.wheel.Rollers[4].r[1]) * m.wheel.Rollers[4].InPorts[2].F[2] - (m.wheel.Rollers[4].InPorts[2].P[2] - m.wheel.Rollers[4].r[2]) * m.wheel.Rollers[4].InPorts[2].F[1];
  m.wheel.Rollers[4].F[1] = m.wheel.Rollers[4].Gravity[1] * m.wheel.Rollers[4].m + m.wheel.Rollers[4].InPorts[1].F[1] + m.wheel.Rollers[4].InPorts[2].F[1];
  m.wheel.Rollers[4].F[2] = m.wheel.Rollers[4].Gravity[2] * m.wheel.Rollers[4].m + m.wheel.Rollers[4].InPorts[1].F[2] + m.wheel.Rollers[4].InPorts[2].F[2];
  m.wheel.Rollers[4].F[3] = m.wheel.Rollers[4].Gravity[3] * m.wheel.Rollers[4].m + m.wheel.Rollers[4].InPorts[1].F[3] + m.wheel.Rollers[4].InPorts[2].F[3];
  m.wheel.Rollers[4].M[1] = m.wheel.Rollers[4].InPorts[1].M[1] + m.wheel.Rollers[4].crosses[1,1] + m.wheel.Rollers[4].InPorts[2].M[1] + m.wheel.Rollers[4].crosses[2,1];
  m.wheel.Rollers[4].M[2] = m.wheel.Rollers[4].InPorts[1].M[2] + m.wheel.Rollers[4].crosses[1,2] + m.wheel.Rollers[4].InPorts[2].M[2] + m.wheel.Rollers[4].crosses[2,2];
  m.wheel.Rollers[4].M[3] = m.wheel.Rollers[4].InPorts[1].M[3] + m.wheel.Rollers[4].crosses[1,3] + m.wheel.Rollers[4].InPorts[2].M[3] + m.wheel.Rollers[4].crosses[2,3];
  der(m.wheel.Rollers[4].Active) = 0.0;
  der(m.wheel.Rollers[4].r[1]) = m.wheel.Rollers[4].v[1] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].r[2]) = m.wheel.Rollers[4].v[2] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].r[3]) = m.wheel.Rollers[4].v[3] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].v[1]) = m.wheel.Rollers[4].a[1] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].v[2]) = m.wheel.Rollers[4].a[2] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].v[3]) = m.wheel.Rollers[4].a[3] * m.wheel.Rollers[4].Active;
  m.wheel.Rollers[4].a[1] * m.wheel.Rollers[4].m = m.wheel.Rollers[4].F[1];
  m.wheel.Rollers[4].a[2] * m.wheel.Rollers[4].m = m.wheel.Rollers[4].F[2];
  m.wheel.Rollers[4].a[3] * m.wheel.Rollers[4].m = m.wheel.Rollers[4].F[3];
  {der(m.wheel.Rollers[4].q[1]), der(m.wheel.Rollers[4].q[2]), der(m.wheel.Rollers[4].q[3]), der(m.wheel.Rollers[4].q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Rollers[4].q[1], m.wheel.Rollers[4].q[2], m.wheel.Rollers[4].q[3], m.wheel.Rollers[4].q[4]}, {0.0, m.wheel.Rollers[4].omega[1], m.wheel.Rollers[4].omega[2], m.wheel.Rollers[4].omega[3]}) * 0.5 * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].omega[1]) = m.wheel.Rollers[4].epsilon[1] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].omega[2]) = m.wheel.Rollers[4].epsilon[2] * m.wheel.Rollers[4].Active;
  der(m.wheel.Rollers[4].omega[3]) = m.wheel.Rollers[4].epsilon[3] * m.wheel.Rollers[4].Active;
  m.wheel.Rollers[4].T = MbsLite.Util.Quaternions.QToT({m.wheel.Rollers[4].q[1], m.wheel.Rollers[4].q[2], m.wheel.Rollers[4].q[3], m.wheel.Rollers[4].q[4]});
  m.wheel.Rollers[4].I[1,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].I[1,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].I[1,3] * m.wheel.Rollers[4].epsilon[3] + m.wheel.Rollers[4].omega[2] * (m.wheel.Rollers[4].I[3,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[3,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[3,3] * m.wheel.Rollers[4].omega[3]) - m.wheel.Rollers[4].omega[3] * (m.wheel.Rollers[4].I[2,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[2,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[2,3] * m.wheel.Rollers[4].omega[3]) = m.wheel.Rollers[4].T[1,1] * m.wheel.Rollers[4].M[1] + m.wheel.Rollers[4].T[2,1] * m.wheel.Rollers[4].M[2] + m.wheel.Rollers[4].T[3,1] * m.wheel.Rollers[4].M[3];
  m.wheel.Rollers[4].I[2,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].I[2,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].I[2,3] * m.wheel.Rollers[4].epsilon[3] + m.wheel.Rollers[4].omega[3] * (m.wheel.Rollers[4].I[1,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[1,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[1,3] * m.wheel.Rollers[4].omega[3]) - m.wheel.Rollers[4].omega[1] * (m.wheel.Rollers[4].I[3,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[3,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[3,3] * m.wheel.Rollers[4].omega[3]) = m.wheel.Rollers[4].T[1,2] * m.wheel.Rollers[4].M[1] + m.wheel.Rollers[4].T[2,2] * m.wheel.Rollers[4].M[2] + m.wheel.Rollers[4].T[3,2] * m.wheel.Rollers[4].M[3];
  m.wheel.Rollers[4].I[3,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].I[3,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].I[3,3] * m.wheel.Rollers[4].epsilon[3] + m.wheel.Rollers[4].omega[1] * (m.wheel.Rollers[4].I[2,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[2,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[2,3] * m.wheel.Rollers[4].omega[3]) - m.wheel.Rollers[4].omega[2] * (m.wheel.Rollers[4].I[1,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].I[1,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].I[1,3] * m.wheel.Rollers[4].omega[3]) = m.wheel.Rollers[4].T[1,3] * m.wheel.Rollers[4].M[1] + m.wheel.Rollers[4].T[2,3] * m.wheel.Rollers[4].M[2] + m.wheel.Rollers[4].T[3,3] * m.wheel.Rollers[4].M[3];
  m.wheel.Rollers[4].OutPort.r[1] = m.wheel.Rollers[4].r[1];
  m.wheel.Rollers[4].OutPort.r[2] = m.wheel.Rollers[4].r[2];
  m.wheel.Rollers[4].OutPort.r[3] = m.wheel.Rollers[4].r[3];
  m.wheel.Rollers[4].OutPort.v[1] = m.wheel.Rollers[4].v[1];
  m.wheel.Rollers[4].OutPort.v[2] = m.wheel.Rollers[4].v[2];
  m.wheel.Rollers[4].OutPort.v[3] = m.wheel.Rollers[4].v[3];
  m.wheel.Rollers[4].OutPort.a[1] = m.wheel.Rollers[4].a[1];
  m.wheel.Rollers[4].OutPort.a[2] = m.wheel.Rollers[4].a[2];
  m.wheel.Rollers[4].OutPort.a[3] = m.wheel.Rollers[4].a[3];
  m.wheel.Rollers[4].OutPort.T[1,1] = m.wheel.Rollers[4].T[1,1];
  m.wheel.Rollers[4].OutPort.T[1,2] = m.wheel.Rollers[4].T[1,2];
  m.wheel.Rollers[4].OutPort.T[1,3] = m.wheel.Rollers[4].T[1,3];
  m.wheel.Rollers[4].OutPort.T[2,1] = m.wheel.Rollers[4].T[2,1];
  m.wheel.Rollers[4].OutPort.T[2,2] = m.wheel.Rollers[4].T[2,2];
  m.wheel.Rollers[4].OutPort.T[2,3] = m.wheel.Rollers[4].T[2,3];
  m.wheel.Rollers[4].OutPort.T[3,1] = m.wheel.Rollers[4].T[3,1];
  m.wheel.Rollers[4].OutPort.T[3,2] = m.wheel.Rollers[4].T[3,2];
  m.wheel.Rollers[4].OutPort.T[3,3] = m.wheel.Rollers[4].T[3,3];
  m.wheel.Rollers[4].OutPort.omega[1] = m.wheel.Rollers[4].T[1,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].T[1,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].T[1,3] * m.wheel.Rollers[4].omega[3];
  m.wheel.Rollers[4].OutPort.omega[2] = m.wheel.Rollers[4].T[2,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].T[2,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].T[2,3] * m.wheel.Rollers[4].omega[3];
  m.wheel.Rollers[4].OutPort.omega[3] = m.wheel.Rollers[4].T[3,1] * m.wheel.Rollers[4].omega[1] + m.wheel.Rollers[4].T[3,2] * m.wheel.Rollers[4].omega[2] + m.wheel.Rollers[4].T[3,3] * m.wheel.Rollers[4].omega[3];
  m.wheel.Rollers[4].OutPort.epsilon[1] = m.wheel.Rollers[4].T[1,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].T[1,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].T[1,3] * m.wheel.Rollers[4].epsilon[3];
  m.wheel.Rollers[4].OutPort.epsilon[2] = m.wheel.Rollers[4].T[2,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].T[2,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].T[2,3] * m.wheel.Rollers[4].epsilon[3];
  m.wheel.Rollers[4].OutPort.epsilon[3] = m.wheel.Rollers[4].T[3,1] * m.wheel.Rollers[4].epsilon[1] + m.wheel.Rollers[4].T[3,2] * m.wheel.Rollers[4].epsilon[2] + m.wheel.Rollers[4].T[3,3] * m.wheel.Rollers[4].epsilon[3];
  m.wheel.Rollers[5].crosses[1,1] = (m.wheel.Rollers[5].InPorts[1].P[2] - m.wheel.Rollers[5].r[2]) * m.wheel.Rollers[5].InPorts[1].F[3] - (m.wheel.Rollers[5].InPorts[1].P[3] - m.wheel.Rollers[5].r[3]) * m.wheel.Rollers[5].InPorts[1].F[2];
  m.wheel.Rollers[5].crosses[1,2] = (m.wheel.Rollers[5].InPorts[1].P[3] - m.wheel.Rollers[5].r[3]) * m.wheel.Rollers[5].InPorts[1].F[1] - (m.wheel.Rollers[5].InPorts[1].P[1] - m.wheel.Rollers[5].r[1]) * m.wheel.Rollers[5].InPorts[1].F[3];
  m.wheel.Rollers[5].crosses[1,3] = (m.wheel.Rollers[5].InPorts[1].P[1] - m.wheel.Rollers[5].r[1]) * m.wheel.Rollers[5].InPorts[1].F[2] - (m.wheel.Rollers[5].InPorts[1].P[2] - m.wheel.Rollers[5].r[2]) * m.wheel.Rollers[5].InPorts[1].F[1];
  m.wheel.Rollers[5].crosses[2,1] = (m.wheel.Rollers[5].InPorts[2].P[2] - m.wheel.Rollers[5].r[2]) * m.wheel.Rollers[5].InPorts[2].F[3] - (m.wheel.Rollers[5].InPorts[2].P[3] - m.wheel.Rollers[5].r[3]) * m.wheel.Rollers[5].InPorts[2].F[2];
  m.wheel.Rollers[5].crosses[2,2] = (m.wheel.Rollers[5].InPorts[2].P[3] - m.wheel.Rollers[5].r[3]) * m.wheel.Rollers[5].InPorts[2].F[1] - (m.wheel.Rollers[5].InPorts[2].P[1] - m.wheel.Rollers[5].r[1]) * m.wheel.Rollers[5].InPorts[2].F[3];
  m.wheel.Rollers[5].crosses[2,3] = (m.wheel.Rollers[5].InPorts[2].P[1] - m.wheel.Rollers[5].r[1]) * m.wheel.Rollers[5].InPorts[2].F[2] - (m.wheel.Rollers[5].InPorts[2].P[2] - m.wheel.Rollers[5].r[2]) * m.wheel.Rollers[5].InPorts[2].F[1];
  m.wheel.Rollers[5].F[1] = m.wheel.Rollers[5].Gravity[1] * m.wheel.Rollers[5].m + m.wheel.Rollers[5].InPorts[1].F[1] + m.wheel.Rollers[5].InPorts[2].F[1];
  m.wheel.Rollers[5].F[2] = m.wheel.Rollers[5].Gravity[2] * m.wheel.Rollers[5].m + m.wheel.Rollers[5].InPorts[1].F[2] + m.wheel.Rollers[5].InPorts[2].F[2];
  m.wheel.Rollers[5].F[3] = m.wheel.Rollers[5].Gravity[3] * m.wheel.Rollers[5].m + m.wheel.Rollers[5].InPorts[1].F[3] + m.wheel.Rollers[5].InPorts[2].F[3];
  m.wheel.Rollers[5].M[1] = m.wheel.Rollers[5].InPorts[1].M[1] + m.wheel.Rollers[5].crosses[1,1] + m.wheel.Rollers[5].InPorts[2].M[1] + m.wheel.Rollers[5].crosses[2,1];
  m.wheel.Rollers[5].M[2] = m.wheel.Rollers[5].InPorts[1].M[2] + m.wheel.Rollers[5].crosses[1,2] + m.wheel.Rollers[5].InPorts[2].M[2] + m.wheel.Rollers[5].crosses[2,2];
  m.wheel.Rollers[5].M[3] = m.wheel.Rollers[5].InPorts[1].M[3] + m.wheel.Rollers[5].crosses[1,3] + m.wheel.Rollers[5].InPorts[2].M[3] + m.wheel.Rollers[5].crosses[2,3];
  der(m.wheel.Rollers[5].Active) = 0.0;
  der(m.wheel.Rollers[5].r[1]) = m.wheel.Rollers[5].v[1] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].r[2]) = m.wheel.Rollers[5].v[2] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].r[3]) = m.wheel.Rollers[5].v[3] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].v[1]) = m.wheel.Rollers[5].a[1] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].v[2]) = m.wheel.Rollers[5].a[2] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].v[3]) = m.wheel.Rollers[5].a[3] * m.wheel.Rollers[5].Active;
  m.wheel.Rollers[5].a[1] * m.wheel.Rollers[5].m = m.wheel.Rollers[5].F[1];
  m.wheel.Rollers[5].a[2] * m.wheel.Rollers[5].m = m.wheel.Rollers[5].F[2];
  m.wheel.Rollers[5].a[3] * m.wheel.Rollers[5].m = m.wheel.Rollers[5].F[3];
  {der(m.wheel.Rollers[5].q[1]), der(m.wheel.Rollers[5].q[2]), der(m.wheel.Rollers[5].q[3]), der(m.wheel.Rollers[5].q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Rollers[5].q[1], m.wheel.Rollers[5].q[2], m.wheel.Rollers[5].q[3], m.wheel.Rollers[5].q[4]}, {0.0, m.wheel.Rollers[5].omega[1], m.wheel.Rollers[5].omega[2], m.wheel.Rollers[5].omega[3]}) * 0.5 * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].omega[1]) = m.wheel.Rollers[5].epsilon[1] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].omega[2]) = m.wheel.Rollers[5].epsilon[2] * m.wheel.Rollers[5].Active;
  der(m.wheel.Rollers[5].omega[3]) = m.wheel.Rollers[5].epsilon[3] * m.wheel.Rollers[5].Active;
  m.wheel.Rollers[5].T = MbsLite.Util.Quaternions.QToT({m.wheel.Rollers[5].q[1], m.wheel.Rollers[5].q[2], m.wheel.Rollers[5].q[3], m.wheel.Rollers[5].q[4]});
  m.wheel.Rollers[5].I[1,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].I[1,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].I[1,3] * m.wheel.Rollers[5].epsilon[3] + m.wheel.Rollers[5].omega[2] * (m.wheel.Rollers[5].I[3,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[3,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[3,3] * m.wheel.Rollers[5].omega[3]) - m.wheel.Rollers[5].omega[3] * (m.wheel.Rollers[5].I[2,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[2,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[2,3] * m.wheel.Rollers[5].omega[3]) = m.wheel.Rollers[5].T[1,1] * m.wheel.Rollers[5].M[1] + m.wheel.Rollers[5].T[2,1] * m.wheel.Rollers[5].M[2] + m.wheel.Rollers[5].T[3,1] * m.wheel.Rollers[5].M[3];
  m.wheel.Rollers[5].I[2,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].I[2,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].I[2,3] * m.wheel.Rollers[5].epsilon[3] + m.wheel.Rollers[5].omega[3] * (m.wheel.Rollers[5].I[1,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[1,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[1,3] * m.wheel.Rollers[5].omega[3]) - m.wheel.Rollers[5].omega[1] * (m.wheel.Rollers[5].I[3,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[3,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[3,3] * m.wheel.Rollers[5].omega[3]) = m.wheel.Rollers[5].T[1,2] * m.wheel.Rollers[5].M[1] + m.wheel.Rollers[5].T[2,2] * m.wheel.Rollers[5].M[2] + m.wheel.Rollers[5].T[3,2] * m.wheel.Rollers[5].M[3];
  m.wheel.Rollers[5].I[3,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].I[3,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].I[3,3] * m.wheel.Rollers[5].epsilon[3] + m.wheel.Rollers[5].omega[1] * (m.wheel.Rollers[5].I[2,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[2,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[2,3] * m.wheel.Rollers[5].omega[3]) - m.wheel.Rollers[5].omega[2] * (m.wheel.Rollers[5].I[1,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].I[1,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].I[1,3] * m.wheel.Rollers[5].omega[3]) = m.wheel.Rollers[5].T[1,3] * m.wheel.Rollers[5].M[1] + m.wheel.Rollers[5].T[2,3] * m.wheel.Rollers[5].M[2] + m.wheel.Rollers[5].T[3,3] * m.wheel.Rollers[5].M[3];
  m.wheel.Rollers[5].OutPort.r[1] = m.wheel.Rollers[5].r[1];
  m.wheel.Rollers[5].OutPort.r[2] = m.wheel.Rollers[5].r[2];
  m.wheel.Rollers[5].OutPort.r[3] = m.wheel.Rollers[5].r[3];
  m.wheel.Rollers[5].OutPort.v[1] = m.wheel.Rollers[5].v[1];
  m.wheel.Rollers[5].OutPort.v[2] = m.wheel.Rollers[5].v[2];
  m.wheel.Rollers[5].OutPort.v[3] = m.wheel.Rollers[5].v[3];
  m.wheel.Rollers[5].OutPort.a[1] = m.wheel.Rollers[5].a[1];
  m.wheel.Rollers[5].OutPort.a[2] = m.wheel.Rollers[5].a[2];
  m.wheel.Rollers[5].OutPort.a[3] = m.wheel.Rollers[5].a[3];
  m.wheel.Rollers[5].OutPort.T[1,1] = m.wheel.Rollers[5].T[1,1];
  m.wheel.Rollers[5].OutPort.T[1,2] = m.wheel.Rollers[5].T[1,2];
  m.wheel.Rollers[5].OutPort.T[1,3] = m.wheel.Rollers[5].T[1,3];
  m.wheel.Rollers[5].OutPort.T[2,1] = m.wheel.Rollers[5].T[2,1];
  m.wheel.Rollers[5].OutPort.T[2,2] = m.wheel.Rollers[5].T[2,2];
  m.wheel.Rollers[5].OutPort.T[2,3] = m.wheel.Rollers[5].T[2,3];
  m.wheel.Rollers[5].OutPort.T[3,1] = m.wheel.Rollers[5].T[3,1];
  m.wheel.Rollers[5].OutPort.T[3,2] = m.wheel.Rollers[5].T[3,2];
  m.wheel.Rollers[5].OutPort.T[3,3] = m.wheel.Rollers[5].T[3,3];
  m.wheel.Rollers[5].OutPort.omega[1] = m.wheel.Rollers[5].T[1,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].T[1,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].T[1,3] * m.wheel.Rollers[5].omega[3];
  m.wheel.Rollers[5].OutPort.omega[2] = m.wheel.Rollers[5].T[2,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].T[2,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].T[2,3] * m.wheel.Rollers[5].omega[3];
  m.wheel.Rollers[5].OutPort.omega[3] = m.wheel.Rollers[5].T[3,1] * m.wheel.Rollers[5].omega[1] + m.wheel.Rollers[5].T[3,2] * m.wheel.Rollers[5].omega[2] + m.wheel.Rollers[5].T[3,3] * m.wheel.Rollers[5].omega[3];
  m.wheel.Rollers[5].OutPort.epsilon[1] = m.wheel.Rollers[5].T[1,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].T[1,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].T[1,3] * m.wheel.Rollers[5].epsilon[3];
  m.wheel.Rollers[5].OutPort.epsilon[2] = m.wheel.Rollers[5].T[2,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].T[2,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].T[2,3] * m.wheel.Rollers[5].epsilon[3];
  m.wheel.Rollers[5].OutPort.epsilon[3] = m.wheel.Rollers[5].T[3,1] * m.wheel.Rollers[5].epsilon[1] + m.wheel.Rollers[5].T[3,2] * m.wheel.Rollers[5].epsilon[2] + m.wheel.Rollers[5].T[3,3] * m.wheel.Rollers[5].epsilon[3];
  m.wheel.Joints[1].RA[1] = m.wheel.Joints[1].InPortA.r[1] + m.wheel.Joints[1].InPortA.T[1,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[1,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[1,3] * m.wheel.Joints[1].rA[3];
  m.wheel.Joints[1].RA[2] = m.wheel.Joints[1].InPortA.r[2] + m.wheel.Joints[1].InPortA.T[2,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[2,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[2,3] * m.wheel.Joints[1].rA[3];
  m.wheel.Joints[1].RA[3] = m.wheel.Joints[1].InPortA.r[3] + m.wheel.Joints[1].InPortA.T[3,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[3,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[3,3] * m.wheel.Joints[1].rA[3];
  m.wheel.Joints[1].RB[1] = m.wheel.Joints[1].InPortB.r[1] + m.wheel.Joints[1].InPortB.T[1,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[1,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[1,3] * m.wheel.Joints[1].rB[3];
  m.wheel.Joints[1].RB[2] = m.wheel.Joints[1].InPortB.r[2] + m.wheel.Joints[1].InPortB.T[2,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[2,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[2,3] * m.wheel.Joints[1].rB[3];
  m.wheel.Joints[1].RB[3] = m.wheel.Joints[1].InPortB.r[3] + m.wheel.Joints[1].InPortB.T[3,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[3,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[3,3] * m.wheel.Joints[1].rB[3];
  m.wheel.Joints[1].vA[1] = m.wheel.Joints[1].InPortA.v[1] + m.wheel.Joints[1].InPortA.omega[2] * (m.wheel.Joints[1].InPortA.T[3,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[3,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[3,3] * m.wheel.Joints[1].rA[3]) - m.wheel.Joints[1].InPortA.omega[3] * (m.wheel.Joints[1].InPortA.T[2,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[2,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[2,3] * m.wheel.Joints[1].rA[3]);
  m.wheel.Joints[1].vA[2] = m.wheel.Joints[1].InPortA.v[2] + m.wheel.Joints[1].InPortA.omega[3] * (m.wheel.Joints[1].InPortA.T[1,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[1,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[1,3] * m.wheel.Joints[1].rA[3]) - m.wheel.Joints[1].InPortA.omega[1] * (m.wheel.Joints[1].InPortA.T[3,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[3,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[3,3] * m.wheel.Joints[1].rA[3]);
  m.wheel.Joints[1].vA[3] = m.wheel.Joints[1].InPortA.v[3] + m.wheel.Joints[1].InPortA.omega[1] * (m.wheel.Joints[1].InPortA.T[2,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[2,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[2,3] * m.wheel.Joints[1].rA[3]) - m.wheel.Joints[1].InPortA.omega[2] * (m.wheel.Joints[1].InPortA.T[1,1] * m.wheel.Joints[1].rA[1] + m.wheel.Joints[1].InPortA.T[1,2] * m.wheel.Joints[1].rA[2] + m.wheel.Joints[1].InPortA.T[1,3] * m.wheel.Joints[1].rA[3]);
  m.wheel.Joints[1].vB[1] = m.wheel.Joints[1].InPortB.v[1] + m.wheel.Joints[1].InPortB.omega[2] * (m.wheel.Joints[1].InPortB.T[3,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[3,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[3,3] * m.wheel.Joints[1].rB[3]) - m.wheel.Joints[1].InPortB.omega[3] * (m.wheel.Joints[1].InPortB.T[2,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[2,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[2,3] * m.wheel.Joints[1].rB[3]);
  m.wheel.Joints[1].vB[2] = m.wheel.Joints[1].InPortB.v[2] + m.wheel.Joints[1].InPortB.omega[3] * (m.wheel.Joints[1].InPortB.T[1,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[1,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[1,3] * m.wheel.Joints[1].rB[3]) - m.wheel.Joints[1].InPortB.omega[1] * (m.wheel.Joints[1].InPortB.T[3,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[3,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[3,3] * m.wheel.Joints[1].rB[3]);
  m.wheel.Joints[1].vB[3] = m.wheel.Joints[1].InPortB.v[3] + m.wheel.Joints[1].InPortB.omega[1] * (m.wheel.Joints[1].InPortB.T[2,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[2,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[2,3] * m.wheel.Joints[1].rB[3]) - m.wheel.Joints[1].InPortB.omega[2] * (m.wheel.Joints[1].InPortB.T[1,1] * m.wheel.Joints[1].rB[1] + m.wheel.Joints[1].InPortB.T[1,2] * m.wheel.Joints[1].rB[2] + m.wheel.Joints[1].InPortB.T[1,3] * m.wheel.Joints[1].rB[3]);
  m.wheel.Joints[1].vA[1] = m.wheel.Joints[1].vB[1];
  m.wheel.Joints[1].vA[2] = m.wheel.Joints[1].vB[2];
  m.wheel.Joints[1].vA[3] = m.wheel.Joints[1].vB[3];
  m.wheel.Joints[1].nAi[1] = m.wheel.Joints[1].InPortA.T[1,1] * m.wheel.Joints[1].nA[1] + m.wheel.Joints[1].InPortA.T[1,2] * m.wheel.Joints[1].nA[2] + m.wheel.Joints[1].InPortA.T[1,3] * m.wheel.Joints[1].nA[3];
  m.wheel.Joints[1].nAi[2] = m.wheel.Joints[1].InPortA.T[2,1] * m.wheel.Joints[1].nA[1] + m.wheel.Joints[1].InPortA.T[2,2] * m.wheel.Joints[1].nA[2] + m.wheel.Joints[1].InPortA.T[2,3] * m.wheel.Joints[1].nA[3];
  m.wheel.Joints[1].nAi[3] = m.wheel.Joints[1].InPortA.T[3,1] * m.wheel.Joints[1].nA[1] + m.wheel.Joints[1].InPortA.T[3,2] * m.wheel.Joints[1].nA[2] + m.wheel.Joints[1].InPortA.T[3,3] * m.wheel.Joints[1].nA[3];
  m.wheel.Joints[1].omegar[1] = m.wheel.Joints[1].InPortB.omega[1] - m.wheel.Joints[1].InPortA.omega[1];
  m.wheel.Joints[1].omegar[2] = m.wheel.Joints[1].InPortB.omega[2] - m.wheel.Joints[1].InPortA.omega[2];
  m.wheel.Joints[1].omegar[3] = m.wheel.Joints[1].InPortB.omega[3] - m.wheel.Joints[1].InPortA.omega[3];
  m.wheel.Joints[1].epsilonr[1] = m.wheel.Joints[1].InPortB.epsilon[1] - m.wheel.Joints[1].InPortA.epsilon[1] - (m.wheel.Joints[1].InPortA.omega[2] * m.wheel.Joints[1].omegar[3] - m.wheel.Joints[1].InPortA.omega[3] * m.wheel.Joints[1].omegar[2]);
  m.wheel.Joints[1].epsilonr[2] = m.wheel.Joints[1].InPortB.epsilon[2] - m.wheel.Joints[1].InPortA.epsilon[2] - (m.wheel.Joints[1].InPortA.omega[3] * m.wheel.Joints[1].omegar[1] - m.wheel.Joints[1].InPortA.omega[1] * m.wheel.Joints[1].omegar[3]);
  m.wheel.Joints[1].epsilonr[3] = m.wheel.Joints[1].InPortB.epsilon[3] - m.wheel.Joints[1].InPortA.epsilon[3] - (m.wheel.Joints[1].InPortA.omega[1] * m.wheel.Joints[1].omegar[2] - m.wheel.Joints[1].InPortA.omega[2] * m.wheel.Joints[1].omegar[1]);
  m.wheel.Joints[1].epsilonr[1] = m.wheel.Joints[1].nAi[1] * m.wheel.Joints[1].lambda;
  m.wheel.Joints[1].epsilonr[2] = m.wheel.Joints[1].nAi[2] * m.wheel.Joints[1].lambda;
  m.wheel.Joints[1].epsilonr[3] = m.wheel.Joints[1].nAi[3] * m.wheel.Joints[1].lambda;
  m.wheel.Joints[1].M = m.wheel.Joints[1].OutPortA.M[1] * m.wheel.Joints[1].nAi[1] + m.wheel.Joints[1].OutPortA.M[2] * m.wheel.Joints[1].nAi[2] + m.wheel.Joints[1].OutPortA.M[3] * m.wheel.Joints[1].nAi[3];
  m.wheel.Joints[1].M = 0.0;
  m.wheel.Joints[1].OutPortA.P[1] = m.wheel.Joints[1].RA[1];
  m.wheel.Joints[1].OutPortA.P[2] = m.wheel.Joints[1].RA[2];
  m.wheel.Joints[1].OutPortA.P[3] = m.wheel.Joints[1].RA[3];
  m.wheel.Joints[1].OutPortB.P[1] = m.wheel.Joints[1].RB[1];
  m.wheel.Joints[1].OutPortB.P[2] = m.wheel.Joints[1].RB[2];
  m.wheel.Joints[1].OutPortB.P[3] = m.wheel.Joints[1].RB[3];
  der(m.wheel.Joints[1].mu) = m.wheel.Joints[1].lambda;
  der(m.wheel.Joints[1].angle) = m.wheel.Joints[1].mu;
  m.wheel.Joints[1].OutPortA.F[1] + m.wheel.Joints[1].OutPortB.F[1] = 0.0;
  m.wheel.Joints[1].OutPortA.F[2] + m.wheel.Joints[1].OutPortB.F[2] = 0.0;
  m.wheel.Joints[1].OutPortA.F[3] + m.wheel.Joints[1].OutPortB.F[3] = 0.0;
  m.wheel.Joints[1].OutPortA.M[1] + m.wheel.Joints[1].OutPortB.M[1] = 0.0;
  m.wheel.Joints[1].OutPortA.M[2] + m.wheel.Joints[1].OutPortB.M[2] = 0.0;
  m.wheel.Joints[1].OutPortA.M[3] + m.wheel.Joints[1].OutPortB.M[3] = 0.0;
  m.wheel.Joints[2].RA[1] = m.wheel.Joints[2].InPortA.r[1] + m.wheel.Joints[2].InPortA.T[1,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[1,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[1,3] * m.wheel.Joints[2].rA[3];
  m.wheel.Joints[2].RA[2] = m.wheel.Joints[2].InPortA.r[2] + m.wheel.Joints[2].InPortA.T[2,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[2,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[2,3] * m.wheel.Joints[2].rA[3];
  m.wheel.Joints[2].RA[3] = m.wheel.Joints[2].InPortA.r[3] + m.wheel.Joints[2].InPortA.T[3,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[3,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[3,3] * m.wheel.Joints[2].rA[3];
  m.wheel.Joints[2].RB[1] = m.wheel.Joints[2].InPortB.r[1] + m.wheel.Joints[2].InPortB.T[1,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[1,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[1,3] * m.wheel.Joints[2].rB[3];
  m.wheel.Joints[2].RB[2] = m.wheel.Joints[2].InPortB.r[2] + m.wheel.Joints[2].InPortB.T[2,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[2,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[2,3] * m.wheel.Joints[2].rB[3];
  m.wheel.Joints[2].RB[3] = m.wheel.Joints[2].InPortB.r[3] + m.wheel.Joints[2].InPortB.T[3,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[3,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[3,3] * m.wheel.Joints[2].rB[3];
  m.wheel.Joints[2].vA[1] = m.wheel.Joints[2].InPortA.v[1] + m.wheel.Joints[2].InPortA.omega[2] * (m.wheel.Joints[2].InPortA.T[3,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[3,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[3,3] * m.wheel.Joints[2].rA[3]) - m.wheel.Joints[2].InPortA.omega[3] * (m.wheel.Joints[2].InPortA.T[2,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[2,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[2,3] * m.wheel.Joints[2].rA[3]);
  m.wheel.Joints[2].vA[2] = m.wheel.Joints[2].InPortA.v[2] + m.wheel.Joints[2].InPortA.omega[3] * (m.wheel.Joints[2].InPortA.T[1,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[1,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[1,3] * m.wheel.Joints[2].rA[3]) - m.wheel.Joints[2].InPortA.omega[1] * (m.wheel.Joints[2].InPortA.T[3,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[3,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[3,3] * m.wheel.Joints[2].rA[3]);
  m.wheel.Joints[2].vA[3] = m.wheel.Joints[2].InPortA.v[3] + m.wheel.Joints[2].InPortA.omega[1] * (m.wheel.Joints[2].InPortA.T[2,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[2,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[2,3] * m.wheel.Joints[2].rA[3]) - m.wheel.Joints[2].InPortA.omega[2] * (m.wheel.Joints[2].InPortA.T[1,1] * m.wheel.Joints[2].rA[1] + m.wheel.Joints[2].InPortA.T[1,2] * m.wheel.Joints[2].rA[2] + m.wheel.Joints[2].InPortA.T[1,3] * m.wheel.Joints[2].rA[3]);
  m.wheel.Joints[2].vB[1] = m.wheel.Joints[2].InPortB.v[1] + m.wheel.Joints[2].InPortB.omega[2] * (m.wheel.Joints[2].InPortB.T[3,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[3,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[3,3] * m.wheel.Joints[2].rB[3]) - m.wheel.Joints[2].InPortB.omega[3] * (m.wheel.Joints[2].InPortB.T[2,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[2,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[2,3] * m.wheel.Joints[2].rB[3]);
  m.wheel.Joints[2].vB[2] = m.wheel.Joints[2].InPortB.v[2] + m.wheel.Joints[2].InPortB.omega[3] * (m.wheel.Joints[2].InPortB.T[1,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[1,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[1,3] * m.wheel.Joints[2].rB[3]) - m.wheel.Joints[2].InPortB.omega[1] * (m.wheel.Joints[2].InPortB.T[3,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[3,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[3,3] * m.wheel.Joints[2].rB[3]);
  m.wheel.Joints[2].vB[3] = m.wheel.Joints[2].InPortB.v[3] + m.wheel.Joints[2].InPortB.omega[1] * (m.wheel.Joints[2].InPortB.T[2,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[2,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[2,3] * m.wheel.Joints[2].rB[3]) - m.wheel.Joints[2].InPortB.omega[2] * (m.wheel.Joints[2].InPortB.T[1,1] * m.wheel.Joints[2].rB[1] + m.wheel.Joints[2].InPortB.T[1,2] * m.wheel.Joints[2].rB[2] + m.wheel.Joints[2].InPortB.T[1,3] * m.wheel.Joints[2].rB[3]);
  m.wheel.Joints[2].vA[1] = m.wheel.Joints[2].vB[1];
  m.wheel.Joints[2].vA[2] = m.wheel.Joints[2].vB[2];
  m.wheel.Joints[2].vA[3] = m.wheel.Joints[2].vB[3];
  m.wheel.Joints[2].nAi[1] = m.wheel.Joints[2].InPortA.T[1,1] * m.wheel.Joints[2].nA[1] + m.wheel.Joints[2].InPortA.T[1,2] * m.wheel.Joints[2].nA[2] + m.wheel.Joints[2].InPortA.T[1,3] * m.wheel.Joints[2].nA[3];
  m.wheel.Joints[2].nAi[2] = m.wheel.Joints[2].InPortA.T[2,1] * m.wheel.Joints[2].nA[1] + m.wheel.Joints[2].InPortA.T[2,2] * m.wheel.Joints[2].nA[2] + m.wheel.Joints[2].InPortA.T[2,3] * m.wheel.Joints[2].nA[3];
  m.wheel.Joints[2].nAi[3] = m.wheel.Joints[2].InPortA.T[3,1] * m.wheel.Joints[2].nA[1] + m.wheel.Joints[2].InPortA.T[3,2] * m.wheel.Joints[2].nA[2] + m.wheel.Joints[2].InPortA.T[3,3] * m.wheel.Joints[2].nA[3];
  m.wheel.Joints[2].omegar[1] = m.wheel.Joints[2].InPortB.omega[1] - m.wheel.Joints[2].InPortA.omega[1];
  m.wheel.Joints[2].omegar[2] = m.wheel.Joints[2].InPortB.omega[2] - m.wheel.Joints[2].InPortA.omega[2];
  m.wheel.Joints[2].omegar[3] = m.wheel.Joints[2].InPortB.omega[3] - m.wheel.Joints[2].InPortA.omega[3];
  m.wheel.Joints[2].epsilonr[1] = m.wheel.Joints[2].InPortB.epsilon[1] - m.wheel.Joints[2].InPortA.epsilon[1] - (m.wheel.Joints[2].InPortA.omega[2] * m.wheel.Joints[2].omegar[3] - m.wheel.Joints[2].InPortA.omega[3] * m.wheel.Joints[2].omegar[2]);
  m.wheel.Joints[2].epsilonr[2] = m.wheel.Joints[2].InPortB.epsilon[2] - m.wheel.Joints[2].InPortA.epsilon[2] - (m.wheel.Joints[2].InPortA.omega[3] * m.wheel.Joints[2].omegar[1] - m.wheel.Joints[2].InPortA.omega[1] * m.wheel.Joints[2].omegar[3]);
  m.wheel.Joints[2].epsilonr[3] = m.wheel.Joints[2].InPortB.epsilon[3] - m.wheel.Joints[2].InPortA.epsilon[3] - (m.wheel.Joints[2].InPortA.omega[1] * m.wheel.Joints[2].omegar[2] - m.wheel.Joints[2].InPortA.omega[2] * m.wheel.Joints[2].omegar[1]);
  m.wheel.Joints[2].epsilonr[1] = m.wheel.Joints[2].nAi[1] * m.wheel.Joints[2].lambda;
  m.wheel.Joints[2].epsilonr[2] = m.wheel.Joints[2].nAi[2] * m.wheel.Joints[2].lambda;
  m.wheel.Joints[2].epsilonr[3] = m.wheel.Joints[2].nAi[3] * m.wheel.Joints[2].lambda;
  m.wheel.Joints[2].M = m.wheel.Joints[2].OutPortA.M[1] * m.wheel.Joints[2].nAi[1] + m.wheel.Joints[2].OutPortA.M[2] * m.wheel.Joints[2].nAi[2] + m.wheel.Joints[2].OutPortA.M[3] * m.wheel.Joints[2].nAi[3];
  m.wheel.Joints[2].M = 0.0;
  m.wheel.Joints[2].OutPortA.P[1] = m.wheel.Joints[2].RA[1];
  m.wheel.Joints[2].OutPortA.P[2] = m.wheel.Joints[2].RA[2];
  m.wheel.Joints[2].OutPortA.P[3] = m.wheel.Joints[2].RA[3];
  m.wheel.Joints[2].OutPortB.P[1] = m.wheel.Joints[2].RB[1];
  m.wheel.Joints[2].OutPortB.P[2] = m.wheel.Joints[2].RB[2];
  m.wheel.Joints[2].OutPortB.P[3] = m.wheel.Joints[2].RB[3];
  der(m.wheel.Joints[2].mu) = m.wheel.Joints[2].lambda;
  der(m.wheel.Joints[2].angle) = m.wheel.Joints[2].mu;
  m.wheel.Joints[2].OutPortA.F[1] + m.wheel.Joints[2].OutPortB.F[1] = 0.0;
  m.wheel.Joints[2].OutPortA.F[2] + m.wheel.Joints[2].OutPortB.F[2] = 0.0;
  m.wheel.Joints[2].OutPortA.F[3] + m.wheel.Joints[2].OutPortB.F[3] = 0.0;
  m.wheel.Joints[2].OutPortA.M[1] + m.wheel.Joints[2].OutPortB.M[1] = 0.0;
  m.wheel.Joints[2].OutPortA.M[2] + m.wheel.Joints[2].OutPortB.M[2] = 0.0;
  m.wheel.Joints[2].OutPortA.M[3] + m.wheel.Joints[2].OutPortB.M[3] = 0.0;
  m.wheel.Joints[3].RA[1] = m.wheel.Joints[3].InPortA.r[1] + m.wheel.Joints[3].InPortA.T[1,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[1,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[1,3] * m.wheel.Joints[3].rA[3];
  m.wheel.Joints[3].RA[2] = m.wheel.Joints[3].InPortA.r[2] + m.wheel.Joints[3].InPortA.T[2,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[2,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[2,3] * m.wheel.Joints[3].rA[3];
  m.wheel.Joints[3].RA[3] = m.wheel.Joints[3].InPortA.r[3] + m.wheel.Joints[3].InPortA.T[3,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[3,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[3,3] * m.wheel.Joints[3].rA[3];
  m.wheel.Joints[3].RB[1] = m.wheel.Joints[3].InPortB.r[1] + m.wheel.Joints[3].InPortB.T[1,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[1,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[1,3] * m.wheel.Joints[3].rB[3];
  m.wheel.Joints[3].RB[2] = m.wheel.Joints[3].InPortB.r[2] + m.wheel.Joints[3].InPortB.T[2,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[2,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[2,3] * m.wheel.Joints[3].rB[3];
  m.wheel.Joints[3].RB[3] = m.wheel.Joints[3].InPortB.r[3] + m.wheel.Joints[3].InPortB.T[3,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[3,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[3,3] * m.wheel.Joints[3].rB[3];
  m.wheel.Joints[3].vA[1] = m.wheel.Joints[3].InPortA.v[1] + m.wheel.Joints[3].InPortA.omega[2] * (m.wheel.Joints[3].InPortA.T[3,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[3,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[3,3] * m.wheel.Joints[3].rA[3]) - m.wheel.Joints[3].InPortA.omega[3] * (m.wheel.Joints[3].InPortA.T[2,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[2,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[2,3] * m.wheel.Joints[3].rA[3]);
  m.wheel.Joints[3].vA[2] = m.wheel.Joints[3].InPortA.v[2] + m.wheel.Joints[3].InPortA.omega[3] * (m.wheel.Joints[3].InPortA.T[1,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[1,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[1,3] * m.wheel.Joints[3].rA[3]) - m.wheel.Joints[3].InPortA.omega[1] * (m.wheel.Joints[3].InPortA.T[3,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[3,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[3,3] * m.wheel.Joints[3].rA[3]);
  m.wheel.Joints[3].vA[3] = m.wheel.Joints[3].InPortA.v[3] + m.wheel.Joints[3].InPortA.omega[1] * (m.wheel.Joints[3].InPortA.T[2,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[2,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[2,3] * m.wheel.Joints[3].rA[3]) - m.wheel.Joints[3].InPortA.omega[2] * (m.wheel.Joints[3].InPortA.T[1,1] * m.wheel.Joints[3].rA[1] + m.wheel.Joints[3].InPortA.T[1,2] * m.wheel.Joints[3].rA[2] + m.wheel.Joints[3].InPortA.T[1,3] * m.wheel.Joints[3].rA[3]);
  m.wheel.Joints[3].vB[1] = m.wheel.Joints[3].InPortB.v[1] + m.wheel.Joints[3].InPortB.omega[2] * (m.wheel.Joints[3].InPortB.T[3,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[3,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[3,3] * m.wheel.Joints[3].rB[3]) - m.wheel.Joints[3].InPortB.omega[3] * (m.wheel.Joints[3].InPortB.T[2,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[2,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[2,3] * m.wheel.Joints[3].rB[3]);
  m.wheel.Joints[3].vB[2] = m.wheel.Joints[3].InPortB.v[2] + m.wheel.Joints[3].InPortB.omega[3] * (m.wheel.Joints[3].InPortB.T[1,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[1,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[1,3] * m.wheel.Joints[3].rB[3]) - m.wheel.Joints[3].InPortB.omega[1] * (m.wheel.Joints[3].InPortB.T[3,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[3,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[3,3] * m.wheel.Joints[3].rB[3]);
  m.wheel.Joints[3].vB[3] = m.wheel.Joints[3].InPortB.v[3] + m.wheel.Joints[3].InPortB.omega[1] * (m.wheel.Joints[3].InPortB.T[2,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[2,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[2,3] * m.wheel.Joints[3].rB[3]) - m.wheel.Joints[3].InPortB.omega[2] * (m.wheel.Joints[3].InPortB.T[1,1] * m.wheel.Joints[3].rB[1] + m.wheel.Joints[3].InPortB.T[1,2] * m.wheel.Joints[3].rB[2] + m.wheel.Joints[3].InPortB.T[1,3] * m.wheel.Joints[3].rB[3]);
  m.wheel.Joints[3].vA[1] = m.wheel.Joints[3].vB[1];
  m.wheel.Joints[3].vA[2] = m.wheel.Joints[3].vB[2];
  m.wheel.Joints[3].vA[3] = m.wheel.Joints[3].vB[3];
  m.wheel.Joints[3].nAi[1] = m.wheel.Joints[3].InPortA.T[1,1] * m.wheel.Joints[3].nA[1] + m.wheel.Joints[3].InPortA.T[1,2] * m.wheel.Joints[3].nA[2] + m.wheel.Joints[3].InPortA.T[1,3] * m.wheel.Joints[3].nA[3];
  m.wheel.Joints[3].nAi[2] = m.wheel.Joints[3].InPortA.T[2,1] * m.wheel.Joints[3].nA[1] + m.wheel.Joints[3].InPortA.T[2,2] * m.wheel.Joints[3].nA[2] + m.wheel.Joints[3].InPortA.T[2,3] * m.wheel.Joints[3].nA[3];
  m.wheel.Joints[3].nAi[3] = m.wheel.Joints[3].InPortA.T[3,1] * m.wheel.Joints[3].nA[1] + m.wheel.Joints[3].InPortA.T[3,2] * m.wheel.Joints[3].nA[2] + m.wheel.Joints[3].InPortA.T[3,3] * m.wheel.Joints[3].nA[3];
  m.wheel.Joints[3].omegar[1] = m.wheel.Joints[3].InPortB.omega[1] - m.wheel.Joints[3].InPortA.omega[1];
  m.wheel.Joints[3].omegar[2] = m.wheel.Joints[3].InPortB.omega[2] - m.wheel.Joints[3].InPortA.omega[2];
  m.wheel.Joints[3].omegar[3] = m.wheel.Joints[3].InPortB.omega[3] - m.wheel.Joints[3].InPortA.omega[3];
  m.wheel.Joints[3].epsilonr[1] = m.wheel.Joints[3].InPortB.epsilon[1] - m.wheel.Joints[3].InPortA.epsilon[1] - (m.wheel.Joints[3].InPortA.omega[2] * m.wheel.Joints[3].omegar[3] - m.wheel.Joints[3].InPortA.omega[3] * m.wheel.Joints[3].omegar[2]);
  m.wheel.Joints[3].epsilonr[2] = m.wheel.Joints[3].InPortB.epsilon[2] - m.wheel.Joints[3].InPortA.epsilon[2] - (m.wheel.Joints[3].InPortA.omega[3] * m.wheel.Joints[3].omegar[1] - m.wheel.Joints[3].InPortA.omega[1] * m.wheel.Joints[3].omegar[3]);
  m.wheel.Joints[3].epsilonr[3] = m.wheel.Joints[3].InPortB.epsilon[3] - m.wheel.Joints[3].InPortA.epsilon[3] - (m.wheel.Joints[3].InPortA.omega[1] * m.wheel.Joints[3].omegar[2] - m.wheel.Joints[3].InPortA.omega[2] * m.wheel.Joints[3].omegar[1]);
  m.wheel.Joints[3].epsilonr[1] = m.wheel.Joints[3].nAi[1] * m.wheel.Joints[3].lambda;
  m.wheel.Joints[3].epsilonr[2] = m.wheel.Joints[3].nAi[2] * m.wheel.Joints[3].lambda;
  m.wheel.Joints[3].epsilonr[3] = m.wheel.Joints[3].nAi[3] * m.wheel.Joints[3].lambda;
  m.wheel.Joints[3].M = m.wheel.Joints[3].OutPortA.M[1] * m.wheel.Joints[3].nAi[1] + m.wheel.Joints[3].OutPortA.M[2] * m.wheel.Joints[3].nAi[2] + m.wheel.Joints[3].OutPortA.M[3] * m.wheel.Joints[3].nAi[3];
  m.wheel.Joints[3].M = 0.0;
  m.wheel.Joints[3].OutPortA.P[1] = m.wheel.Joints[3].RA[1];
  m.wheel.Joints[3].OutPortA.P[2] = m.wheel.Joints[3].RA[2];
  m.wheel.Joints[3].OutPortA.P[3] = m.wheel.Joints[3].RA[3];
  m.wheel.Joints[3].OutPortB.P[1] = m.wheel.Joints[3].RB[1];
  m.wheel.Joints[3].OutPortB.P[2] = m.wheel.Joints[3].RB[2];
  m.wheel.Joints[3].OutPortB.P[3] = m.wheel.Joints[3].RB[3];
  der(m.wheel.Joints[3].mu) = m.wheel.Joints[3].lambda;
  der(m.wheel.Joints[3].angle) = m.wheel.Joints[3].mu;
  m.wheel.Joints[3].OutPortA.F[1] + m.wheel.Joints[3].OutPortB.F[1] = 0.0;
  m.wheel.Joints[3].OutPortA.F[2] + m.wheel.Joints[3].OutPortB.F[2] = 0.0;
  m.wheel.Joints[3].OutPortA.F[3] + m.wheel.Joints[3].OutPortB.F[3] = 0.0;
  m.wheel.Joints[3].OutPortA.M[1] + m.wheel.Joints[3].OutPortB.M[1] = 0.0;
  m.wheel.Joints[3].OutPortA.M[2] + m.wheel.Joints[3].OutPortB.M[2] = 0.0;
  m.wheel.Joints[3].OutPortA.M[3] + m.wheel.Joints[3].OutPortB.M[3] = 0.0;
  m.wheel.Joints[4].RA[1] = m.wheel.Joints[4].InPortA.r[1] + m.wheel.Joints[4].InPortA.T[1,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[1,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[1,3] * m.wheel.Joints[4].rA[3];
  m.wheel.Joints[4].RA[2] = m.wheel.Joints[4].InPortA.r[2] + m.wheel.Joints[4].InPortA.T[2,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[2,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[2,3] * m.wheel.Joints[4].rA[3];
  m.wheel.Joints[4].RA[3] = m.wheel.Joints[4].InPortA.r[3] + m.wheel.Joints[4].InPortA.T[3,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[3,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[3,3] * m.wheel.Joints[4].rA[3];
  m.wheel.Joints[4].RB[1] = m.wheel.Joints[4].InPortB.r[1] + m.wheel.Joints[4].InPortB.T[1,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[1,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[1,3] * m.wheel.Joints[4].rB[3];
  m.wheel.Joints[4].RB[2] = m.wheel.Joints[4].InPortB.r[2] + m.wheel.Joints[4].InPortB.T[2,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[2,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[2,3] * m.wheel.Joints[4].rB[3];
  m.wheel.Joints[4].RB[3] = m.wheel.Joints[4].InPortB.r[3] + m.wheel.Joints[4].InPortB.T[3,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[3,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[3,3] * m.wheel.Joints[4].rB[3];
  m.wheel.Joints[4].vA[1] = m.wheel.Joints[4].InPortA.v[1] + m.wheel.Joints[4].InPortA.omega[2] * (m.wheel.Joints[4].InPortA.T[3,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[3,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[3,3] * m.wheel.Joints[4].rA[3]) - m.wheel.Joints[4].InPortA.omega[3] * (m.wheel.Joints[4].InPortA.T[2,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[2,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[2,3] * m.wheel.Joints[4].rA[3]);
  m.wheel.Joints[4].vA[2] = m.wheel.Joints[4].InPortA.v[2] + m.wheel.Joints[4].InPortA.omega[3] * (m.wheel.Joints[4].InPortA.T[1,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[1,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[1,3] * m.wheel.Joints[4].rA[3]) - m.wheel.Joints[4].InPortA.omega[1] * (m.wheel.Joints[4].InPortA.T[3,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[3,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[3,3] * m.wheel.Joints[4].rA[3]);
  m.wheel.Joints[4].vA[3] = m.wheel.Joints[4].InPortA.v[3] + m.wheel.Joints[4].InPortA.omega[1] * (m.wheel.Joints[4].InPortA.T[2,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[2,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[2,3] * m.wheel.Joints[4].rA[3]) - m.wheel.Joints[4].InPortA.omega[2] * (m.wheel.Joints[4].InPortA.T[1,1] * m.wheel.Joints[4].rA[1] + m.wheel.Joints[4].InPortA.T[1,2] * m.wheel.Joints[4].rA[2] + m.wheel.Joints[4].InPortA.T[1,3] * m.wheel.Joints[4].rA[3]);
  m.wheel.Joints[4].vB[1] = m.wheel.Joints[4].InPortB.v[1] + m.wheel.Joints[4].InPortB.omega[2] * (m.wheel.Joints[4].InPortB.T[3,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[3,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[3,3] * m.wheel.Joints[4].rB[3]) - m.wheel.Joints[4].InPortB.omega[3] * (m.wheel.Joints[4].InPortB.T[2,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[2,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[2,3] * m.wheel.Joints[4].rB[3]);
  m.wheel.Joints[4].vB[2] = m.wheel.Joints[4].InPortB.v[2] + m.wheel.Joints[4].InPortB.omega[3] * (m.wheel.Joints[4].InPortB.T[1,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[1,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[1,3] * m.wheel.Joints[4].rB[3]) - m.wheel.Joints[4].InPortB.omega[1] * (m.wheel.Joints[4].InPortB.T[3,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[3,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[3,3] * m.wheel.Joints[4].rB[3]);
  m.wheel.Joints[4].vB[3] = m.wheel.Joints[4].InPortB.v[3] + m.wheel.Joints[4].InPortB.omega[1] * (m.wheel.Joints[4].InPortB.T[2,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[2,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[2,3] * m.wheel.Joints[4].rB[3]) - m.wheel.Joints[4].InPortB.omega[2] * (m.wheel.Joints[4].InPortB.T[1,1] * m.wheel.Joints[4].rB[1] + m.wheel.Joints[4].InPortB.T[1,2] * m.wheel.Joints[4].rB[2] + m.wheel.Joints[4].InPortB.T[1,3] * m.wheel.Joints[4].rB[3]);
  m.wheel.Joints[4].vA[1] = m.wheel.Joints[4].vB[1];
  m.wheel.Joints[4].vA[2] = m.wheel.Joints[4].vB[2];
  m.wheel.Joints[4].vA[3] = m.wheel.Joints[4].vB[3];
  m.wheel.Joints[4].nAi[1] = m.wheel.Joints[4].InPortA.T[1,1] * m.wheel.Joints[4].nA[1] + m.wheel.Joints[4].InPortA.T[1,2] * m.wheel.Joints[4].nA[2] + m.wheel.Joints[4].InPortA.T[1,3] * m.wheel.Joints[4].nA[3];
  m.wheel.Joints[4].nAi[2] = m.wheel.Joints[4].InPortA.T[2,1] * m.wheel.Joints[4].nA[1] + m.wheel.Joints[4].InPortA.T[2,2] * m.wheel.Joints[4].nA[2] + m.wheel.Joints[4].InPortA.T[2,3] * m.wheel.Joints[4].nA[3];
  m.wheel.Joints[4].nAi[3] = m.wheel.Joints[4].InPortA.T[3,1] * m.wheel.Joints[4].nA[1] + m.wheel.Joints[4].InPortA.T[3,2] * m.wheel.Joints[4].nA[2] + m.wheel.Joints[4].InPortA.T[3,3] * m.wheel.Joints[4].nA[3];
  m.wheel.Joints[4].omegar[1] = m.wheel.Joints[4].InPortB.omega[1] - m.wheel.Joints[4].InPortA.omega[1];
  m.wheel.Joints[4].omegar[2] = m.wheel.Joints[4].InPortB.omega[2] - m.wheel.Joints[4].InPortA.omega[2];
  m.wheel.Joints[4].omegar[3] = m.wheel.Joints[4].InPortB.omega[3] - m.wheel.Joints[4].InPortA.omega[3];
  m.wheel.Joints[4].epsilonr[1] = m.wheel.Joints[4].InPortB.epsilon[1] - m.wheel.Joints[4].InPortA.epsilon[1] - (m.wheel.Joints[4].InPortA.omega[2] * m.wheel.Joints[4].omegar[3] - m.wheel.Joints[4].InPortA.omega[3] * m.wheel.Joints[4].omegar[2]);
  m.wheel.Joints[4].epsilonr[2] = m.wheel.Joints[4].InPortB.epsilon[2] - m.wheel.Joints[4].InPortA.epsilon[2] - (m.wheel.Joints[4].InPortA.omega[3] * m.wheel.Joints[4].omegar[1] - m.wheel.Joints[4].InPortA.omega[1] * m.wheel.Joints[4].omegar[3]);
  m.wheel.Joints[4].epsilonr[3] = m.wheel.Joints[4].InPortB.epsilon[3] - m.wheel.Joints[4].InPortA.epsilon[3] - (m.wheel.Joints[4].InPortA.omega[1] * m.wheel.Joints[4].omegar[2] - m.wheel.Joints[4].InPortA.omega[2] * m.wheel.Joints[4].omegar[1]);
  m.wheel.Joints[4].epsilonr[1] = m.wheel.Joints[4].nAi[1] * m.wheel.Joints[4].lambda;
  m.wheel.Joints[4].epsilonr[2] = m.wheel.Joints[4].nAi[2] * m.wheel.Joints[4].lambda;
  m.wheel.Joints[4].epsilonr[3] = m.wheel.Joints[4].nAi[3] * m.wheel.Joints[4].lambda;
  m.wheel.Joints[4].M = m.wheel.Joints[4].OutPortA.M[1] * m.wheel.Joints[4].nAi[1] + m.wheel.Joints[4].OutPortA.M[2] * m.wheel.Joints[4].nAi[2] + m.wheel.Joints[4].OutPortA.M[3] * m.wheel.Joints[4].nAi[3];
  m.wheel.Joints[4].M = 0.0;
  m.wheel.Joints[4].OutPortA.P[1] = m.wheel.Joints[4].RA[1];
  m.wheel.Joints[4].OutPortA.P[2] = m.wheel.Joints[4].RA[2];
  m.wheel.Joints[4].OutPortA.P[3] = m.wheel.Joints[4].RA[3];
  m.wheel.Joints[4].OutPortB.P[1] = m.wheel.Joints[4].RB[1];
  m.wheel.Joints[4].OutPortB.P[2] = m.wheel.Joints[4].RB[2];
  m.wheel.Joints[4].OutPortB.P[3] = m.wheel.Joints[4].RB[3];
  der(m.wheel.Joints[4].mu) = m.wheel.Joints[4].lambda;
  der(m.wheel.Joints[4].angle) = m.wheel.Joints[4].mu;
  m.wheel.Joints[4].OutPortA.F[1] + m.wheel.Joints[4].OutPortB.F[1] = 0.0;
  m.wheel.Joints[4].OutPortA.F[2] + m.wheel.Joints[4].OutPortB.F[2] = 0.0;
  m.wheel.Joints[4].OutPortA.F[3] + m.wheel.Joints[4].OutPortB.F[3] = 0.0;
  m.wheel.Joints[4].OutPortA.M[1] + m.wheel.Joints[4].OutPortB.M[1] = 0.0;
  m.wheel.Joints[4].OutPortA.M[2] + m.wheel.Joints[4].OutPortB.M[2] = 0.0;
  m.wheel.Joints[4].OutPortA.M[3] + m.wheel.Joints[4].OutPortB.M[3] = 0.0;
  m.wheel.Joints[5].RA[1] = m.wheel.Joints[5].InPortA.r[1] + m.wheel.Joints[5].InPortA.T[1,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[1,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[1,3] * m.wheel.Joints[5].rA[3];
  m.wheel.Joints[5].RA[2] = m.wheel.Joints[5].InPortA.r[2] + m.wheel.Joints[5].InPortA.T[2,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[2,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[2,3] * m.wheel.Joints[5].rA[3];
  m.wheel.Joints[5].RA[3] = m.wheel.Joints[5].InPortA.r[3] + m.wheel.Joints[5].InPortA.T[3,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[3,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[3,3] * m.wheel.Joints[5].rA[3];
  m.wheel.Joints[5].RB[1] = m.wheel.Joints[5].InPortB.r[1] + m.wheel.Joints[5].InPortB.T[1,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[1,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[1,3] * m.wheel.Joints[5].rB[3];
  m.wheel.Joints[5].RB[2] = m.wheel.Joints[5].InPortB.r[2] + m.wheel.Joints[5].InPortB.T[2,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[2,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[2,3] * m.wheel.Joints[5].rB[3];
  m.wheel.Joints[5].RB[3] = m.wheel.Joints[5].InPortB.r[3] + m.wheel.Joints[5].InPortB.T[3,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[3,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[3,3] * m.wheel.Joints[5].rB[3];
  m.wheel.Joints[5].vA[1] = m.wheel.Joints[5].InPortA.v[1] + m.wheel.Joints[5].InPortA.omega[2] * (m.wheel.Joints[5].InPortA.T[3,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[3,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[3,3] * m.wheel.Joints[5].rA[3]) - m.wheel.Joints[5].InPortA.omega[3] * (m.wheel.Joints[5].InPortA.T[2,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[2,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[2,3] * m.wheel.Joints[5].rA[3]);
  m.wheel.Joints[5].vA[2] = m.wheel.Joints[5].InPortA.v[2] + m.wheel.Joints[5].InPortA.omega[3] * (m.wheel.Joints[5].InPortA.T[1,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[1,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[1,3] * m.wheel.Joints[5].rA[3]) - m.wheel.Joints[5].InPortA.omega[1] * (m.wheel.Joints[5].InPortA.T[3,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[3,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[3,3] * m.wheel.Joints[5].rA[3]);
  m.wheel.Joints[5].vA[3] = m.wheel.Joints[5].InPortA.v[3] + m.wheel.Joints[5].InPortA.omega[1] * (m.wheel.Joints[5].InPortA.T[2,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[2,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[2,3] * m.wheel.Joints[5].rA[3]) - m.wheel.Joints[5].InPortA.omega[2] * (m.wheel.Joints[5].InPortA.T[1,1] * m.wheel.Joints[5].rA[1] + m.wheel.Joints[5].InPortA.T[1,2] * m.wheel.Joints[5].rA[2] + m.wheel.Joints[5].InPortA.T[1,3] * m.wheel.Joints[5].rA[3]);
  m.wheel.Joints[5].vB[1] = m.wheel.Joints[5].InPortB.v[1] + m.wheel.Joints[5].InPortB.omega[2] * (m.wheel.Joints[5].InPortB.T[3,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[3,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[3,3] * m.wheel.Joints[5].rB[3]) - m.wheel.Joints[5].InPortB.omega[3] * (m.wheel.Joints[5].InPortB.T[2,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[2,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[2,3] * m.wheel.Joints[5].rB[3]);
  m.wheel.Joints[5].vB[2] = m.wheel.Joints[5].InPortB.v[2] + m.wheel.Joints[5].InPortB.omega[3] * (m.wheel.Joints[5].InPortB.T[1,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[1,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[1,3] * m.wheel.Joints[5].rB[3]) - m.wheel.Joints[5].InPortB.omega[1] * (m.wheel.Joints[5].InPortB.T[3,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[3,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[3,3] * m.wheel.Joints[5].rB[3]);
  m.wheel.Joints[5].vB[3] = m.wheel.Joints[5].InPortB.v[3] + m.wheel.Joints[5].InPortB.omega[1] * (m.wheel.Joints[5].InPortB.T[2,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[2,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[2,3] * m.wheel.Joints[5].rB[3]) - m.wheel.Joints[5].InPortB.omega[2] * (m.wheel.Joints[5].InPortB.T[1,1] * m.wheel.Joints[5].rB[1] + m.wheel.Joints[5].InPortB.T[1,2] * m.wheel.Joints[5].rB[2] + m.wheel.Joints[5].InPortB.T[1,3] * m.wheel.Joints[5].rB[3]);
  m.wheel.Joints[5].vA[1] = m.wheel.Joints[5].vB[1];
  m.wheel.Joints[5].vA[2] = m.wheel.Joints[5].vB[2];
  m.wheel.Joints[5].vA[3] = m.wheel.Joints[5].vB[3];
  m.wheel.Joints[5].nAi[1] = m.wheel.Joints[5].InPortA.T[1,1] * m.wheel.Joints[5].nA[1] + m.wheel.Joints[5].InPortA.T[1,2] * m.wheel.Joints[5].nA[2] + m.wheel.Joints[5].InPortA.T[1,3] * m.wheel.Joints[5].nA[3];
  m.wheel.Joints[5].nAi[2] = m.wheel.Joints[5].InPortA.T[2,1] * m.wheel.Joints[5].nA[1] + m.wheel.Joints[5].InPortA.T[2,2] * m.wheel.Joints[5].nA[2] + m.wheel.Joints[5].InPortA.T[2,3] * m.wheel.Joints[5].nA[3];
  m.wheel.Joints[5].nAi[3] = m.wheel.Joints[5].InPortA.T[3,1] * m.wheel.Joints[5].nA[1] + m.wheel.Joints[5].InPortA.T[3,2] * m.wheel.Joints[5].nA[2] + m.wheel.Joints[5].InPortA.T[3,3] * m.wheel.Joints[5].nA[3];
  m.wheel.Joints[5].omegar[1] = m.wheel.Joints[5].InPortB.omega[1] - m.wheel.Joints[5].InPortA.omega[1];
  m.wheel.Joints[5].omegar[2] = m.wheel.Joints[5].InPortB.omega[2] - m.wheel.Joints[5].InPortA.omega[2];
  m.wheel.Joints[5].omegar[3] = m.wheel.Joints[5].InPortB.omega[3] - m.wheel.Joints[5].InPortA.omega[3];
  m.wheel.Joints[5].epsilonr[1] = m.wheel.Joints[5].InPortB.epsilon[1] - m.wheel.Joints[5].InPortA.epsilon[1] - (m.wheel.Joints[5].InPortA.omega[2] * m.wheel.Joints[5].omegar[3] - m.wheel.Joints[5].InPortA.omega[3] * m.wheel.Joints[5].omegar[2]);
  m.wheel.Joints[5].epsilonr[2] = m.wheel.Joints[5].InPortB.epsilon[2] - m.wheel.Joints[5].InPortA.epsilon[2] - (m.wheel.Joints[5].InPortA.omega[3] * m.wheel.Joints[5].omegar[1] - m.wheel.Joints[5].InPortA.omega[1] * m.wheel.Joints[5].omegar[3]);
  m.wheel.Joints[5].epsilonr[3] = m.wheel.Joints[5].InPortB.epsilon[3] - m.wheel.Joints[5].InPortA.epsilon[3] - (m.wheel.Joints[5].InPortA.omega[1] * m.wheel.Joints[5].omegar[2] - m.wheel.Joints[5].InPortA.omega[2] * m.wheel.Joints[5].omegar[1]);
  m.wheel.Joints[5].epsilonr[1] = m.wheel.Joints[5].nAi[1] * m.wheel.Joints[5].lambda;
  m.wheel.Joints[5].epsilonr[2] = m.wheel.Joints[5].nAi[2] * m.wheel.Joints[5].lambda;
  m.wheel.Joints[5].epsilonr[3] = m.wheel.Joints[5].nAi[3] * m.wheel.Joints[5].lambda;
  m.wheel.Joints[5].M = m.wheel.Joints[5].OutPortA.M[1] * m.wheel.Joints[5].nAi[1] + m.wheel.Joints[5].OutPortA.M[2] * m.wheel.Joints[5].nAi[2] + m.wheel.Joints[5].OutPortA.M[3] * m.wheel.Joints[5].nAi[3];
  m.wheel.Joints[5].M = 0.0;
  m.wheel.Joints[5].OutPortA.P[1] = m.wheel.Joints[5].RA[1];
  m.wheel.Joints[5].OutPortA.P[2] = m.wheel.Joints[5].RA[2];
  m.wheel.Joints[5].OutPortA.P[3] = m.wheel.Joints[5].RA[3];
  m.wheel.Joints[5].OutPortB.P[1] = m.wheel.Joints[5].RB[1];
  m.wheel.Joints[5].OutPortB.P[2] = m.wheel.Joints[5].RB[2];
  m.wheel.Joints[5].OutPortB.P[3] = m.wheel.Joints[5].RB[3];
  der(m.wheel.Joints[5].mu) = m.wheel.Joints[5].lambda;
  der(m.wheel.Joints[5].angle) = m.wheel.Joints[5].mu;
  m.wheel.Joints[5].OutPortA.F[1] + m.wheel.Joints[5].OutPortB.F[1] = 0.0;
  m.wheel.Joints[5].OutPortA.F[2] + m.wheel.Joints[5].OutPortB.F[2] = 0.0;
  m.wheel.Joints[5].OutPortA.F[3] + m.wheel.Joints[5].OutPortB.F[3] = 0.0;
  m.wheel.Joints[5].OutPortA.M[1] + m.wheel.Joints[5].OutPortB.M[1] = 0.0;
  m.wheel.Joints[5].OutPortA.M[2] + m.wheel.Joints[5].OutPortB.M[2] = 0.0;
  m.wheel.Joints[5].OutPortA.M[3] + m.wheel.Joints[5].OutPortB.M[3] = 0.0;
  m.wheel.Wheel.crosses[1,1] = (m.wheel.Wheel.InPorts[1].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[1].F[3] - (m.wheel.Wheel.InPorts[1].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[1].F[2];
  m.wheel.Wheel.crosses[1,2] = (m.wheel.Wheel.InPorts[1].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[1].F[1] - (m.wheel.Wheel.InPorts[1].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[1].F[3];
  m.wheel.Wheel.crosses[1,3] = (m.wheel.Wheel.InPorts[1].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[1].F[2] - (m.wheel.Wheel.InPorts[1].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[1].F[1];
  m.wheel.Wheel.crosses[2,1] = (m.wheel.Wheel.InPorts[2].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[2].F[3] - (m.wheel.Wheel.InPorts[2].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[2].F[2];
  m.wheel.Wheel.crosses[2,2] = (m.wheel.Wheel.InPorts[2].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[2].F[1] - (m.wheel.Wheel.InPorts[2].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[2].F[3];
  m.wheel.Wheel.crosses[2,3] = (m.wheel.Wheel.InPorts[2].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[2].F[2] - (m.wheel.Wheel.InPorts[2].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[2].F[1];
  m.wheel.Wheel.crosses[3,1] = (m.wheel.Wheel.InPorts[3].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[3].F[3] - (m.wheel.Wheel.InPorts[3].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[3].F[2];
  m.wheel.Wheel.crosses[3,2] = (m.wheel.Wheel.InPorts[3].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[3].F[1] - (m.wheel.Wheel.InPorts[3].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[3].F[3];
  m.wheel.Wheel.crosses[3,3] = (m.wheel.Wheel.InPorts[3].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[3].F[2] - (m.wheel.Wheel.InPorts[3].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[3].F[1];
  m.wheel.Wheel.crosses[4,1] = (m.wheel.Wheel.InPorts[4].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[4].F[3] - (m.wheel.Wheel.InPorts[4].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[4].F[2];
  m.wheel.Wheel.crosses[4,2] = (m.wheel.Wheel.InPorts[4].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[4].F[1] - (m.wheel.Wheel.InPorts[4].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[4].F[3];
  m.wheel.Wheel.crosses[4,3] = (m.wheel.Wheel.InPorts[4].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[4].F[2] - (m.wheel.Wheel.InPorts[4].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[4].F[1];
  m.wheel.Wheel.crosses[5,1] = (m.wheel.Wheel.InPorts[5].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[5].F[3] - (m.wheel.Wheel.InPorts[5].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[5].F[2];
  m.wheel.Wheel.crosses[5,2] = (m.wheel.Wheel.InPorts[5].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[5].F[1] - (m.wheel.Wheel.InPorts[5].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[5].F[3];
  m.wheel.Wheel.crosses[5,3] = (m.wheel.Wheel.InPorts[5].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[5].F[2] - (m.wheel.Wheel.InPorts[5].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[5].F[1];
  m.wheel.Wheel.crosses[6,1] = (m.wheel.Wheel.InPorts[6].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[6].F[3] - (m.wheel.Wheel.InPorts[6].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[6].F[2];
  m.wheel.Wheel.crosses[6,2] = (m.wheel.Wheel.InPorts[6].P[3] - m.wheel.Wheel.r[3]) * m.wheel.Wheel.InPorts[6].F[1] - (m.wheel.Wheel.InPorts[6].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[6].F[3];
  m.wheel.Wheel.crosses[6,3] = (m.wheel.Wheel.InPorts[6].P[1] - m.wheel.Wheel.r[1]) * m.wheel.Wheel.InPorts[6].F[2] - (m.wheel.Wheel.InPorts[6].P[2] - m.wheel.Wheel.r[2]) * m.wheel.Wheel.InPorts[6].F[1];
  m.wheel.Wheel.F[1] = m.wheel.Wheel.Gravity[1] * m.wheel.Wheel.m + m.wheel.Wheel.InPorts[1].F[1] + m.wheel.Wheel.InPorts[2].F[1] + m.wheel.Wheel.InPorts[3].F[1] + m.wheel.Wheel.InPorts[4].F[1] + m.wheel.Wheel.InPorts[5].F[1] + m.wheel.Wheel.InPorts[6].F[1];
  m.wheel.Wheel.F[2] = m.wheel.Wheel.Gravity[2] * m.wheel.Wheel.m + m.wheel.Wheel.InPorts[1].F[2] + m.wheel.Wheel.InPorts[2].F[2] + m.wheel.Wheel.InPorts[3].F[2] + m.wheel.Wheel.InPorts[4].F[2] + m.wheel.Wheel.InPorts[5].F[2] + m.wheel.Wheel.InPorts[6].F[2];
  m.wheel.Wheel.F[3] = m.wheel.Wheel.Gravity[3] * m.wheel.Wheel.m + m.wheel.Wheel.InPorts[1].F[3] + m.wheel.Wheel.InPorts[2].F[3] + m.wheel.Wheel.InPorts[3].F[3] + m.wheel.Wheel.InPorts[4].F[3] + m.wheel.Wheel.InPorts[5].F[3] + m.wheel.Wheel.InPorts[6].F[3];
  m.wheel.Wheel.M[1] = m.wheel.Wheel.InPorts[1].M[1] + m.wheel.Wheel.crosses[1,1] + m.wheel.Wheel.InPorts[2].M[1] + m.wheel.Wheel.crosses[2,1] + m.wheel.Wheel.InPorts[3].M[1] + m.wheel.Wheel.crosses[3,1] + m.wheel.Wheel.InPorts[4].M[1] + m.wheel.Wheel.crosses[4,1] + m.wheel.Wheel.InPorts[5].M[1] + m.wheel.Wheel.crosses[5,1] + m.wheel.Wheel.InPorts[6].M[1] + m.wheel.Wheel.crosses[6,1];
  m.wheel.Wheel.M[2] = m.wheel.Wheel.InPorts[1].M[2] + m.wheel.Wheel.crosses[1,2] + m.wheel.Wheel.InPorts[2].M[2] + m.wheel.Wheel.crosses[2,2] + m.wheel.Wheel.InPorts[3].M[2] + m.wheel.Wheel.crosses[3,2] + m.wheel.Wheel.InPorts[4].M[2] + m.wheel.Wheel.crosses[4,2] + m.wheel.Wheel.InPorts[5].M[2] + m.wheel.Wheel.crosses[5,2] + m.wheel.Wheel.InPorts[6].M[2] + m.wheel.Wheel.crosses[6,2];
  m.wheel.Wheel.M[3] = m.wheel.Wheel.InPorts[1].M[3] + m.wheel.Wheel.crosses[1,3] + m.wheel.Wheel.InPorts[2].M[3] + m.wheel.Wheel.crosses[2,3] + m.wheel.Wheel.InPorts[3].M[3] + m.wheel.Wheel.crosses[3,3] + m.wheel.Wheel.InPorts[4].M[3] + m.wheel.Wheel.crosses[4,3] + m.wheel.Wheel.InPorts[5].M[3] + m.wheel.Wheel.crosses[5,3] + m.wheel.Wheel.InPorts[6].M[3] + m.wheel.Wheel.crosses[6,3];
  der(m.wheel.Wheel.Active) = 0.0;
  der(m.wheel.Wheel.r[1]) = m.wheel.Wheel.v[1] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.r[2]) = m.wheel.Wheel.v[2] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.r[3]) = m.wheel.Wheel.v[3] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.v[1]) = m.wheel.Wheel.a[1] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.v[2]) = m.wheel.Wheel.a[2] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.v[3]) = m.wheel.Wheel.a[3] * m.wheel.Wheel.Active;
  m.wheel.Wheel.a[1] * m.wheel.Wheel.m = m.wheel.Wheel.F[1];
  m.wheel.Wheel.a[2] * m.wheel.Wheel.m = m.wheel.Wheel.F[2];
  m.wheel.Wheel.a[3] * m.wheel.Wheel.m = m.wheel.Wheel.F[3];
  {der(m.wheel.Wheel.q[1]), der(m.wheel.Wheel.q[2]), der(m.wheel.Wheel.q[3]), der(m.wheel.Wheel.q[4])} = MbsLite.Util.Quaternions.QMult({m.wheel.Wheel.q[1], m.wheel.Wheel.q[2], m.wheel.Wheel.q[3], m.wheel.Wheel.q[4]}, {0.0, m.wheel.Wheel.omega[1], m.wheel.Wheel.omega[2], m.wheel.Wheel.omega[3]}) * 0.5 * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.omega[1]) = m.wheel.Wheel.epsilon[1] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.omega[2]) = m.wheel.Wheel.epsilon[2] * m.wheel.Wheel.Active;
  der(m.wheel.Wheel.omega[3]) = m.wheel.Wheel.epsilon[3] * m.wheel.Wheel.Active;
  m.wheel.Wheel.T = MbsLite.Util.Quaternions.QToT({m.wheel.Wheel.q[1], m.wheel.Wheel.q[2], m.wheel.Wheel.q[3], m.wheel.Wheel.q[4]});
  m.wheel.Wheel.I[1,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.I[1,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.I[1,3] * m.wheel.Wheel.epsilon[3] + m.wheel.Wheel.omega[2] * (m.wheel.Wheel.I[3,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[3,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[3,3] * m.wheel.Wheel.omega[3]) - m.wheel.Wheel.omega[3] * (m.wheel.Wheel.I[2,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[2,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[2,3] * m.wheel.Wheel.omega[3]) = m.wheel.Wheel.T[1,1] * m.wheel.Wheel.M[1] + m.wheel.Wheel.T[2,1] * m.wheel.Wheel.M[2] + m.wheel.Wheel.T[3,1] * m.wheel.Wheel.M[3];
  m.wheel.Wheel.I[2,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.I[2,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.I[2,3] * m.wheel.Wheel.epsilon[3] + m.wheel.Wheel.omega[3] * (m.wheel.Wheel.I[1,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[1,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[1,3] * m.wheel.Wheel.omega[3]) - m.wheel.Wheel.omega[1] * (m.wheel.Wheel.I[3,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[3,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[3,3] * m.wheel.Wheel.omega[3]) = m.wheel.Wheel.T[1,2] * m.wheel.Wheel.M[1] + m.wheel.Wheel.T[2,2] * m.wheel.Wheel.M[2] + m.wheel.Wheel.T[3,2] * m.wheel.Wheel.M[3];
  m.wheel.Wheel.I[3,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.I[3,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.I[3,3] * m.wheel.Wheel.epsilon[3] + m.wheel.Wheel.omega[1] * (m.wheel.Wheel.I[2,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[2,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[2,3] * m.wheel.Wheel.omega[3]) - m.wheel.Wheel.omega[2] * (m.wheel.Wheel.I[1,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.I[1,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.I[1,3] * m.wheel.Wheel.omega[3]) = m.wheel.Wheel.T[1,3] * m.wheel.Wheel.M[1] + m.wheel.Wheel.T[2,3] * m.wheel.Wheel.M[2] + m.wheel.Wheel.T[3,3] * m.wheel.Wheel.M[3];
  m.wheel.Wheel.OutPort.r[1] = m.wheel.Wheel.r[1];
  m.wheel.Wheel.OutPort.r[2] = m.wheel.Wheel.r[2];
  m.wheel.Wheel.OutPort.r[3] = m.wheel.Wheel.r[3];
  m.wheel.Wheel.OutPort.v[1] = m.wheel.Wheel.v[1];
  m.wheel.Wheel.OutPort.v[2] = m.wheel.Wheel.v[2];
  m.wheel.Wheel.OutPort.v[3] = m.wheel.Wheel.v[3];
  m.wheel.Wheel.OutPort.a[1] = m.wheel.Wheel.a[1];
  m.wheel.Wheel.OutPort.a[2] = m.wheel.Wheel.a[2];
  m.wheel.Wheel.OutPort.a[3] = m.wheel.Wheel.a[3];
  m.wheel.Wheel.OutPort.T[1,1] = m.wheel.Wheel.T[1,1];
  m.wheel.Wheel.OutPort.T[1,2] = m.wheel.Wheel.T[1,2];
  m.wheel.Wheel.OutPort.T[1,3] = m.wheel.Wheel.T[1,3];
  m.wheel.Wheel.OutPort.T[2,1] = m.wheel.Wheel.T[2,1];
  m.wheel.Wheel.OutPort.T[2,2] = m.wheel.Wheel.T[2,2];
  m.wheel.Wheel.OutPort.T[2,3] = m.wheel.Wheel.T[2,3];
  m.wheel.Wheel.OutPort.T[3,1] = m.wheel.Wheel.T[3,1];
  m.wheel.Wheel.OutPort.T[3,2] = m.wheel.Wheel.T[3,2];
  m.wheel.Wheel.OutPort.T[3,3] = m.wheel.Wheel.T[3,3];
  m.wheel.Wheel.OutPort.omega[1] = m.wheel.Wheel.T[1,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.T[1,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.T[1,3] * m.wheel.Wheel.omega[3];
  m.wheel.Wheel.OutPort.omega[2] = m.wheel.Wheel.T[2,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.T[2,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.T[2,3] * m.wheel.Wheel.omega[3];
  m.wheel.Wheel.OutPort.omega[3] = m.wheel.Wheel.T[3,1] * m.wheel.Wheel.omega[1] + m.wheel.Wheel.T[3,2] * m.wheel.Wheel.omega[2] + m.wheel.Wheel.T[3,3] * m.wheel.Wheel.omega[3];
  m.wheel.Wheel.OutPort.epsilon[1] = m.wheel.Wheel.T[1,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.T[1,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.T[1,3] * m.wheel.Wheel.epsilon[3];
  m.wheel.Wheel.OutPort.epsilon[2] = m.wheel.Wheel.T[2,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.T[2,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.T[2,3] * m.wheel.Wheel.epsilon[3];
  m.wheel.Wheel.OutPort.epsilon[3] = m.wheel.Wheel.T[3,1] * m.wheel.Wheel.epsilon[1] + m.wheel.Wheel.T[3,2] * m.wheel.Wheel.epsilon[2] + m.wheel.Wheel.T[3,3] * m.wheel.Wheel.epsilon[3];
  m.wheel.Contacts[1].n1k[1] = m.wheel.Wheel.T[1,3];
  m.wheel.Contacts[1].n1k[2] = m.wheel.Wheel.T[2,3];
  m.wheel.Contacts[1].n1k[3] = m.wheel.Wheel.T[3,3];
  m.wheel.Contacts[1].rho[1] = (m.wheel.Wheel.r[1] - m.wheel.Rollers[1].r[1]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[1].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[1].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[1].r[3]) ^ 2.0);
  m.wheel.Contacts[1].rho[2] = (m.wheel.Wheel.r[2] - m.wheel.Rollers[1].r[2]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[1].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[1].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[1].r[3]) ^ 2.0);
  m.wheel.Contacts[1].rho[3] = (m.wheel.Wheel.r[3] - m.wheel.Rollers[1].r[3]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[1].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[1].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[1].r[3]) ^ 2.0);
  m.wheel.Contacts[2].n1k[1] = m.wheel.Wheel.T[1,3];
  m.wheel.Contacts[2].n1k[2] = m.wheel.Wheel.T[2,3];
  m.wheel.Contacts[2].n1k[3] = m.wheel.Wheel.T[3,3];
  m.wheel.Contacts[2].rho[1] = (m.wheel.Wheel.r[1] - m.wheel.Rollers[2].r[1]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[2].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[2].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[2].r[3]) ^ 2.0);
  m.wheel.Contacts[2].rho[2] = (m.wheel.Wheel.r[2] - m.wheel.Rollers[2].r[2]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[2].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[2].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[2].r[3]) ^ 2.0);
  m.wheel.Contacts[2].rho[3] = (m.wheel.Wheel.r[3] - m.wheel.Rollers[2].r[3]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[2].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[2].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[2].r[3]) ^ 2.0);
  m.wheel.Contacts[3].n1k[1] = m.wheel.Wheel.T[1,3];
  m.wheel.Contacts[3].n1k[2] = m.wheel.Wheel.T[2,3];
  m.wheel.Contacts[3].n1k[3] = m.wheel.Wheel.T[3,3];
  m.wheel.Contacts[3].rho[1] = (m.wheel.Wheel.r[1] - m.wheel.Rollers[3].r[1]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[3].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[3].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[3].r[3]) ^ 2.0);
  m.wheel.Contacts[3].rho[2] = (m.wheel.Wheel.r[2] - m.wheel.Rollers[3].r[2]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[3].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[3].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[3].r[3]) ^ 2.0);
  m.wheel.Contacts[3].rho[3] = (m.wheel.Wheel.r[3] - m.wheel.Rollers[3].r[3]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[3].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[3].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[3].r[3]) ^ 2.0);
  m.wheel.Contacts[4].n1k[1] = m.wheel.Wheel.T[1,3];
  m.wheel.Contacts[4].n1k[2] = m.wheel.Wheel.T[2,3];
  m.wheel.Contacts[4].n1k[3] = m.wheel.Wheel.T[3,3];
  m.wheel.Contacts[4].rho[1] = (m.wheel.Wheel.r[1] - m.wheel.Rollers[4].r[1]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[4].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[4].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[4].r[3]) ^ 2.0);
  m.wheel.Contacts[4].rho[2] = (m.wheel.Wheel.r[2] - m.wheel.Rollers[4].r[2]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[4].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[4].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[4].r[3]) ^ 2.0);
  m.wheel.Contacts[4].rho[3] = (m.wheel.Wheel.r[3] - m.wheel.Rollers[4].r[3]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[4].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[4].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[4].r[3]) ^ 2.0);
  m.wheel.Contacts[5].n1k[1] = m.wheel.Wheel.T[1,3];
  m.wheel.Contacts[5].n1k[2] = m.wheel.Wheel.T[2,3];
  m.wheel.Contacts[5].n1k[3] = m.wheel.Wheel.T[3,3];
  m.wheel.Contacts[5].rho[1] = (m.wheel.Wheel.r[1] - m.wheel.Rollers[5].r[1]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[5].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[5].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[5].r[3]) ^ 2.0);
  m.wheel.Contacts[5].rho[2] = (m.wheel.Wheel.r[2] - m.wheel.Rollers[5].r[2]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[5].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[5].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[5].r[3]) ^ 2.0);
  m.wheel.Contacts[5].rho[3] = (m.wheel.Wheel.r[3] - m.wheel.Rollers[5].r[3]) / sqrt((m.wheel.Wheel.r[1] - m.wheel.Rollers[5].r[1]) ^ 2.0 + (m.wheel.Wheel.r[2] - m.wheel.Rollers[5].r[2]) ^ 2.0 + (m.wheel.Wheel.r[3] - m.wheel.Rollers[5].r[3]) ^ 2.0);
  m.wheel.w[1] = m.wheel.Wheel.OutPort.T[1,1] * (m.wheel.Rollers[1].r[1] - m.wheel.Wheel.r[1]) + m.wheel.Wheel.OutPort.T[2,1] * (m.wheel.Rollers[1].r[2] - m.wheel.Wheel.r[2]) + m.wheel.Wheel.OutPort.T[3,1] * (m.wheel.Rollers[1].r[3] - m.wheel.Wheel.r[3]);
  m.wheel.w[2] = m.wheel.Wheel.OutPort.T[1,2] * (m.wheel.Rollers[1].r[1] - m.wheel.Wheel.r[1]) + m.wheel.Wheel.OutPort.T[2,2] * (m.wheel.Rollers[1].r[2] - m.wheel.Wheel.r[2]) + m.wheel.Wheel.OutPort.T[3,2] * (m.wheel.Rollers[1].r[3] - m.wheel.Wheel.r[3]);
  m.wheel.w[3] = m.wheel.Wheel.OutPort.T[1,3] * (m.wheel.Rollers[1].r[1] - m.wheel.Wheel.r[1]) + m.wheel.Wheel.OutPort.T[2,3] * (m.wheel.Rollers[1].r[2] - m.wheel.Wheel.r[2]) + m.wheel.Wheel.OutPort.T[3,3] * (m.wheel.Rollers[1].r[3] - m.wheel.Wheel.r[3]);
  m.wheel.InPortF.P[1] = m.wheel.OutPortK.r[1];
  m.wheel.InPortF.P[2] = m.wheel.OutPortK.r[2];
  m.wheel.InPortF.P[3] = m.wheel.OutPortK.r[3];
  m.wheel.InPortF.F[1] = 0.0;
  m.wheel.InPortF.F[2] = 0.0;
  m.wheel.InPortF.F[3] = 0.0;
  m.wheel.InPortF.M[1] = 0.0;
  m.wheel.InPortF.M[2] = 0.0;
  m.wheel.InPortF.M[3] = 0.0;
  when time == 1.0 then
    assert(true, \"zero should be zero, was: 0\");
  end when;
  m.wheel.Contacts[1].InPortA.T[1,1] = m.wheel.Contacts[2].InPortA.T[1,1];
  m.wheel.Contacts[1].InPortA.T[1,1] = m.wheel.Contacts[3].InPortA.T[1,1];
  m.wheel.Contacts[1].InPortA.T[1,1] = m.wheel.Contacts[4].InPortA.T[1,1];
  m.wheel.Contacts[1].InPortA.T[1,1] = m.wheel.Contacts[5].InPortA.T[1,1];
  m.wheel.Contacts[1].InPortA.T[1,1] = m.wheel.InPortK.T[1,1];
  m.wheel.Contacts[1].InPortA.T[1,2] = m.wheel.Contacts[2].InPortA.T[1,2];
  m.wheel.Contacts[1].InPortA.T[1,2] = m.wheel.Contacts[3].InPortA.T[1,2];
  m.wheel.Contacts[1].InPortA.T[1,2] = m.wheel.Contacts[4].InPortA.T[1,2];
  m.wheel.Contacts[1].InPortA.T[1,2] = m.wheel.Contacts[5].InPortA.T[1,2];
  m.wheel.Contacts[1].InPortA.T[1,2] = m.wheel.InPortK.T[1,2];
  m.wheel.Contacts[1].InPortA.T[1,3] = m.wheel.Contacts[2].InPortA.T[1,3];
  m.wheel.Contacts[1].InPortA.T[1,3] = m.wheel.Contacts[3].InPortA.T[1,3];
  m.wheel.Contacts[1].InPortA.T[1,3] = m.wheel.Contacts[4].InPortA.T[1,3];
  m.wheel.Contacts[1].InPortA.T[1,3] = m.wheel.Contacts[5].InPortA.T[1,3];
  m.wheel.Contacts[1].InPortA.T[1,3] = m.wheel.InPortK.T[1,3];
  m.wheel.Contacts[1].InPortA.T[2,1] = m.wheel.Contacts[2].InPortA.T[2,1];
  m.wheel.Contacts[1].InPortA.T[2,1] = m.wheel.Contacts[3].InPortA.T[2,1];
  m.wheel.Contacts[1].InPortA.T[2,1] = m.wheel.Contacts[4].InPortA.T[2,1];
  m.wheel.Contacts[1].InPortA.T[2,1] = m.wheel.Contacts[5].InPortA.T[2,1];
  m.wheel.Contacts[1].InPortA.T[2,1] = m.wheel.InPortK.T[2,1];
  m.wheel.Contacts[1].InPortA.T[2,2] = m.wheel.Contacts[2].InPortA.T[2,2];
  m.wheel.Contacts[1].InPortA.T[2,2] = m.wheel.Contacts[3].InPortA.T[2,2];
  m.wheel.Contacts[1].InPortA.T[2,2] = m.wheel.Contacts[4].InPortA.T[2,2];
  m.wheel.Contacts[1].InPortA.T[2,2] = m.wheel.Contacts[5].InPortA.T[2,2];
  m.wheel.Contacts[1].InPortA.T[2,2] = m.wheel.InPortK.T[2,2];
  m.wheel.Contacts[1].InPortA.T[2,3] = m.wheel.Contacts[2].InPortA.T[2,3];
  m.wheel.Contacts[1].InPortA.T[2,3] = m.wheel.Contacts[3].InPortA.T[2,3];
  m.wheel.Contacts[1].InPortA.T[2,3] = m.wheel.Contacts[4].InPortA.T[2,3];
  m.wheel.Contacts[1].InPortA.T[2,3] = m.wheel.Contacts[5].InPortA.T[2,3];
  m.wheel.Contacts[1].InPortA.T[2,3] = m.wheel.InPortK.T[2,3];
  m.wheel.Contacts[1].InPortA.T[3,1] = m.wheel.Contacts[2].InPortA.T[3,1];
  m.wheel.Contacts[1].InPortA.T[3,1] = m.wheel.Contacts[3].InPortA.T[3,1];
  m.wheel.Contacts[1].InPortA.T[3,1] = m.wheel.Contacts[4].InPortA.T[3,1];
  m.wheel.Contacts[1].InPortA.T[3,1] = m.wheel.Contacts[5].InPortA.T[3,1];
  m.wheel.Contacts[1].InPortA.T[3,1] = m.wheel.InPortK.T[3,1];
  m.wheel.Contacts[1].InPortA.T[3,2] = m.wheel.Contacts[2].InPortA.T[3,2];
  m.wheel.Contacts[1].InPortA.T[3,2] = m.wheel.Contacts[3].InPortA.T[3,2];
  m.wheel.Contacts[1].InPortA.T[3,2] = m.wheel.Contacts[4].InPortA.T[3,2];
  m.wheel.Contacts[1].InPortA.T[3,2] = m.wheel.Contacts[5].InPortA.T[3,2];
  m.wheel.Contacts[1].InPortA.T[3,2] = m.wheel.InPortK.T[3,2];
  m.wheel.Contacts[1].InPortA.T[3,3] = m.wheel.Contacts[2].InPortA.T[3,3];
  m.wheel.Contacts[1].InPortA.T[3,3] = m.wheel.Contacts[3].InPortA.T[3,3];
  m.wheel.Contacts[1].InPortA.T[3,3] = m.wheel.Contacts[4].InPortA.T[3,3];
  m.wheel.Contacts[1].InPortA.T[3,3] = m.wheel.Contacts[5].InPortA.T[3,3];
  m.wheel.Contacts[1].InPortA.T[3,3] = m.wheel.InPortK.T[3,3];
  m.wheel.Contacts[1].InPortA.a[1] = m.wheel.Contacts[2].InPortA.a[1];
  m.wheel.Contacts[1].InPortA.a[1] = m.wheel.Contacts[3].InPortA.a[1];
  m.wheel.Contacts[1].InPortA.a[1] = m.wheel.Contacts[4].InPortA.a[1];
  m.wheel.Contacts[1].InPortA.a[1] = m.wheel.Contacts[5].InPortA.a[1];
  m.wheel.Contacts[1].InPortA.a[1] = m.wheel.InPortK.a[1];
  m.wheel.Contacts[1].InPortA.a[2] = m.wheel.Contacts[2].InPortA.a[2];
  m.wheel.Contacts[1].InPortA.a[2] = m.wheel.Contacts[3].InPortA.a[2];
  m.wheel.Contacts[1].InPortA.a[2] = m.wheel.Contacts[4].InPortA.a[2];
  m.wheel.Contacts[1].InPortA.a[2] = m.wheel.Contacts[5].InPortA.a[2];
  m.wheel.Contacts[1].InPortA.a[2] = m.wheel.InPortK.a[2];
  m.wheel.Contacts[1].InPortA.a[3] = m.wheel.Contacts[2].InPortA.a[3];
  m.wheel.Contacts[1].InPortA.a[3] = m.wheel.Contacts[3].InPortA.a[3];
  m.wheel.Contacts[1].InPortA.a[3] = m.wheel.Contacts[4].InPortA.a[3];
  m.wheel.Contacts[1].InPortA.a[3] = m.wheel.Contacts[5].InPortA.a[3];
  m.wheel.Contacts[1].InPortA.a[3] = m.wheel.InPortK.a[3];
  m.wheel.Contacts[1].InPortA.epsilon[1] = m.wheel.Contacts[2].InPortA.epsilon[1];
  m.wheel.Contacts[1].InPortA.epsilon[1] = m.wheel.Contacts[3].InPortA.epsilon[1];
  m.wheel.Contacts[1].InPortA.epsilon[1] = m.wheel.Contacts[4].InPortA.epsilon[1];
  m.wheel.Contacts[1].InPortA.epsilon[1] = m.wheel.Contacts[5].InPortA.epsilon[1];
  m.wheel.Contacts[1].InPortA.epsilon[1] = m.wheel.InPortK.epsilon[1];
  m.wheel.Contacts[1].InPortA.epsilon[2] = m.wheel.Contacts[2].InPortA.epsilon[2];
  m.wheel.Contacts[1].InPortA.epsilon[2] = m.wheel.Contacts[3].InPortA.epsilon[2];
  m.wheel.Contacts[1].InPortA.epsilon[2] = m.wheel.Contacts[4].InPortA.epsilon[2];
  m.wheel.Contacts[1].InPortA.epsilon[2] = m.wheel.Contacts[5].InPortA.epsilon[2];
  m.wheel.Contacts[1].InPortA.epsilon[2] = m.wheel.InPortK.epsilon[2];
  m.wheel.Contacts[1].InPortA.epsilon[3] = m.wheel.Contacts[2].InPortA.epsilon[3];
  m.wheel.Contacts[1].InPortA.epsilon[3] = m.wheel.Contacts[3].InPortA.epsilon[3];
  m.wheel.Contacts[1].InPortA.epsilon[3] = m.wheel.Contacts[4].InPortA.epsilon[3];
  m.wheel.Contacts[1].InPortA.epsilon[3] = m.wheel.Contacts[5].InPortA.epsilon[3];
  m.wheel.Contacts[1].InPortA.epsilon[3] = m.wheel.InPortK.epsilon[3];
  m.wheel.Contacts[1].InPortA.omega[1] = m.wheel.Contacts[2].InPortA.omega[1];
  m.wheel.Contacts[1].InPortA.omega[1] = m.wheel.Contacts[3].InPortA.omega[1];
  m.wheel.Contacts[1].InPortA.omega[1] = m.wheel.Contacts[4].InPortA.omega[1];
  m.wheel.Contacts[1].InPortA.omega[1] = m.wheel.Contacts[5].InPortA.omega[1];
  m.wheel.Contacts[1].InPortA.omega[1] = m.wheel.InPortK.omega[1];
  m.wheel.Contacts[1].InPortA.omega[2] = m.wheel.Contacts[2].InPortA.omega[2];
  m.wheel.Contacts[1].InPortA.omega[2] = m.wheel.Contacts[3].InPortA.omega[2];
  m.wheel.Contacts[1].InPortA.omega[2] = m.wheel.Contacts[4].InPortA.omega[2];
  m.wheel.Contacts[1].InPortA.omega[2] = m.wheel.Contacts[5].InPortA.omega[2];
  m.wheel.Contacts[1].InPortA.omega[2] = m.wheel.InPortK.omega[2];
  m.wheel.Contacts[1].InPortA.omega[3] = m.wheel.Contacts[2].InPortA.omega[3];
  m.wheel.Contacts[1].InPortA.omega[3] = m.wheel.Contacts[3].InPortA.omega[3];
  m.wheel.Contacts[1].InPortA.omega[3] = m.wheel.Contacts[4].InPortA.omega[3];
  m.wheel.Contacts[1].InPortA.omega[3] = m.wheel.Contacts[5].InPortA.omega[3];
  m.wheel.Contacts[1].InPortA.omega[3] = m.wheel.InPortK.omega[3];
  m.wheel.Contacts[1].InPortA.r[1] = m.wheel.Contacts[2].InPortA.r[1];
  m.wheel.Contacts[1].InPortA.r[1] = m.wheel.Contacts[3].InPortA.r[1];
  m.wheel.Contacts[1].InPortA.r[1] = m.wheel.Contacts[4].InPortA.r[1];
  m.wheel.Contacts[1].InPortA.r[1] = m.wheel.Contacts[5].InPortA.r[1];
  m.wheel.Contacts[1].InPortA.r[1] = m.wheel.InPortK.r[1];
  m.wheel.Contacts[1].InPortA.r[2] = m.wheel.Contacts[2].InPortA.r[2];
  m.wheel.Contacts[1].InPortA.r[2] = m.wheel.Contacts[3].InPortA.r[2];
  m.wheel.Contacts[1].InPortA.r[2] = m.wheel.Contacts[4].InPortA.r[2];
  m.wheel.Contacts[1].InPortA.r[2] = m.wheel.Contacts[5].InPortA.r[2];
  m.wheel.Contacts[1].InPortA.r[2] = m.wheel.InPortK.r[2];
  m.wheel.Contacts[1].InPortA.r[3] = m.wheel.Contacts[2].InPortA.r[3];
  m.wheel.Contacts[1].InPortA.r[3] = m.wheel.Contacts[3].InPortA.r[3];
  m.wheel.Contacts[1].InPortA.r[3] = m.wheel.Contacts[4].InPortA.r[3];
  m.wheel.Contacts[1].InPortA.r[3] = m.wheel.Contacts[5].InPortA.r[3];
  m.wheel.Contacts[1].InPortA.r[3] = m.wheel.InPortK.r[3];
  m.wheel.Contacts[1].InPortA.v[1] = m.wheel.Contacts[2].InPortA.v[1];
  m.wheel.Contacts[1].InPortA.v[1] = m.wheel.Contacts[3].InPortA.v[1];
  m.wheel.Contacts[1].InPortA.v[1] = m.wheel.Contacts[4].InPortA.v[1];
  m.wheel.Contacts[1].InPortA.v[1] = m.wheel.Contacts[5].InPortA.v[1];
  m.wheel.Contacts[1].InPortA.v[1] = m.wheel.InPortK.v[1];
  m.wheel.Contacts[1].InPortA.v[2] = m.wheel.Contacts[2].InPortA.v[2];
  m.wheel.Contacts[1].InPortA.v[2] = m.wheel.Contacts[3].InPortA.v[2];
  m.wheel.Contacts[1].InPortA.v[2] = m.wheel.Contacts[4].InPortA.v[2];
  m.wheel.Contacts[1].InPortA.v[2] = m.wheel.Contacts[5].InPortA.v[2];
  m.wheel.Contacts[1].InPortA.v[2] = m.wheel.InPortK.v[2];
  m.wheel.Contacts[1].InPortA.v[3] = m.wheel.Contacts[2].InPortA.v[3];
  m.wheel.Contacts[1].InPortA.v[3] = m.wheel.Contacts[3].InPortA.v[3];
  m.wheel.Contacts[1].InPortA.v[3] = m.wheel.Contacts[4].InPortA.v[3];
  m.wheel.Contacts[1].InPortA.v[3] = m.wheel.Contacts[5].InPortA.v[3];
  m.wheel.Contacts[1].InPortA.v[3] = m.wheel.InPortK.v[3];
  m.wheel.Contacts[1].InPortB.T[1,1] = m.wheel.Joints[1].InPortA.T[1,1];
  m.wheel.Contacts[1].InPortB.T[1,1] = m.wheel.Rollers[1].OutPort.T[1,1];
  m.wheel.Contacts[1].InPortB.T[1,2] = m.wheel.Joints[1].InPortA.T[1,2];
  m.wheel.Contacts[1].InPortB.T[1,2] = m.wheel.Rollers[1].OutPort.T[1,2];
  m.wheel.Contacts[1].InPortB.T[1,3] = m.wheel.Joints[1].InPortA.T[1,3];
  m.wheel.Contacts[1].InPortB.T[1,3] = m.wheel.Rollers[1].OutPort.T[1,3];
  m.wheel.Contacts[1].InPortB.T[2,1] = m.wheel.Joints[1].InPortA.T[2,1];
  m.wheel.Contacts[1].InPortB.T[2,1] = m.wheel.Rollers[1].OutPort.T[2,1];
  m.wheel.Contacts[1].InPortB.T[2,2] = m.wheel.Joints[1].InPortA.T[2,2];
  m.wheel.Contacts[1].InPortB.T[2,2] = m.wheel.Rollers[1].OutPort.T[2,2];
  m.wheel.Contacts[1].InPortB.T[2,3] = m.wheel.Joints[1].InPortA.T[2,3];
  m.wheel.Contacts[1].InPortB.T[2,3] = m.wheel.Rollers[1].OutPort.T[2,3];
  m.wheel.Contacts[1].InPortB.T[3,1] = m.wheel.Joints[1].InPortA.T[3,1];
  m.wheel.Contacts[1].InPortB.T[3,1] = m.wheel.Rollers[1].OutPort.T[3,1];
  m.wheel.Contacts[1].InPortB.T[3,2] = m.wheel.Joints[1].InPortA.T[3,2];
  m.wheel.Contacts[1].InPortB.T[3,2] = m.wheel.Rollers[1].OutPort.T[3,2];
  m.wheel.Contacts[1].InPortB.T[3,3] = m.wheel.Joints[1].InPortA.T[3,3];
  m.wheel.Contacts[1].InPortB.T[3,3] = m.wheel.Rollers[1].OutPort.T[3,3];
  m.wheel.Contacts[1].InPortB.a[1] = m.wheel.Joints[1].InPortA.a[1];
  m.wheel.Contacts[1].InPortB.a[1] = m.wheel.Rollers[1].OutPort.a[1];
  m.wheel.Contacts[1].InPortB.a[2] = m.wheel.Joints[1].InPortA.a[2];
  m.wheel.Contacts[1].InPortB.a[2] = m.wheel.Rollers[1].OutPort.a[2];
  m.wheel.Contacts[1].InPortB.a[3] = m.wheel.Joints[1].InPortA.a[3];
  m.wheel.Contacts[1].InPortB.a[3] = m.wheel.Rollers[1].OutPort.a[3];
  m.wheel.Contacts[1].InPortB.epsilon[1] = m.wheel.Joints[1].InPortA.epsilon[1];
  m.wheel.Contacts[1].InPortB.epsilon[1] = m.wheel.Rollers[1].OutPort.epsilon[1];
  m.wheel.Contacts[1].InPortB.epsilon[2] = m.wheel.Joints[1].InPortA.epsilon[2];
  m.wheel.Contacts[1].InPortB.epsilon[2] = m.wheel.Rollers[1].OutPort.epsilon[2];
  m.wheel.Contacts[1].InPortB.epsilon[3] = m.wheel.Joints[1].InPortA.epsilon[3];
  m.wheel.Contacts[1].InPortB.epsilon[3] = m.wheel.Rollers[1].OutPort.epsilon[3];
  m.wheel.Contacts[1].InPortB.omega[1] = m.wheel.Joints[1].InPortA.omega[1];
  m.wheel.Contacts[1].InPortB.omega[1] = m.wheel.Rollers[1].OutPort.omega[1];
  m.wheel.Contacts[1].InPortB.omega[2] = m.wheel.Joints[1].InPortA.omega[2];
  m.wheel.Contacts[1].InPortB.omega[2] = m.wheel.Rollers[1].OutPort.omega[2];
  m.wheel.Contacts[1].InPortB.omega[3] = m.wheel.Joints[1].InPortA.omega[3];
  m.wheel.Contacts[1].InPortB.omega[3] = m.wheel.Rollers[1].OutPort.omega[3];
  m.wheel.Contacts[1].InPortB.r[1] = m.wheel.Joints[1].InPortA.r[1];
  m.wheel.Contacts[1].InPortB.r[1] = m.wheel.Rollers[1].OutPort.r[1];
  m.wheel.Contacts[1].InPortB.r[2] = m.wheel.Joints[1].InPortA.r[2];
  m.wheel.Contacts[1].InPortB.r[2] = m.wheel.Rollers[1].OutPort.r[2];
  m.wheel.Contacts[1].InPortB.r[3] = m.wheel.Joints[1].InPortA.r[3];
  m.wheel.Contacts[1].InPortB.r[3] = m.wheel.Rollers[1].OutPort.r[3];
  m.wheel.Contacts[1].InPortB.v[1] = m.wheel.Joints[1].InPortA.v[1];
  m.wheel.Contacts[1].InPortB.v[1] = m.wheel.Rollers[1].OutPort.v[1];
  m.wheel.Contacts[1].InPortB.v[2] = m.wheel.Joints[1].InPortA.v[2];
  m.wheel.Contacts[1].InPortB.v[2] = m.wheel.Rollers[1].OutPort.v[2];
  m.wheel.Contacts[1].InPortB.v[3] = m.wheel.Joints[1].InPortA.v[3];
  m.wheel.Contacts[1].InPortB.v[3] = m.wheel.Rollers[1].OutPort.v[3];
  m.wheel.Contacts[1].OutPortB.F[1] = m.wheel.Rollers[1].InPorts[1].F[1];
  m.wheel.Contacts[1].OutPortB.F[2] = m.wheel.Rollers[1].InPorts[1].F[2];
  m.wheel.Contacts[1].OutPortB.F[3] = m.wheel.Rollers[1].InPorts[1].F[3];
  m.wheel.Contacts[1].OutPortB.M[1] = m.wheel.Rollers[1].InPorts[1].M[1];
  m.wheel.Contacts[1].OutPortB.M[2] = m.wheel.Rollers[1].InPorts[1].M[2];
  m.wheel.Contacts[1].OutPortB.M[3] = m.wheel.Rollers[1].InPorts[1].M[3];
  m.wheel.Contacts[1].OutPortB.P[1] = m.wheel.Rollers[1].InPorts[1].P[1];
  m.wheel.Contacts[1].OutPortB.P[2] = m.wheel.Rollers[1].InPorts[1].P[2];
  m.wheel.Contacts[1].OutPortB.P[3] = m.wheel.Rollers[1].InPorts[1].P[3];
  m.wheel.Joints[1].OutPortA.F[1] = m.wheel.Rollers[1].InPorts[2].F[1];
  m.wheel.Joints[1].OutPortA.F[2] = m.wheel.Rollers[1].InPorts[2].F[2];
  m.wheel.Joints[1].OutPortA.F[3] = m.wheel.Rollers[1].InPorts[2].F[3];
  m.wheel.Joints[1].OutPortA.M[1] = m.wheel.Rollers[1].InPorts[2].M[1];
  m.wheel.Joints[1].OutPortA.M[2] = m.wheel.Rollers[1].InPorts[2].M[2];
  m.wheel.Joints[1].OutPortA.M[3] = m.wheel.Rollers[1].InPorts[2].M[3];
  m.wheel.Joints[1].OutPortA.P[1] = m.wheel.Rollers[1].InPorts[2].P[1];
  m.wheel.Joints[1].OutPortA.P[2] = m.wheel.Rollers[1].InPorts[2].P[2];
  m.wheel.Joints[1].OutPortA.P[3] = m.wheel.Rollers[1].InPorts[2].P[3];
  m.wheel.Joints[1].OutPortB.F[1] = m.wheel.Wheel.InPorts[2].F[1];
  m.wheel.Joints[1].OutPortB.F[2] = m.wheel.Wheel.InPorts[2].F[2];
  m.wheel.Joints[1].OutPortB.F[3] = m.wheel.Wheel.InPorts[2].F[3];
  m.wheel.Joints[1].OutPortB.M[1] = m.wheel.Wheel.InPorts[2].M[1];
  m.wheel.Joints[1].OutPortB.M[2] = m.wheel.Wheel.InPorts[2].M[2];
  m.wheel.Joints[1].OutPortB.M[3] = m.wheel.Wheel.InPorts[2].M[3];
  m.wheel.Joints[1].OutPortB.P[1] = m.wheel.Wheel.InPorts[2].P[1];
  m.wheel.Joints[1].OutPortB.P[2] = m.wheel.Wheel.InPorts[2].P[2];
  m.wheel.Joints[1].OutPortB.P[3] = m.wheel.Wheel.InPorts[2].P[3];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.Joints[2].InPortB.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.Joints[3].InPortB.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.Joints[4].InPortB.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.Joints[5].InPortB.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.OutPortK.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,1] = m.wheel.Wheel.OutPort.T[1,1];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.Joints[2].InPortB.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.Joints[3].InPortB.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.Joints[4].InPortB.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.Joints[5].InPortB.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.OutPortK.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,2] = m.wheel.Wheel.OutPort.T[1,2];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.Joints[2].InPortB.T[1,3];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.Joints[3].InPortB.T[1,3];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.Joints[4].InPortB.T[1,3];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.Joints[5].InPortB.T[1,3];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.OutPortK.T[1,3];
  m.wheel.Joints[1].InPortB.T[1,3] = m.wheel.Wheel.OutPort.T[1,3];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.Joints[2].InPortB.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.Joints[3].InPortB.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.Joints[4].InPortB.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.Joints[5].InPortB.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.OutPortK.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,1] = m.wheel.Wheel.OutPort.T[2,1];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.Joints[2].InPortB.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.Joints[3].InPortB.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.Joints[4].InPortB.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.Joints[5].InPortB.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.OutPortK.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,2] = m.wheel.Wheel.OutPort.T[2,2];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.Joints[2].InPortB.T[2,3];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.Joints[3].InPortB.T[2,3];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.Joints[4].InPortB.T[2,3];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.Joints[5].InPortB.T[2,3];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.OutPortK.T[2,3];
  m.wheel.Joints[1].InPortB.T[2,3] = m.wheel.Wheel.OutPort.T[2,3];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.Joints[2].InPortB.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.Joints[3].InPortB.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.Joints[4].InPortB.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.Joints[5].InPortB.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.OutPortK.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,1] = m.wheel.Wheel.OutPort.T[3,1];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.Joints[2].InPortB.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.Joints[3].InPortB.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.Joints[4].InPortB.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.Joints[5].InPortB.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.OutPortK.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,2] = m.wheel.Wheel.OutPort.T[3,2];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.Joints[2].InPortB.T[3,3];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.Joints[3].InPortB.T[3,3];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.Joints[4].InPortB.T[3,3];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.Joints[5].InPortB.T[3,3];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.OutPortK.T[3,3];
  m.wheel.Joints[1].InPortB.T[3,3] = m.wheel.Wheel.OutPort.T[3,3];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.Joints[2].InPortB.a[1];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.Joints[3].InPortB.a[1];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.Joints[4].InPortB.a[1];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.Joints[5].InPortB.a[1];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.OutPortK.a[1];
  m.wheel.Joints[1].InPortB.a[1] = m.wheel.Wheel.OutPort.a[1];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.Joints[2].InPortB.a[2];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.Joints[3].InPortB.a[2];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.Joints[4].InPortB.a[2];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.Joints[5].InPortB.a[2];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.OutPortK.a[2];
  m.wheel.Joints[1].InPortB.a[2] = m.wheel.Wheel.OutPort.a[2];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.Joints[2].InPortB.a[3];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.Joints[3].InPortB.a[3];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.Joints[4].InPortB.a[3];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.Joints[5].InPortB.a[3];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.OutPortK.a[3];
  m.wheel.Joints[1].InPortB.a[3] = m.wheel.Wheel.OutPort.a[3];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.Joints[2].InPortB.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.Joints[3].InPortB.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.Joints[4].InPortB.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.Joints[5].InPortB.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.OutPortK.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[1] = m.wheel.Wheel.OutPort.epsilon[1];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.Joints[2].InPortB.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.Joints[3].InPortB.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.Joints[4].InPortB.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.Joints[5].InPortB.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.OutPortK.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[2] = m.wheel.Wheel.OutPort.epsilon[2];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.Joints[2].InPortB.epsilon[3];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.Joints[3].InPortB.epsilon[3];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.Joints[4].InPortB.epsilon[3];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.Joints[5].InPortB.epsilon[3];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.OutPortK.epsilon[3];
  m.wheel.Joints[1].InPortB.epsilon[3] = m.wheel.Wheel.OutPort.epsilon[3];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.Joints[2].InPortB.omega[1];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.Joints[3].InPortB.omega[1];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.Joints[4].InPortB.omega[1];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.Joints[5].InPortB.omega[1];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.OutPortK.omega[1];
  m.wheel.Joints[1].InPortB.omega[1] = m.wheel.Wheel.OutPort.omega[1];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.Joints[2].InPortB.omega[2];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.Joints[3].InPortB.omega[2];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.Joints[4].InPortB.omega[2];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.Joints[5].InPortB.omega[2];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.OutPortK.omega[2];
  m.wheel.Joints[1].InPortB.omega[2] = m.wheel.Wheel.OutPort.omega[2];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.Joints[2].InPortB.omega[3];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.Joints[3].InPortB.omega[3];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.Joints[4].InPortB.omega[3];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.Joints[5].InPortB.omega[3];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.OutPortK.omega[3];
  m.wheel.Joints[1].InPortB.omega[3] = m.wheel.Wheel.OutPort.omega[3];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.Joints[2].InPortB.r[1];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.Joints[3].InPortB.r[1];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.Joints[4].InPortB.r[1];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.Joints[5].InPortB.r[1];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.OutPortK.r[1];
  m.wheel.Joints[1].InPortB.r[1] = m.wheel.Wheel.OutPort.r[1];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.Joints[2].InPortB.r[2];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.Joints[3].InPortB.r[2];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.Joints[4].InPortB.r[2];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.Joints[5].InPortB.r[2];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.OutPortK.r[2];
  m.wheel.Joints[1].InPortB.r[2] = m.wheel.Wheel.OutPort.r[2];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.Joints[2].InPortB.r[3];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.Joints[3].InPortB.r[3];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.Joints[4].InPortB.r[3];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.Joints[5].InPortB.r[3];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.OutPortK.r[3];
  m.wheel.Joints[1].InPortB.r[3] = m.wheel.Wheel.OutPort.r[3];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.Joints[2].InPortB.v[1];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.Joints[3].InPortB.v[1];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.Joints[4].InPortB.v[1];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.Joints[5].InPortB.v[1];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.OutPortK.v[1];
  m.wheel.Joints[1].InPortB.v[1] = m.wheel.Wheel.OutPort.v[1];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.Joints[2].InPortB.v[2];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.Joints[3].InPortB.v[2];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.Joints[4].InPortB.v[2];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.Joints[5].InPortB.v[2];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.OutPortK.v[2];
  m.wheel.Joints[1].InPortB.v[2] = m.wheel.Wheel.OutPort.v[2];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.Joints[2].InPortB.v[3];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.Joints[3].InPortB.v[3];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.Joints[4].InPortB.v[3];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.Joints[5].InPortB.v[3];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.OutPortK.v[3];
  m.wheel.Joints[1].InPortB.v[3] = m.wheel.Wheel.OutPort.v[3];
  m.wheel.Contacts[2].InPortB.T[1,1] = m.wheel.Joints[2].InPortA.T[1,1];
  m.wheel.Contacts[2].InPortB.T[1,1] = m.wheel.Rollers[2].OutPort.T[1,1];
  m.wheel.Contacts[2].InPortB.T[1,2] = m.wheel.Joints[2].InPortA.T[1,2];
  m.wheel.Contacts[2].InPortB.T[1,2] = m.wheel.Rollers[2].OutPort.T[1,2];
  m.wheel.Contacts[2].InPortB.T[1,3] = m.wheel.Joints[2].InPortA.T[1,3];
  m.wheel.Contacts[2].InPortB.T[1,3] = m.wheel.Rollers[2].OutPort.T[1,3];
  m.wheel.Contacts[2].InPortB.T[2,1] = m.wheel.Joints[2].InPortA.T[2,1];
  m.wheel.Contacts[2].InPortB.T[2,1] = m.wheel.Rollers[2].OutPort.T[2,1];
  m.wheel.Contacts[2].InPortB.T[2,2] = m.wheel.Joints[2].InPortA.T[2,2];
  m.wheel.Contacts[2].InPortB.T[2,2] = m.wheel.Rollers[2].OutPort.T[2,2];
  m.wheel.Contacts[2].InPortB.T[2,3] = m.wheel.Joints[2].InPortA.T[2,3];
  m.wheel.Contacts[2].InPortB.T[2,3] = m.wheel.Rollers[2].OutPort.T[2,3];
  m.wheel.Contacts[2].InPortB.T[3,1] = m.wheel.Joints[2].InPortA.T[3,1];
  m.wheel.Contacts[2].InPortB.T[3,1] = m.wheel.Rollers[2].OutPort.T[3,1];
  m.wheel.Contacts[2].InPortB.T[3,2] = m.wheel.Joints[2].InPortA.T[3,2];
  m.wheel.Contacts[2].InPortB.T[3,2] = m.wheel.Rollers[2].OutPort.T[3,2];
  m.wheel.Contacts[2].InPortB.T[3,3] = m.wheel.Joints[2].InPortA.T[3,3];
  m.wheel.Contacts[2].InPortB.T[3,3] = m.wheel.Rollers[2].OutPort.T[3,3];
  m.wheel.Contacts[2].InPortB.a[1] = m.wheel.Joints[2].InPortA.a[1];
  m.wheel.Contacts[2].InPortB.a[1] = m.wheel.Rollers[2].OutPort.a[1];
  m.wheel.Contacts[2].InPortB.a[2] = m.wheel.Joints[2].InPortA.a[2];
  m.wheel.Contacts[2].InPortB.a[2] = m.wheel.Rollers[2].OutPort.a[2];
  m.wheel.Contacts[2].InPortB.a[3] = m.wheel.Joints[2].InPortA.a[3];
  m.wheel.Contacts[2].InPortB.a[3] = m.wheel.Rollers[2].OutPort.a[3];
  m.wheel.Contacts[2].InPortB.epsilon[1] = m.wheel.Joints[2].InPortA.epsilon[1];
  m.wheel.Contacts[2].InPortB.epsilon[1] = m.wheel.Rollers[2].OutPort.epsilon[1];
  m.wheel.Contacts[2].InPortB.epsilon[2] = m.wheel.Joints[2].InPortA.epsilon[2];
  m.wheel.Contacts[2].InPortB.epsilon[2] = m.wheel.Rollers[2].OutPort.epsilon[2];
  m.wheel.Contacts[2].InPortB.epsilon[3] = m.wheel.Joints[2].InPortA.epsilon[3];
  m.wheel.Contacts[2].InPortB.epsilon[3] = m.wheel.Rollers[2].OutPort.epsilon[3];
  m.wheel.Contacts[2].InPortB.omega[1] = m.wheel.Joints[2].InPortA.omega[1];
  m.wheel.Contacts[2].InPortB.omega[1] = m.wheel.Rollers[2].OutPort.omega[1];
  m.wheel.Contacts[2].InPortB.omega[2] = m.wheel.Joints[2].InPortA.omega[2];
  m.wheel.Contacts[2].InPortB.omega[2] = m.wheel.Rollers[2].OutPort.omega[2];
  m.wheel.Contacts[2].InPortB.omega[3] = m.wheel.Joints[2].InPortA.omega[3];
  m.wheel.Contacts[2].InPortB.omega[3] = m.wheel.Rollers[2].OutPort.omega[3];
  m.wheel.Contacts[2].InPortB.r[1] = m.wheel.Joints[2].InPortA.r[1];
  m.wheel.Contacts[2].InPortB.r[1] = m.wheel.Rollers[2].OutPort.r[1];
  m.wheel.Contacts[2].InPortB.r[2] = m.wheel.Joints[2].InPortA.r[2];
  m.wheel.Contacts[2].InPortB.r[2] = m.wheel.Rollers[2].OutPort.r[2];
  m.wheel.Contacts[2].InPortB.r[3] = m.wheel.Joints[2].InPortA.r[3];
  m.wheel.Contacts[2].InPortB.r[3] = m.wheel.Rollers[2].OutPort.r[3];
  m.wheel.Contacts[2].InPortB.v[1] = m.wheel.Joints[2].InPortA.v[1];
  m.wheel.Contacts[2].InPortB.v[1] = m.wheel.Rollers[2].OutPort.v[1];
  m.wheel.Contacts[2].InPortB.v[2] = m.wheel.Joints[2].InPortA.v[2];
  m.wheel.Contacts[2].InPortB.v[2] = m.wheel.Rollers[2].OutPort.v[2];
  m.wheel.Contacts[2].InPortB.v[3] = m.wheel.Joints[2].InPortA.v[3];
  m.wheel.Contacts[2].InPortB.v[3] = m.wheel.Rollers[2].OutPort.v[3];
  m.wheel.Contacts[2].OutPortB.F[1] = m.wheel.Rollers[2].InPorts[1].F[1];
  m.wheel.Contacts[2].OutPortB.F[2] = m.wheel.Rollers[2].InPorts[1].F[2];
  m.wheel.Contacts[2].OutPortB.F[3] = m.wheel.Rollers[2].InPorts[1].F[3];
  m.wheel.Contacts[2].OutPortB.M[1] = m.wheel.Rollers[2].InPorts[1].M[1];
  m.wheel.Contacts[2].OutPortB.M[2] = m.wheel.Rollers[2].InPorts[1].M[2];
  m.wheel.Contacts[2].OutPortB.M[3] = m.wheel.Rollers[2].InPorts[1].M[3];
  m.wheel.Contacts[2].OutPortB.P[1] = m.wheel.Rollers[2].InPorts[1].P[1];
  m.wheel.Contacts[2].OutPortB.P[2] = m.wheel.Rollers[2].InPorts[1].P[2];
  m.wheel.Contacts[2].OutPortB.P[3] = m.wheel.Rollers[2].InPorts[1].P[3];
  m.wheel.Joints[2].OutPortA.F[1] = m.wheel.Rollers[2].InPorts[2].F[1];
  m.wheel.Joints[2].OutPortA.F[2] = m.wheel.Rollers[2].InPorts[2].F[2];
  m.wheel.Joints[2].OutPortA.F[3] = m.wheel.Rollers[2].InPorts[2].F[3];
  m.wheel.Joints[2].OutPortA.M[1] = m.wheel.Rollers[2].InPorts[2].M[1];
  m.wheel.Joints[2].OutPortA.M[2] = m.wheel.Rollers[2].InPorts[2].M[2];
  m.wheel.Joints[2].OutPortA.M[3] = m.wheel.Rollers[2].InPorts[2].M[3];
  m.wheel.Joints[2].OutPortA.P[1] = m.wheel.Rollers[2].InPorts[2].P[1];
  m.wheel.Joints[2].OutPortA.P[2] = m.wheel.Rollers[2].InPorts[2].P[2];
  m.wheel.Joints[2].OutPortA.P[3] = m.wheel.Rollers[2].InPorts[2].P[3];
  m.wheel.Joints[2].OutPortB.F[1] = m.wheel.Wheel.InPorts[3].F[1];
  m.wheel.Joints[2].OutPortB.F[2] = m.wheel.Wheel.InPorts[3].F[2];
  m.wheel.Joints[2].OutPortB.F[3] = m.wheel.Wheel.InPorts[3].F[3];
  m.wheel.Joints[2].OutPortB.M[1] = m.wheel.Wheel.InPorts[3].M[1];
  m.wheel.Joints[2].OutPortB.M[2] = m.wheel.Wheel.InPorts[3].M[2];
  m.wheel.Joints[2].OutPortB.M[3] = m.wheel.Wheel.InPorts[3].M[3];
  m.wheel.Joints[2].OutPortB.P[1] = m.wheel.Wheel.InPorts[3].P[1];
  m.wheel.Joints[2].OutPortB.P[2] = m.wheel.Wheel.InPorts[3].P[2];
  m.wheel.Joints[2].OutPortB.P[3] = m.wheel.Wheel.InPorts[3].P[3];
  m.wheel.Contacts[3].InPortB.T[1,1] = m.wheel.Joints[3].InPortA.T[1,1];
  m.wheel.Contacts[3].InPortB.T[1,1] = m.wheel.Rollers[3].OutPort.T[1,1];
  m.wheel.Contacts[3].InPortB.T[1,2] = m.wheel.Joints[3].InPortA.T[1,2];
  m.wheel.Contacts[3].InPortB.T[1,2] = m.wheel.Rollers[3].OutPort.T[1,2];
  m.wheel.Contacts[3].InPortB.T[1,3] = m.wheel.Joints[3].InPortA.T[1,3];
  m.wheel.Contacts[3].InPortB.T[1,3] = m.wheel.Rollers[3].OutPort.T[1,3];
  m.wheel.Contacts[3].InPortB.T[2,1] = m.wheel.Joints[3].InPortA.T[2,1];
  m.wheel.Contacts[3].InPortB.T[2,1] = m.wheel.Rollers[3].OutPort.T[2,1];
  m.wheel.Contacts[3].InPortB.T[2,2] = m.wheel.Joints[3].InPortA.T[2,2];
  m.wheel.Contacts[3].InPortB.T[2,2] = m.wheel.Rollers[3].OutPort.T[2,2];
  m.wheel.Contacts[3].InPortB.T[2,3] = m.wheel.Joints[3].InPortA.T[2,3];
  m.wheel.Contacts[3].InPortB.T[2,3] = m.wheel.Rollers[3].OutPort.T[2,3];
  m.wheel.Contacts[3].InPortB.T[3,1] = m.wheel.Joints[3].InPortA.T[3,1];
  m.wheel.Contacts[3].InPortB.T[3,1] = m.wheel.Rollers[3].OutPort.T[3,1];
  m.wheel.Contacts[3].InPortB.T[3,2] = m.wheel.Joints[3].InPortA.T[3,2];
  m.wheel.Contacts[3].InPortB.T[3,2] = m.wheel.Rollers[3].OutPort.T[3,2];
  m.wheel.Contacts[3].InPortB.T[3,3] = m.wheel.Joints[3].InPortA.T[3,3];
  m.wheel.Contacts[3].InPortB.T[3,3] = m.wheel.Rollers[3].OutPort.T[3,3];
  m.wheel.Contacts[3].InPortB.a[1] = m.wheel.Joints[3].InPortA.a[1];
  m.wheel.Contacts[3].InPortB.a[1] = m.wheel.Rollers[3].OutPort.a[1];
  m.wheel.Contacts[3].InPortB.a[2] = m.wheel.Joints[3].InPortA.a[2];
  m.wheel.Contacts[3].InPortB.a[2] = m.wheel.Rollers[3].OutPort.a[2];
  m.wheel.Contacts[3].InPortB.a[3] = m.wheel.Joints[3].InPortA.a[3];
  m.wheel.Contacts[3].InPortB.a[3] = m.wheel.Rollers[3].OutPort.a[3];
  m.wheel.Contacts[3].InPortB.epsilon[1] = m.wheel.Joints[3].InPortA.epsilon[1];
  m.wheel.Contacts[3].InPortB.epsilon[1] = m.wheel.Rollers[3].OutPort.epsilon[1];
  m.wheel.Contacts[3].InPortB.epsilon[2] = m.wheel.Joints[3].InPortA.epsilon[2];
  m.wheel.Contacts[3].InPortB.epsilon[2] = m.wheel.Rollers[3].OutPort.epsilon[2];
  m.wheel.Contacts[3].InPortB.epsilon[3] = m.wheel.Joints[3].InPortA.epsilon[3];
  m.wheel.Contacts[3].InPortB.epsilon[3] = m.wheel.Rollers[3].OutPort.epsilon[3];
  m.wheel.Contacts[3].InPortB.omega[1] = m.wheel.Joints[3].InPortA.omega[1];
  m.wheel.Contacts[3].InPortB.omega[1] = m.wheel.Rollers[3].OutPort.omega[1];
  m.wheel.Contacts[3].InPortB.omega[2] = m.wheel.Joints[3].InPortA.omega[2];
  m.wheel.Contacts[3].InPortB.omega[2] = m.wheel.Rollers[3].OutPort.omega[2];
  m.wheel.Contacts[3].InPortB.omega[3] = m.wheel.Joints[3].InPortA.omega[3];
  m.wheel.Contacts[3].InPortB.omega[3] = m.wheel.Rollers[3].OutPort.omega[3];
  m.wheel.Contacts[3].InPortB.r[1] = m.wheel.Joints[3].InPortA.r[1];
  m.wheel.Contacts[3].InPortB.r[1] = m.wheel.Rollers[3].OutPort.r[1];
  m.wheel.Contacts[3].InPortB.r[2] = m.wheel.Joints[3].InPortA.r[2];
  m.wheel.Contacts[3].InPortB.r[2] = m.wheel.Rollers[3].OutPort.r[2];
  m.wheel.Contacts[3].InPortB.r[3] = m.wheel.Joints[3].InPortA.r[3];
  m.wheel.Contacts[3].InPortB.r[3] = m.wheel.Rollers[3].OutPort.r[3];
  m.wheel.Contacts[3].InPortB.v[1] = m.wheel.Joints[3].InPortA.v[1];
  m.wheel.Contacts[3].InPortB.v[1] = m.wheel.Rollers[3].OutPort.v[1];
  m.wheel.Contacts[3].InPortB.v[2] = m.wheel.Joints[3].InPortA.v[2];
  m.wheel.Contacts[3].InPortB.v[2] = m.wheel.Rollers[3].OutPort.v[2];
  m.wheel.Contacts[3].InPortB.v[3] = m.wheel.Joints[3].InPortA.v[3];
  m.wheel.Contacts[3].InPortB.v[3] = m.wheel.Rollers[3].OutPort.v[3];
  m.wheel.Contacts[3].OutPortB.F[1] = m.wheel.Rollers[3].InPorts[1].F[1];
  m.wheel.Contacts[3].OutPortB.F[2] = m.wheel.Rollers[3].InPorts[1].F[2];
  m.wheel.Contacts[3].OutPortB.F[3] = m.wheel.Rollers[3].InPorts[1].F[3];
  m.wheel.Contacts[3].OutPortB.M[1] = m.wheel.Rollers[3].InPorts[1].M[1];
  m.wheel.Contacts[3].OutPortB.M[2] = m.wheel.Rollers[3].InPorts[1].M[2];
  m.wheel.Contacts[3].OutPortB.M[3] = m.wheel.Rollers[3].InPorts[1].M[3];
  m.wheel.Contacts[3].OutPortB.P[1] = m.wheel.Rollers[3].InPorts[1].P[1];
  m.wheel.Contacts[3].OutPortB.P[2] = m.wheel.Rollers[3].InPorts[1].P[2];
  m.wheel.Contacts[3].OutPortB.P[3] = m.wheel.Rollers[3].InPorts[1].P[3];
  m.wheel.Joints[3].OutPortA.F[1] = m.wheel.Rollers[3].InPorts[2].F[1];
  m.wheel.Joints[3].OutPortA.F[2] = m.wheel.Rollers[3].InPorts[2].F[2];
  m.wheel.Joints[3].OutPortA.F[3] = m.wheel.Rollers[3].InPorts[2].F[3];
  m.wheel.Joints[3].OutPortA.M[1] = m.wheel.Rollers[3].InPorts[2].M[1];
  m.wheel.Joints[3].OutPortA.M[2] = m.wheel.Rollers[3].InPorts[2].M[2];
  m.wheel.Joints[3].OutPortA.M[3] = m.wheel.Rollers[3].InPorts[2].M[3];
  m.wheel.Joints[3].OutPortA.P[1] = m.wheel.Rollers[3].InPorts[2].P[1];
  m.wheel.Joints[3].OutPortA.P[2] = m.wheel.Rollers[3].InPorts[2].P[2];
  m.wheel.Joints[3].OutPortA.P[3] = m.wheel.Rollers[3].InPorts[2].P[3];
  m.wheel.Joints[3].OutPortB.F[1] = m.wheel.Wheel.InPorts[4].F[1];
  m.wheel.Joints[3].OutPortB.F[2] = m.wheel.Wheel.InPorts[4].F[2];
  m.wheel.Joints[3].OutPortB.F[3] = m.wheel.Wheel.InPorts[4].F[3];
  m.wheel.Joints[3].OutPortB.M[1] = m.wheel.Wheel.InPorts[4].M[1];
  m.wheel.Joints[3].OutPortB.M[2] = m.wheel.Wheel.InPorts[4].M[2];
  m.wheel.Joints[3].OutPortB.M[3] = m.wheel.Wheel.InPorts[4].M[3];
  m.wheel.Joints[3].OutPortB.P[1] = m.wheel.Wheel.InPorts[4].P[1];
  m.wheel.Joints[3].OutPortB.P[2] = m.wheel.Wheel.InPorts[4].P[2];
  m.wheel.Joints[3].OutPortB.P[3] = m.wheel.Wheel.InPorts[4].P[3];
  m.wheel.Contacts[4].InPortB.T[1,1] = m.wheel.Joints[4].InPortA.T[1,1];
  m.wheel.Contacts[4].InPortB.T[1,1] = m.wheel.Rollers[4].OutPort.T[1,1];
  m.wheel.Contacts[4].InPortB.T[1,2] = m.wheel.Joints[4].InPortA.T[1,2];
  m.wheel.Contacts[4].InPortB.T[1,2] = m.wheel.Rollers[4].OutPort.T[1,2];
  m.wheel.Contacts[4].InPortB.T[1,3] = m.wheel.Joints[4].InPortA.T[1,3];
  m.wheel.Contacts[4].InPortB.T[1,3] = m.wheel.Rollers[4].OutPort.T[1,3];
  m.wheel.Contacts[4].InPortB.T[2,1] = m.wheel.Joints[4].InPortA.T[2,1];
  m.wheel.Contacts[4].InPortB.T[2,1] = m.wheel.Rollers[4].OutPort.T[2,1];
  m.wheel.Contacts[4].InPortB.T[2,2] = m.wheel.Joints[4].InPortA.T[2,2];
  m.wheel.Contacts[4].InPortB.T[2,2] = m.wheel.Rollers[4].OutPort.T[2,2];
  m.wheel.Contacts[4].InPortB.T[2,3] = m.wheel.Joints[4].InPortA.T[2,3];
  m.wheel.Contacts[4].InPortB.T[2,3] = m.wheel.Rollers[4].OutPort.T[2,3];
  m.wheel.Contacts[4].InPortB.T[3,1] = m.wheel.Joints[4].InPortA.T[3,1];
  m.wheel.Contacts[4].InPortB.T[3,1] = m.wheel.Rollers[4].OutPort.T[3,1];
  m.wheel.Contacts[4].InPortB.T[3,2] = m.wheel.Joints[4].InPortA.T[3,2];
  m.wheel.Contacts[4].InPortB.T[3,2] = m.wheel.Rollers[4].OutPort.T[3,2];
  m.wheel.Contacts[4].InPortB.T[3,3] = m.wheel.Joints[4].InPortA.T[3,3];
  m.wheel.Contacts[4].InPortB.T[3,3] = m.wheel.Rollers[4].OutPort.T[3,3];
  m.wheel.Contacts[4].InPortB.a[1] = m.wheel.Joints[4].InPortA.a[1];
  m.wheel.Contacts[4].InPortB.a[1] = m.wheel.Rollers[4].OutPort.a[1];
  m.wheel.Contacts[4].InPortB.a[2] = m.wheel.Joints[4].InPortA.a[2];
  m.wheel.Contacts[4].InPortB.a[2] = m.wheel.Rollers[4].OutPort.a[2];
  m.wheel.Contacts[4].InPortB.a[3] = m.wheel.Joints[4].InPortA.a[3];
  m.wheel.Contacts[4].InPortB.a[3] = m.wheel.Rollers[4].OutPort.a[3];
  m.wheel.Contacts[4].InPortB.epsilon[1] = m.wheel.Joints[4].InPortA.epsilon[1];
  m.wheel.Contacts[4].InPortB.epsilon[1] = m.wheel.Rollers[4].OutPort.epsilon[1];
  m.wheel.Contacts[4].InPortB.epsilon[2] = m.wheel.Joints[4].InPortA.epsilon[2];
  m.wheel.Contacts[4].InPortB.epsilon[2] = m.wheel.Rollers[4].OutPort.epsilon[2];
  m.wheel.Contacts[4].InPortB.epsilon[3] = m.wheel.Joints[4].InPortA.epsilon[3];
  m.wheel.Contacts[4].InPortB.epsilon[3] = m.wheel.Rollers[4].OutPort.epsilon[3];
  m.wheel.Contacts[4].InPortB.omega[1] = m.wheel.Joints[4].InPortA.omega[1];
  m.wheel.Contacts[4].InPortB.omega[1] = m.wheel.Rollers[4].OutPort.omega[1];
  m.wheel.Contacts[4].InPortB.omega[2] = m.wheel.Joints[4].InPortA.omega[2];
  m.wheel.Contacts[4].InPortB.omega[2] = m.wheel.Rollers[4].OutPort.omega[2];
  m.wheel.Contacts[4].InPortB.omega[3] = m.wheel.Joints[4].InPortA.omega[3];
  m.wheel.Contacts[4].InPortB.omega[3] = m.wheel.Rollers[4].OutPort.omega[3];
  m.wheel.Contacts[4].InPortB.r[1] = m.wheel.Joints[4].InPortA.r[1];
  m.wheel.Contacts[4].InPortB.r[1] = m.wheel.Rollers[4].OutPort.r[1];
  m.wheel.Contacts[4].InPortB.r[2] = m.wheel.Joints[4].InPortA.r[2];
  m.wheel.Contacts[4].InPortB.r[2] = m.wheel.Rollers[4].OutPort.r[2];
  m.wheel.Contacts[4].InPortB.r[3] = m.wheel.Joints[4].InPortA.r[3];
  m.wheel.Contacts[4].InPortB.r[3] = m.wheel.Rollers[4].OutPort.r[3];
  m.wheel.Contacts[4].InPortB.v[1] = m.wheel.Joints[4].InPortA.v[1];
  m.wheel.Contacts[4].InPortB.v[1] = m.wheel.Rollers[4].OutPort.v[1];
  m.wheel.Contacts[4].InPortB.v[2] = m.wheel.Joints[4].InPortA.v[2];
  m.wheel.Contacts[4].InPortB.v[2] = m.wheel.Rollers[4].OutPort.v[2];
  m.wheel.Contacts[4].InPortB.v[3] = m.wheel.Joints[4].InPortA.v[3];
  m.wheel.Contacts[4].InPortB.v[3] = m.wheel.Rollers[4].OutPort.v[3];
  m.wheel.Contacts[4].OutPortB.F[1] = m.wheel.Rollers[4].InPorts[1].F[1];
  m.wheel.Contacts[4].OutPortB.F[2] = m.wheel.Rollers[4].InPorts[1].F[2];
  m.wheel.Contacts[4].OutPortB.F[3] = m.wheel.Rollers[4].InPorts[1].F[3];
  m.wheel.Contacts[4].OutPortB.M[1] = m.wheel.Rollers[4].InPorts[1].M[1];
  m.wheel.Contacts[4].OutPortB.M[2] = m.wheel.Rollers[4].InPorts[1].M[2];
  m.wheel.Contacts[4].OutPortB.M[3] = m.wheel.Rollers[4].InPorts[1].M[3];
  m.wheel.Contacts[4].OutPortB.P[1] = m.wheel.Rollers[4].InPorts[1].P[1];
  m.wheel.Contacts[4].OutPortB.P[2] = m.wheel.Rollers[4].InPorts[1].P[2];
  m.wheel.Contacts[4].OutPortB.P[3] = m.wheel.Rollers[4].InPorts[1].P[3];
  m.wheel.Joints[4].OutPortA.F[1] = m.wheel.Rollers[4].InPorts[2].F[1];
  m.wheel.Joints[4].OutPortA.F[2] = m.wheel.Rollers[4].InPorts[2].F[2];
  m.wheel.Joints[4].OutPortA.F[3] = m.wheel.Rollers[4].InPorts[2].F[3];
  m.wheel.Joints[4].OutPortA.M[1] = m.wheel.Rollers[4].InPorts[2].M[1];
  m.wheel.Joints[4].OutPortA.M[2] = m.wheel.Rollers[4].InPorts[2].M[2];
  m.wheel.Joints[4].OutPortA.M[3] = m.wheel.Rollers[4].InPorts[2].M[3];
  m.wheel.Joints[4].OutPortA.P[1] = m.wheel.Rollers[4].InPorts[2].P[1];
  m.wheel.Joints[4].OutPortA.P[2] = m.wheel.Rollers[4].InPorts[2].P[2];
  m.wheel.Joints[4].OutPortA.P[3] = m.wheel.Rollers[4].InPorts[2].P[3];
  m.wheel.Joints[4].OutPortB.F[1] = m.wheel.Wheel.InPorts[5].F[1];
  m.wheel.Joints[4].OutPortB.F[2] = m.wheel.Wheel.InPorts[5].F[2];
  m.wheel.Joints[4].OutPortB.F[3] = m.wheel.Wheel.InPorts[5].F[3];
  m.wheel.Joints[4].OutPortB.M[1] = m.wheel.Wheel.InPorts[5].M[1];
  m.wheel.Joints[4].OutPortB.M[2] = m.wheel.Wheel.InPorts[5].M[2];
  m.wheel.Joints[4].OutPortB.M[3] = m.wheel.Wheel.InPorts[5].M[3];
  m.wheel.Joints[4].OutPortB.P[1] = m.wheel.Wheel.InPorts[5].P[1];
  m.wheel.Joints[4].OutPortB.P[2] = m.wheel.Wheel.InPorts[5].P[2];
  m.wheel.Joints[4].OutPortB.P[3] = m.wheel.Wheel.InPorts[5].P[3];
  m.wheel.Contacts[5].InPortB.T[1,1] = m.wheel.Joints[5].InPortA.T[1,1];
  m.wheel.Contacts[5].InPortB.T[1,1] = m.wheel.Rollers[5].OutPort.T[1,1];
  m.wheel.Contacts[5].InPortB.T[1,2] = m.wheel.Joints[5].InPortA.T[1,2];
  m.wheel.Contacts[5].InPortB.T[1,2] = m.wheel.Rollers[5].OutPort.T[1,2];
  m.wheel.Contacts[5].InPortB.T[1,3] = m.wheel.Joints[5].InPortA.T[1,3];
  m.wheel.Contacts[5].InPortB.T[1,3] = m.wheel.Rollers[5].OutPort.T[1,3];
  m.wheel.Contacts[5].InPortB.T[2,1] = m.wheel.Joints[5].InPortA.T[2,1];
  m.wheel.Contacts[5].InPortB.T[2,1] = m.wheel.Rollers[5].OutPort.T[2,1];
  m.wheel.Contacts[5].InPortB.T[2,2] = m.wheel.Joints[5].InPortA.T[2,2];
  m.wheel.Contacts[5].InPortB.T[2,2] = m.wheel.Rollers[5].OutPort.T[2,2];
  m.wheel.Contacts[5].InPortB.T[2,3] = m.wheel.Joints[5].InPortA.T[2,3];
  m.wheel.Contacts[5].InPortB.T[2,3] = m.wheel.Rollers[5].OutPort.T[2,3];
  m.wheel.Contacts[5].InPortB.T[3,1] = m.wheel.Joints[5].InPortA.T[3,1];
  m.wheel.Contacts[5].InPortB.T[3,1] = m.wheel.Rollers[5].OutPort.T[3,1];
  m.wheel.Contacts[5].InPortB.T[3,2] = m.wheel.Joints[5].InPortA.T[3,2];
  m.wheel.Contacts[5].InPortB.T[3,2] = m.wheel.Rollers[5].OutPort.T[3,2];
  m.wheel.Contacts[5].InPortB.T[3,3] = m.wheel.Joints[5].InPortA.T[3,3];
  m.wheel.Contacts[5].InPortB.T[3,3] = m.wheel.Rollers[5].OutPort.T[3,3];
  m.wheel.Contacts[5].InPortB.a[1] = m.wheel.Joints[5].InPortA.a[1];
  m.wheel.Contacts[5].InPortB.a[1] = m.wheel.Rollers[5].OutPort.a[1];
  m.wheel.Contacts[5].InPortB.a[2] = m.wheel.Joints[5].InPortA.a[2];
  m.wheel.Contacts[5].InPortB.a[2] = m.wheel.Rollers[5].OutPort.a[2];
  m.wheel.Contacts[5].InPortB.a[3] = m.wheel.Joints[5].InPortA.a[3];
  m.wheel.Contacts[5].InPortB.a[3] = m.wheel.Rollers[5].OutPort.a[3];
  m.wheel.Contacts[5].InPortB.epsilon[1] = m.wheel.Joints[5].InPortA.epsilon[1];
  m.wheel.Contacts[5].InPortB.epsilon[1] = m.wheel.Rollers[5].OutPort.epsilon[1];
  m.wheel.Contacts[5].InPortB.epsilon[2] = m.wheel.Joints[5].InPortA.epsilon[2];
  m.wheel.Contacts[5].InPortB.epsilon[2] = m.wheel.Rollers[5].OutPort.epsilon[2];
  m.wheel.Contacts[5].InPortB.epsilon[3] = m.wheel.Joints[5].InPortA.epsilon[3];
  m.wheel.Contacts[5].InPortB.epsilon[3] = m.wheel.Rollers[5].OutPort.epsilon[3];
  m.wheel.Contacts[5].InPortB.omega[1] = m.wheel.Joints[5].InPortA.omega[1];
  m.wheel.Contacts[5].InPortB.omega[1] = m.wheel.Rollers[5].OutPort.omega[1];
  m.wheel.Contacts[5].InPortB.omega[2] = m.wheel.Joints[5].InPortA.omega[2];
  m.wheel.Contacts[5].InPortB.omega[2] = m.wheel.Rollers[5].OutPort.omega[2];
  m.wheel.Contacts[5].InPortB.omega[3] = m.wheel.Joints[5].InPortA.omega[3];
  m.wheel.Contacts[5].InPortB.omega[3] = m.wheel.Rollers[5].OutPort.omega[3];
  m.wheel.Contacts[5].InPortB.r[1] = m.wheel.Joints[5].InPortA.r[1];
  m.wheel.Contacts[5].InPortB.r[1] = m.wheel.Rollers[5].OutPort.r[1];
  m.wheel.Contacts[5].InPortB.r[2] = m.wheel.Joints[5].InPortA.r[2];
  m.wheel.Contacts[5].InPortB.r[2] = m.wheel.Rollers[5].OutPort.r[2];
  m.wheel.Contacts[5].InPortB.r[3] = m.wheel.Joints[5].InPortA.r[3];
  m.wheel.Contacts[5].InPortB.r[3] = m.wheel.Rollers[5].OutPort.r[3];
  m.wheel.Contacts[5].InPortB.v[1] = m.wheel.Joints[5].InPortA.v[1];
  m.wheel.Contacts[5].InPortB.v[1] = m.wheel.Rollers[5].OutPort.v[1];
  m.wheel.Contacts[5].InPortB.v[2] = m.wheel.Joints[5].InPortA.v[2];
  m.wheel.Contacts[5].InPortB.v[2] = m.wheel.Rollers[5].OutPort.v[2];
  m.wheel.Contacts[5].InPortB.v[3] = m.wheel.Joints[5].InPortA.v[3];
  m.wheel.Contacts[5].InPortB.v[3] = m.wheel.Rollers[5].OutPort.v[3];
  m.wheel.Contacts[5].OutPortB.F[1] = m.wheel.Rollers[5].InPorts[1].F[1];
  m.wheel.Contacts[5].OutPortB.F[2] = m.wheel.Rollers[5].InPorts[1].F[2];
  m.wheel.Contacts[5].OutPortB.F[3] = m.wheel.Rollers[5].InPorts[1].F[3];
  m.wheel.Contacts[5].OutPortB.M[1] = m.wheel.Rollers[5].InPorts[1].M[1];
  m.wheel.Contacts[5].OutPortB.M[2] = m.wheel.Rollers[5].InPorts[1].M[2];
  m.wheel.Contacts[5].OutPortB.M[3] = m.wheel.Rollers[5].InPorts[1].M[3];
  m.wheel.Contacts[5].OutPortB.P[1] = m.wheel.Rollers[5].InPorts[1].P[1];
  m.wheel.Contacts[5].OutPortB.P[2] = m.wheel.Rollers[5].InPorts[1].P[2];
  m.wheel.Contacts[5].OutPortB.P[3] = m.wheel.Rollers[5].InPorts[1].P[3];
  m.wheel.Joints[5].OutPortA.F[1] = m.wheel.Rollers[5].InPorts[2].F[1];
  m.wheel.Joints[5].OutPortA.F[2] = m.wheel.Rollers[5].InPorts[2].F[2];
  m.wheel.Joints[5].OutPortA.F[3] = m.wheel.Rollers[5].InPorts[2].F[3];
  m.wheel.Joints[5].OutPortA.M[1] = m.wheel.Rollers[5].InPorts[2].M[1];
  m.wheel.Joints[5].OutPortA.M[2] = m.wheel.Rollers[5].InPorts[2].M[2];
  m.wheel.Joints[5].OutPortA.M[3] = m.wheel.Rollers[5].InPorts[2].M[3];
  m.wheel.Joints[5].OutPortA.P[1] = m.wheel.Rollers[5].InPorts[2].P[1];
  m.wheel.Joints[5].OutPortA.P[2] = m.wheel.Rollers[5].InPorts[2].P[2];
  m.wheel.Joints[5].OutPortA.P[3] = m.wheel.Rollers[5].InPorts[2].P[3];
  m.wheel.Joints[5].OutPortB.F[1] = m.wheel.Wheel.InPorts[6].F[1];
  m.wheel.Joints[5].OutPortB.F[2] = m.wheel.Wheel.InPorts[6].F[2];
  m.wheel.Joints[5].OutPortB.F[3] = m.wheel.Wheel.InPorts[6].F[3];
  m.wheel.Joints[5].OutPortB.M[1] = m.wheel.Wheel.InPorts[6].M[1];
  m.wheel.Joints[5].OutPortB.M[2] = m.wheel.Wheel.InPorts[6].M[2];
  m.wheel.Joints[5].OutPortB.M[3] = m.wheel.Wheel.InPorts[6].M[3];
  m.wheel.Joints[5].OutPortB.P[1] = m.wheel.Wheel.InPorts[6].P[1];
  m.wheel.Joints[5].OutPortB.P[2] = m.wheel.Wheel.InPorts[6].P[2];
  m.wheel.Joints[5].OutPortB.P[3] = m.wheel.Wheel.InPorts[6].P[3];
  m.wheel.InPortF.F[1] = m.wheel.Wheel.InPorts[1].F[1];
  m.wheel.InPortF.F[2] = m.wheel.Wheel.InPorts[1].F[2];
  m.wheel.InPortF.F[3] = m.wheel.Wheel.InPorts[1].F[3];
  m.wheel.InPortF.M[1] = m.wheel.Wheel.InPorts[1].M[1];
  m.wheel.InPortF.M[2] = m.wheel.Wheel.InPorts[1].M[2];
  m.wheel.InPortF.M[3] = m.wheel.Wheel.InPorts[1].M[3];
  m.wheel.InPortF.P[1] = m.wheel.Wheel.InPorts[1].P[1];
  m.wheel.InPortF.P[2] = m.wheel.Wheel.InPorts[1].P[2];
  m.wheel.InPortF.P[3] = m.wheel.Wheel.InPorts[1].P[3];
  m.base.OutPort.T[1,1] = m.wheel.InPortK.T[1,1];
  m.base.OutPort.T[1,2] = m.wheel.InPortK.T[1,2];
  m.base.OutPort.T[1,3] = m.wheel.InPortK.T[1,3];
  m.base.OutPort.T[2,1] = m.wheel.InPortK.T[2,1];
  m.base.OutPort.T[2,2] = m.wheel.InPortK.T[2,2];
  m.base.OutPort.T[2,3] = m.wheel.InPortK.T[2,3];
  m.base.OutPort.T[3,1] = m.wheel.InPortK.T[3,1];
  m.base.OutPort.T[3,2] = m.wheel.InPortK.T[3,2];
  m.base.OutPort.T[3,3] = m.wheel.InPortK.T[3,3];
  m.base.OutPort.a[1] = m.wheel.InPortK.a[1];
  m.base.OutPort.a[2] = m.wheel.InPortK.a[2];
  m.base.OutPort.a[3] = m.wheel.InPortK.a[3];
  m.base.OutPort.epsilon[1] = m.wheel.InPortK.epsilon[1];
  m.base.OutPort.epsilon[2] = m.wheel.InPortK.epsilon[2];
  m.base.OutPort.epsilon[3] = m.wheel.InPortK.epsilon[3];
  m.base.OutPort.omega[1] = m.wheel.InPortK.omega[1];
  m.base.OutPort.omega[2] = m.wheel.InPortK.omega[2];
  m.base.OutPort.omega[3] = m.wheel.InPortK.omega[3];
  m.base.OutPort.r[1] = m.wheel.InPortK.r[1];
  m.base.OutPort.r[2] = m.wheel.InPortK.r[2];
  m.base.OutPort.r[3] = m.wheel.InPortK.r[3];
  m.base.OutPort.v[1] = m.wheel.InPortK.v[1];
  m.base.OutPort.v[2] = m.wheel.InPortK.v[2];
  m.base.OutPort.v[3] = m.wheel.InPortK.v[3];
end MbsLite.Test.Omni.OmniWheelAtRestTest;
"
====================================
Checking MbsLite.Test.Omni.OmniWheelAtRestTest
"Check of MbsLite.Test.Omni.OmniWheelAtRestTest completed successfully.
Class MbsLite.Test.Omni.OmniWheelAtRestTest has 1710 equation(s) and 1710 variable(s).
1034 of these are trivial equation(s)."
====================================
Simulating MbsLite.Test.Omni.OmniWheelAtRestTest
record SimulationResult
    resultFile = "",
    simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 1000, tolerance = 1e-09, method = 'dassl', fileNamePrefix = 'MbsLite.Test.Omni.OmniWheelAtRestTest', options = '', outputFormat = 'csv', variableFilter = '.*', cflags = '', simflags = ''",
    messages = "Simulation execution failed for model: MbsLite.Test.Omni.OmniWheelAtRestTest
stdout            | warning | The default linear solver fails, the fallback solver with total pivoting is started at time 0.000000. That might raise performance issues, for more information use -lv LOG_LS.
stdout            | info    | The initialization finished successfully without homotopy method.
stdout            | warning | The default linear solver fails, the fallback solver with total pivoting is started at time 0.000000. That might raise performance issues, for more information use -lv LOG_LS.
DASKR--  AT T (=R1) AND STEPSIZE H (=R2) THE                                    
      In above,  R1 =   3.4982539828745E-43   R2 =   6.2968571691740E-43
DASKR--  ERROR TEST FAILED REPEATEDLY OR WITH ABS(H)=HMIN                       
stdout            | warning | DDASSL had repeated error test failures on the last attempted step.
stdout            | warning | can't continue. time = 0.000000
stdout            | info    | model terminate | Integrator failed. | Simulation terminated at time 3.49825e-43
",
    timeFrontend = 2.130699739,
    timeBackend = 14.205010986,
    timeSimCode = 1.369097508,
    timeTemplates = 2.73266578,
    timeCompile = 14.621711684
end SimulationResult;
"[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Examples/OmniVehicle/PointContact/OmniWheel.mo:53:9-54:7:writable] Warning: Non-array modification 'm.wheel.rollerMass' for array component, possibly due to missing 'each'.
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Examples/OmniVehicle/PointContact/OmniWheel.mo:53:9-54:7:writable] Warning: Non-array modification 'm.wheel.rollerMass' for array component, possibly due to missing 'each'.
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Examples/OmniVehicle/PointContact/OmniWheel.mo:53:9-54:7:writable] Warning: Non-array modification 'm.wheel.rollerMass' for array component, possibly due to missing 'each'.
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Examples/OmniVehicle/PointContact/OmniWheel.mo:53:9-54:7:writable] Warning: Non-array modification 'm.wheel.rollerMass' for array component, possibly due to missing 'each'.
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Examples/OmniVehicle/PointContact/OmniWheel.mo:53:9-54:7:writable] Warning: Non-array modification 'm.wheel.rollerMass' for array component, possibly due to missing 'each'.
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/KinematicPort.mo:3:1-12:18:writable] Warning: Connector .MbsLite.KinematicPort is not balanced: The number of potential variables (24) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/WrenchPort.mo:3:1-9:15:writable] Warning: Connector .MbsLite.WrenchPort is not balanced: The number of potential variables (9) is not equal to the number of flow variables (0).
[/home/vf/om/models/omni/thin/lib/MbsLite/Test/Omni/OmniWheelAtRestTest.mo:16:3-21:11:writable] Warning: In component <NO COMPONENT>, in relation time == 1.0,  ==  on Real numbers is only allowed inside functions.
Warning: Assuming fixed start value for the following 79 variables:
         m.wheel.Joints[5].angle:VARIABLE(unit = "rad/s" )  "Relative angle. Beware numeric error accumulation!" type: Real  [5]
         m.wheel.Joints[4].angle:VARIABLE(unit = "rad/s" )  "Relative angle. Beware numeric error accumulation!" type: Real  [5]
         m.wheel.Joints[3].angle:VARIABLE(unit = "rad/s" )  "Relative angle. Beware numeric error accumulation!" type: Real  [5]
         m.wheel.Joints[2].angle:VARIABLE(unit = "rad/s" )  "Relative angle. Beware numeric error accumulation!" type: Real  [5]
         m.wheel.Joints[1].angle:VARIABLE(unit = "rad/s" )  "Relative angle. Beware numeric error accumulation!" type: Real  [5]
         m.wheel.Joints[5].mu:VARIABLE(unit = "rad/s" )  "Relative angular velocity along the axis" type: Real  [5]
         m.wheel.Joints[4].mu:VARIABLE(unit = "rad/s" )  "Relative angular velocity along the axis" type: Real  [5]
         m.wheel.Joints[3].mu:VARIABLE(unit = "rad/s" )  "Relative angular velocity along the axis" type: Real  [5]
         m.wheel.Joints[2].mu:VARIABLE(unit = "rad/s" )  "Relative angular velocity along the axis" type: Real  [5]
         m.wheel.Joints[1].mu:VARIABLE(unit = "rad/s" )  "Relative angular velocity along the axis" type: Real  [5]
         m.wheel.Wheel.Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real 
         m.wheel.Wheel.omega[3]:VARIABLE(start = m.wheel.omega0[3] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [3]
         m.wheel.Wheel.omega[2]:VARIABLE(start = m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [3]
         m.wheel.Wheel.omega[1]:VARIABLE(start = m.wheel.omega0[1] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [3]
         m.wheel.Wheel.q[4]:VARIABLE(start = m.wheel.q0[4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [4]
         m.wheel.Wheel.q[3]:VARIABLE(start = m.wheel.q0[3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [4]
         m.wheel.Wheel.q[2]:VARIABLE(start = m.wheel.q0[2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [4]
         m.wheel.Wheel.q[1]:VARIABLE(start = m.wheel.q0[1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [4]
         m.wheel.Wheel.v[3]:VARIABLE(start = m.wheel.v0[3] unit = "m/s" )  "Velocity vector of masscenter" type: Real  [3]
         m.wheel.Wheel.v[1]:VARIABLE(start = m.wheel.v0[1] unit = "m/s" )  "Velocity vector of masscenter" type: Real  [3]
         m.wheel.Wheel.r[3]:VARIABLE(start = m.wheel.r0[3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [3]
         m.wheel.Wheel.r[2]:VARIABLE(start = 0.05 unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [3]
         m.wheel.Wheel.r[1]:VARIABLE(start = m.wheel.r0[1] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [3]
         m.wheel.Rollers[5].Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real  [5]
         m.wheel.Rollers[5].omega[3]:VARIABLE(start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[5,3] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[5].omega[2]:VARIABLE(start = m.wheel.VerticalInRollersAxes[5,2] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[5].omega[1]:VARIABLE(start = m.wheel.VerticalInRollersAxes[5,1] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[5].q[4]:VARIABLE(start = m.wheel.RollerQs[5,4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[5].q[3]:VARIABLE(start = m.wheel.RollerQs[5,3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[5].q[2]:VARIABLE(start = m.wheel.RollerQs[5,2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[5].q[1]:VARIABLE(start = m.wheel.RollerQs[5,1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[5].r[3]:VARIABLE(start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[5,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[5].r[2]:VARIABLE(start = 0.05 + m.wheel.T0[2,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[5,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[5].r[1]:VARIABLE(start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[5,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[5,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[5,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[4].Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real  [5]
         m.wheel.Rollers[4].omega[3]:VARIABLE(start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[4,3] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[4].omega[2]:VARIABLE(start = m.wheel.VerticalInRollersAxes[4,2] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[4].omega[1]:VARIABLE(start = m.wheel.VerticalInRollersAxes[4,1] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[4].q[4]:VARIABLE(start = m.wheel.RollerQs[4,4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[4].q[3]:VARIABLE(start = m.wheel.RollerQs[4,3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[4].q[2]:VARIABLE(start = m.wheel.RollerQs[4,2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[4].q[1]:VARIABLE(start = m.wheel.RollerQs[4,1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[4].r[3]:VARIABLE(start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[4,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[4].r[2]:VARIABLE(start = 0.05 + m.wheel.T0[2,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[4,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[4].r[1]:VARIABLE(start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[4,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[4,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[4,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[3].Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real  [5]
         m.wheel.Rollers[3].omega[3]:VARIABLE(start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[3,3] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[3].omega[2]:VARIABLE(start = m.wheel.VerticalInRollersAxes[3,2] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[3].omega[1]:VARIABLE(start = m.wheel.VerticalInRollersAxes[3,1] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[3].q[4]:VARIABLE(start = m.wheel.RollerQs[3,4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[3].q[3]:VARIABLE(start = m.wheel.RollerQs[3,3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[3].q[2]:VARIABLE(start = m.wheel.RollerQs[3,2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[3].q[1]:VARIABLE(start = m.wheel.RollerQs[3,1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[3].r[3]:VARIABLE(start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[3,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[3].r[2]:VARIABLE(start = 0.05 + m.wheel.T0[2,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[3,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[3].r[1]:VARIABLE(start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[3,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[3,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[3,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[2].Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real  [5]
         m.wheel.Rollers[2].omega[3]:VARIABLE(start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[2,3] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[2].omega[2]:VARIABLE(start = m.wheel.VerticalInRollersAxes[2,2] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[2].omega[1]:VARIABLE(start = m.wheel.VerticalInRollersAxes[2,1] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[2].q[4]:VARIABLE(start = m.wheel.RollerQs[2,4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[2].q[3]:VARIABLE(start = m.wheel.RollerQs[2,3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[2].q[2]:VARIABLE(start = m.wheel.RollerQs[2,2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[2].q[1]:VARIABLE(start = m.wheel.RollerQs[2,1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[2].r[3]:VARIABLE(start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[2,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[2].r[2]:VARIABLE(start = 0.05 + m.wheel.T0[2,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[2,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[2].r[1]:VARIABLE(start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[2,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[2,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[2,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[1].Active:VARIABLE(start = 1.0 )  "Flag of active dynamics" type: Real  [5]
         m.wheel.Rollers[1].omega[3]:VARIABLE(start = m.wheel.omega0[3] + m.wheel.VerticalInRollersAxes[1,3] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[1].omega[2]:VARIABLE(start = m.wheel.VerticalInRollersAxes[1,2] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[1].omega[1]:VARIABLE(start = m.wheel.VerticalInRollersAxes[1,1] * m.wheel.omega0[2] unit = "rad/s" )  "Vector of angular rate in local coords" type: Real  [5,3]
         m.wheel.Rollers[1].q[4]:VARIABLE(start = m.wheel.RollerQs[1,4] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[1].q[3]:VARIABLE(start = m.wheel.RollerQs[1,3] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[1].q[2]:VARIABLE(start = m.wheel.RollerQs[1,2] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Rollers[1].q[1]:VARIABLE(start = m.wheel.RollerQs[1,1] )  "Quaternion of body orientation.
    QToT(q) * local = global.
    QRot(pi/6, { 0, 0, 1 }) => this body is rotated clockwise along the third axis (normal to the screen) by pi/6" type: Real  [5,4]
         m.wheel.Contacts[5].relvn:VARIABLE()  type: Real  [5]
         m.wheel.Rollers[1].r[1]:VARIABLE(start = m.wheel.r0[1] + m.wheel.T0[1,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[1,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[1,3] * m.wheel.RollerCenters[1,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[1].r[2]:VARIABLE(start = 0.05 + m.wheel.T0[2,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[2,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[2,3] * m.wheel.RollerCenters[1,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
         m.wheel.Rollers[1].r[3]:VARIABLE(start = m.wheel.r0[3] + m.wheel.T0[3,1] * m.wheel.RollerCenters[1,1] + m.wheel.T0[3,2] * m.wheel.RollerCenters[1,2] + m.wheel.T0[3,3] * m.wheel.RollerCenters[1,3] unit = "m" )  "Radius vector of masscenter in global coords" type: Real  [5,3]
"
